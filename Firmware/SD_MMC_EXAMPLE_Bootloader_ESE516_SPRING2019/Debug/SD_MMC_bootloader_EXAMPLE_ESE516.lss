
SD_MMC_bootloader_EXAMPLE_ESE516.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000076c8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000076c8  000076c8  000176c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000204  20000000  000076d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000ca8  20000204  000078d4  00020204  2**2
                  ALLOC
  4 .stack        00002004  20000eac  0000857c  00020204  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
  7 .debug_info   00047de0  00000000  00000000  00020285  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006838  00000000  00000000  00068065  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000107da  00000000  00000000  0006e89d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000b48  00000000  00000000  0007f077  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000010a0  00000000  00000000  0007fbbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ff49  00000000  00000000  00080c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00015f15  00000000  00000000  000a0ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00093b29  00000000  00000000  000b6abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002348  00000000  00000000  0014a5e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	b0 2e 00 20 1d 35 00 00 19 35 00 00 19 35 00 00     ... .5...5...5..
	...
      2c:	19 35 00 00 00 00 00 00 00 00 00 00 19 35 00 00     .5...........5..
      3c:	19 35 00 00 19 35 00 00 19 35 00 00 19 35 00 00     .5...5...5...5..
      4c:	19 35 00 00 19 35 00 00 19 35 00 00 19 35 00 00     .5...5...5...5..
      5c:	19 35 00 00 19 35 00 00 0d 20 00 00 1d 20 00 00     .5...5... ... ..
      6c:	2d 20 00 00 3d 20 00 00 4d 20 00 00 5d 20 00 00     - ..= ..M ..] ..
      7c:	19 35 00 00 19 35 00 00 19 35 00 00 19 35 00 00     .5...5...5...5..
      8c:	19 35 00 00 19 35 00 00 00 00 00 00 00 00 00 00     .5...5..........
      9c:	19 35 00 00 19 35 00 00 19 35 00 00 19 35 00 00     .5...5...5...5..
      ac:	19 35 00 00 00 00 00 00                             .5......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000204 	.word	0x20000204
      d4:	00000000 	.word	0x00000000
      d8:	000076d0 	.word	0x000076d0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000208 	.word	0x20000208
     108:	000076d0 	.word	0x000076d0
     10c:	000076d0 	.word	0x000076d0
     110:	00000000 	.word	0x00000000

00000114 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     114:	b5f0      	push	{r4, r5, r6, r7, lr}
     116:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     118:	ac01      	add	r4, sp, #4
     11a:	2501      	movs	r5, #1
     11c:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     11e:	2700      	movs	r7, #0
     120:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     122:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     124:	0021      	movs	r1, r4
     126:	2017      	movs	r0, #23
     128:	4e06      	ldr	r6, [pc, #24]	; (144 <system_board_init+0x30>)
     12a:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     12c:	2280      	movs	r2, #128	; 0x80
     12e:	0412      	lsls	r2, r2, #16
     130:	4b05      	ldr	r3, [pc, #20]	; (148 <system_board_init+0x34>)
     132:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     134:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     136:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     138:	0021      	movs	r1, r4
     13a:	2037      	movs	r0, #55	; 0x37
     13c:	47b0      	blx	r6
}
     13e:	b003      	add	sp, #12
     140:	bdf0      	pop	{r4, r5, r6, r7, pc}
     142:	46c0      	nop			; (mov r8, r8)
     144:	00001a2d 	.word	0x00001a2d
     148:	41004400 	.word	0x41004400

0000014c <dsu_crc32_cal>:
 * \retval STATUS_ERR_BAD_ADDRESS  The address was not aligned with 4 bytes.
 
 * \retval STATUS_ERR_IO  A bus error is detected
 */
enum status_code dsu_crc32_cal(const uint32_t addr, const uint32_t len, uint32_t *pcrc32)
{
     14c:	b570      	push	{r4, r5, r6, lr}
     14e:	0004      	movs	r4, r0
     150:	000e      	movs	r6, r1
     152:	0015      	movs	r5, r2
	if (addr & 0x00000003) {
		return STATUS_ERR_BAD_ADDRESS;
     154:	2018      	movs	r0, #24
	if (addr & 0x00000003) {
     156:	07a3      	lsls	r3, r4, #30
     158:	d000      	beq.n	15c <dsu_crc32_cal+0x10>
	DSU->STATUSA.reg = DSU_STATUSA_DONE;

	system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
	system_interrupt_enable_global();
	return STATUS_OK;
     15a:	bd70      	pop	{r4, r5, r6, pc}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     15c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     15e:	f3bf 8f5f 	dmb	sy
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
	cpu_irq_disable();
     162:	2200      	movs	r2, #0
     164:	4b1b      	ldr	r3, [pc, #108]	; (1d4 <dsu_crc32_cal+0x88>)
     166:	701a      	strb	r2, [r3, #0]
	system_peripheral_unlock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     168:	2122      	movs	r1, #34	; 0x22
     16a:	4249      	negs	r1, r1
     16c:	3009      	adds	r0, #9
     16e:	4b1a      	ldr	r3, [pc, #104]	; (1d8 <dsu_crc32_cal+0x8c>)
     170:	4798      	blx	r3
	DSU->DATA.reg = *pcrc32;
     172:	4b1a      	ldr	r3, [pc, #104]	; (1dc <dsu_crc32_cal+0x90>)
     174:	682a      	ldr	r2, [r5, #0]
     176:	60da      	str	r2, [r3, #12]
	DSU->ADDR.reg = addr;
     178:	605c      	str	r4, [r3, #4]
	DSU->LENGTH.reg = len;
     17a:	609e      	str	r6, [r3, #8]
	DSU->CTRL.bit.CRC = 1;
     17c:	781a      	ldrb	r2, [r3, #0]
     17e:	2104      	movs	r1, #4
     180:	430a      	orrs	r2, r1
     182:	701a      	strb	r2, [r3, #0]
	while ((DSU->STATUSA.reg & DSU_STATUSA_DONE) != 1) {	
     184:	0019      	movs	r1, r3
     186:	2201      	movs	r2, #1
     188:	784b      	ldrb	r3, [r1, #1]
     18a:	4213      	tst	r3, r2
     18c:	d0fc      	beq.n	188 <dsu_crc32_cal+0x3c>
	if (DSU->STATUSA.reg & DSU_STATUSA_BERR) {
     18e:	4b13      	ldr	r3, [pc, #76]	; (1dc <dsu_crc32_cal+0x90>)
     190:	785b      	ldrb	r3, [r3, #1]
     192:	075b      	lsls	r3, r3, #29
     194:	d50c      	bpl.n	1b0 <dsu_crc32_cal+0x64>
		system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     196:	2122      	movs	r1, #34	; 0x22
     198:	4249      	negs	r1, r1
     19a:	2021      	movs	r0, #33	; 0x21
     19c:	4b10      	ldr	r3, [pc, #64]	; (1e0 <dsu_crc32_cal+0x94>)
     19e:	4798      	blx	r3
	cpu_irq_enable();
     1a0:	2201      	movs	r2, #1
     1a2:	4b0c      	ldr	r3, [pc, #48]	; (1d4 <dsu_crc32_cal+0x88>)
     1a4:	701a      	strb	r2, [r3, #0]
     1a6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     1aa:	b662      	cpsie	i
		return STATUS_ERR_IO;
     1ac:	2010      	movs	r0, #16
     1ae:	e7d4      	b.n	15a <dsu_crc32_cal+0xe>
	*pcrc32 = DSU->DATA.reg;
     1b0:	4b0a      	ldr	r3, [pc, #40]	; (1dc <dsu_crc32_cal+0x90>)
     1b2:	68da      	ldr	r2, [r3, #12]
     1b4:	602a      	str	r2, [r5, #0]
	DSU->STATUSA.reg = DSU_STATUSA_DONE;
     1b6:	2401      	movs	r4, #1
     1b8:	705c      	strb	r4, [r3, #1]
	system_peripheral_lock(SYSTEM_PERIPHERAL_ID(DSU), ~SYSTEM_PERIPHERAL_ID(DSU));
     1ba:	2122      	movs	r1, #34	; 0x22
     1bc:	4249      	negs	r1, r1
     1be:	2021      	movs	r0, #33	; 0x21
     1c0:	4b07      	ldr	r3, [pc, #28]	; (1e0 <dsu_crc32_cal+0x94>)
     1c2:	4798      	blx	r3
     1c4:	4b03      	ldr	r3, [pc, #12]	; (1d4 <dsu_crc32_cal+0x88>)
     1c6:	701c      	strb	r4, [r3, #0]
     1c8:	f3bf 8f5f 	dmb	sy
     1cc:	b662      	cpsie	i
	return STATUS_OK;
     1ce:	2000      	movs	r0, #0
     1d0:	e7c3      	b.n	15a <dsu_crc32_cal+0xe>
     1d2:	46c0      	nop			; (mov r8, r8)
     1d4:	2000000d 	.word	0x2000000d
     1d8:	000004dd 	.word	0x000004dd
     1dc:	41002000 	.word	0x41002000
     1e0:	0000047d 	.word	0x0000047d

000001e4 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     1e4:	b510      	push	{r4, lr}
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     1e6:	4a1e      	ldr	r2, [pc, #120]	; (260 <nvm_set_config+0x7c>)
     1e8:	69d3      	ldr	r3, [r2, #28]
     1ea:	2104      	movs	r1, #4
     1ec:	430b      	orrs	r3, r1
     1ee:	61d3      	str	r3, [r2, #28]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     1f0:	4b1c      	ldr	r3, [pc, #112]	; (264 <nvm_set_config+0x80>)
     1f2:	2220      	movs	r2, #32
     1f4:	32ff      	adds	r2, #255	; 0xff
     1f6:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     1f8:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     1fa:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
     1fc:	07d2      	lsls	r2, r2, #31
     1fe:	d401      	bmi.n	204 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
     200:	0018      	movs	r0, r3
     202:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     204:	7803      	ldrb	r3, [r0, #0]
     206:	021b      	lsls	r3, r3, #8
     208:	22c0      	movs	r2, #192	; 0xc0
     20a:	0092      	lsls	r2, r2, #2
     20c:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     20e:	7841      	ldrb	r1, [r0, #1]
     210:	01c9      	lsls	r1, r1, #7
     212:	22ff      	movs	r2, #255	; 0xff
     214:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     216:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     218:	7881      	ldrb	r1, [r0, #2]
     21a:	0049      	lsls	r1, r1, #1
     21c:	221e      	movs	r2, #30
     21e:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     220:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     222:	78c2      	ldrb	r2, [r0, #3]
     224:	0492      	lsls	r2, r2, #18
     226:	2180      	movs	r1, #128	; 0x80
     228:	02c9      	lsls	r1, r1, #11
     22a:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     22c:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     22e:	7902      	ldrb	r2, [r0, #4]
     230:	0412      	lsls	r2, r2, #16
     232:	21c0      	movs	r1, #192	; 0xc0
     234:	0289      	lsls	r1, r1, #10
     236:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     238:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     23a:	4a0a      	ldr	r2, [pc, #40]	; (264 <nvm_set_config+0x80>)
     23c:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     23e:	6893      	ldr	r3, [r2, #8]
     240:	035b      	lsls	r3, r3, #13
     242:	0f5b      	lsrs	r3, r3, #29
     244:	4908      	ldr	r1, [pc, #32]	; (268 <nvm_set_config+0x84>)
     246:	2408      	movs	r4, #8
     248:	409c      	lsls	r4, r3
     24a:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     24c:	6893      	ldr	r3, [r2, #8]
     24e:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     250:	7843      	ldrb	r3, [r0, #1]
     252:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     254:	8b13      	ldrh	r3, [r2, #24]
     256:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     258:	0fdb      	lsrs	r3, r3, #31
     25a:	011b      	lsls	r3, r3, #4
     25c:	e7d0      	b.n	200 <nvm_set_config+0x1c>
     25e:	46c0      	nop			; (mov r8, r8)
     260:	40000400 	.word	0x40000400
     264:	41004000 	.word	0x41004000
     268:	20000220 	.word	0x20000220

0000026c <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     26c:	b530      	push	{r4, r5, lr}
     26e:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     270:	4a22      	ldr	r2, [pc, #136]	; (2fc <nvm_execute_command+0x90>)
     272:	8810      	ldrh	r0, [r2, #0]
     274:	8853      	ldrh	r3, [r2, #2]
     276:	4343      	muls	r3, r0
     278:	428b      	cmp	r3, r1
     27a:	d206      	bcs.n	28a <nvm_execute_command+0x1e>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     27c:	2280      	movs	r2, #128	; 0x80
     27e:	0192      	lsls	r2, r2, #6
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     280:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     282:	4b1f      	ldr	r3, [pc, #124]	; (300 <nvm_execute_command+0x94>)
     284:	18cb      	adds	r3, r1, r3
     286:	4293      	cmp	r3, r2
     288:	d80e      	bhi.n	2a8 <nvm_execute_command+0x3c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     28a:	4b1e      	ldr	r3, [pc, #120]	; (304 <nvm_execute_command+0x98>)
     28c:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     28e:	2280      	movs	r2, #128	; 0x80
     290:	02d2      	lsls	r2, r2, #11
     292:	432a      	orrs	r2, r5
     294:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     296:	2220      	movs	r2, #32
     298:	32ff      	adds	r2, #255	; 0xff
     29a:	831a      	strh	r2, [r3, #24]
     29c:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     29e:	07db      	lsls	r3, r3, #31
     2a0:	d403      	bmi.n	2aa <nvm_execute_command+0x3e>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     2a2:	4b18      	ldr	r3, [pc, #96]	; (304 <nvm_execute_command+0x98>)
     2a4:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
     2a6:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
     2a8:	bd30      	pop	{r4, r5, pc}
	switch (command) {
     2aa:	2c45      	cmp	r4, #69	; 0x45
     2ac:	d822      	bhi.n	2f4 <nvm_execute_command+0x88>
     2ae:	00a3      	lsls	r3, r4, #2
     2b0:	4a15      	ldr	r2, [pc, #84]	; (308 <nvm_execute_command+0x9c>)
     2b2:	58d3      	ldr	r3, [r2, r3]
     2b4:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     2b6:	4b13      	ldr	r3, [pc, #76]	; (304 <nvm_execute_command+0x98>)
     2b8:	8b1b      	ldrh	r3, [r3, #24]
     2ba:	05db      	lsls	r3, r3, #23
     2bc:	d503      	bpl.n	2c6 <nvm_execute_command+0x5a>
				nvm_module->CTRLB.reg = ctrlb_bak;
     2be:	4b11      	ldr	r3, [pc, #68]	; (304 <nvm_execute_command+0x98>)
     2c0:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
     2c2:	2010      	movs	r0, #16
     2c4:	e7f0      	b.n	2a8 <nvm_execute_command+0x3c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     2c6:	0889      	lsrs	r1, r1, #2
     2c8:	0049      	lsls	r1, r1, #1
     2ca:	4b0e      	ldr	r3, [pc, #56]	; (304 <nvm_execute_command+0x98>)
     2cc:	61d9      	str	r1, [r3, #28]
			break;
     2ce:	e003      	b.n	2d8 <nvm_execute_command+0x6c>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     2d0:	0889      	lsrs	r1, r1, #2
     2d2:	0049      	lsls	r1, r1, #1
     2d4:	4b0b      	ldr	r3, [pc, #44]	; (304 <nvm_execute_command+0x98>)
     2d6:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     2d8:	20a5      	movs	r0, #165	; 0xa5
     2da:	0200      	lsls	r0, r0, #8
     2dc:	4304      	orrs	r4, r0
     2de:	4b09      	ldr	r3, [pc, #36]	; (304 <nvm_execute_command+0x98>)
     2e0:	801c      	strh	r4, [r3, #0]
     2e2:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     2e4:	2201      	movs	r2, #1
     2e6:	7d0b      	ldrb	r3, [r1, #20]
     2e8:	4213      	tst	r3, r2
     2ea:	d0fc      	beq.n	2e6 <nvm_execute_command+0x7a>
	nvm_module->CTRLB.reg = ctrlb_bak;
     2ec:	4b05      	ldr	r3, [pc, #20]	; (304 <nvm_execute_command+0x98>)
     2ee:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
     2f0:	2000      	movs	r0, #0
     2f2:	e7d9      	b.n	2a8 <nvm_execute_command+0x3c>
			nvm_module->CTRLB.reg = ctrlb_bak;
     2f4:	4b03      	ldr	r3, [pc, #12]	; (304 <nvm_execute_command+0x98>)
     2f6:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     2f8:	2017      	movs	r0, #23
     2fa:	e7d5      	b.n	2a8 <nvm_execute_command+0x3c>
     2fc:	20000220 	.word	0x20000220
     300:	ff7fc000 	.word	0xff7fc000
     304:	41004000 	.word	0x41004000
     308:	00006b78 	.word	0x00006b78

0000030c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     30e:	4b25      	ldr	r3, [pc, #148]	; (3a4 <nvm_write_buffer+0x98>)
     310:	881d      	ldrh	r5, [r3, #0]
     312:	885b      	ldrh	r3, [r3, #2]
     314:	436b      	muls	r3, r5
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     316:	2418      	movs	r4, #24
	if (destination_address >
     318:	4283      	cmp	r3, r0
     31a:	d201      	bcs.n	320 <nvm_write_buffer+0x14>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
     31c:	0020      	movs	r0, r4
     31e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (destination_address & (_nvm_dev.page_size - 1)) {
     320:	1e6b      	subs	r3, r5, #1
     322:	4218      	tst	r0, r3
     324:	d1fa      	bne.n	31c <nvm_write_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     326:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     328:	4295      	cmp	r5, r2
     32a:	d3f7      	bcc.n	31c <nvm_write_buffer+0x10>
     32c:	4b1e      	ldr	r3, [pc, #120]	; (3a8 <nvm_write_buffer+0x9c>)
     32e:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     330:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     332:	07db      	lsls	r3, r3, #31
     334:	d5f2      	bpl.n	31c <nvm_write_buffer+0x10>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     336:	4c1d      	ldr	r4, [pc, #116]	; (3ac <nvm_write_buffer+0xa0>)
     338:	4b1b      	ldr	r3, [pc, #108]	; (3a8 <nvm_write_buffer+0x9c>)
     33a:	801c      	strh	r4, [r3, #0]
     33c:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
     33e:	2401      	movs	r4, #1
     340:	7d2b      	ldrb	r3, [r5, #20]
     342:	4223      	tst	r3, r4
     344:	d0fc      	beq.n	340 <nvm_write_buffer+0x34>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     346:	2420      	movs	r4, #32
     348:	34ff      	adds	r4, #255	; 0xff
     34a:	4b17      	ldr	r3, [pc, #92]	; (3a8 <nvm_write_buffer+0x9c>)
     34c:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     34e:	2a00      	cmp	r2, #0
     350:	d022      	beq.n	398 <nvm_write_buffer+0x8c>
     352:	2301      	movs	r3, #1
     354:	0005      	movs	r5, r0
     356:	439d      	bics	r5, r3
     358:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     35a:	1e57      	subs	r7, r2, #1
     35c:	e009      	b.n	372 <nvm_write_buffer+0x66>
			data |= (buffer[i + 1] << 8);
     35e:	18ce      	adds	r6, r1, r3
     360:	7876      	ldrb	r6, [r6, #1]
     362:	0236      	lsls	r6, r6, #8
     364:	4334      	orrs	r4, r6
		NVM_MEMORY[nvm_address++] = data;
     366:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     368:	3302      	adds	r3, #2
     36a:	b29b      	uxth	r3, r3
     36c:	3502      	adds	r5, #2
     36e:	429a      	cmp	r2, r3
     370:	d904      	bls.n	37c <nvm_write_buffer+0x70>
		data = buffer[i];
     372:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
     374:	42bb      	cmp	r3, r7
     376:	dbf2      	blt.n	35e <nvm_write_buffer+0x52>
		data = buffer[i];
     378:	b2a4      	uxth	r4, r4
     37a:	e7f4      	b.n	366 <nvm_write_buffer+0x5a>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     37c:	4b09      	ldr	r3, [pc, #36]	; (3a4 <nvm_write_buffer+0x98>)
     37e:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     380:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     382:	2b00      	cmp	r3, #0
     384:	d1ca      	bne.n	31c <nvm_write_buffer+0x10>
     386:	2a3f      	cmp	r2, #63	; 0x3f
     388:	d8c8      	bhi.n	31c <nvm_write_buffer+0x10>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
     38a:	2200      	movs	r2, #0
     38c:	0001      	movs	r1, r0
     38e:	2004      	movs	r0, #4
     390:	4b07      	ldr	r3, [pc, #28]	; (3b0 <nvm_write_buffer+0xa4>)
     392:	4798      	blx	r3
     394:	0004      	movs	r4, r0
     396:	e7c1      	b.n	31c <nvm_write_buffer+0x10>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     398:	4b02      	ldr	r3, [pc, #8]	; (3a4 <nvm_write_buffer+0x98>)
     39a:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     39c:	2400      	movs	r4, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     39e:	2b00      	cmp	r3, #0
     3a0:	d0f3      	beq.n	38a <nvm_write_buffer+0x7e>
     3a2:	e7bb      	b.n	31c <nvm_write_buffer+0x10>
     3a4:	20000220 	.word	0x20000220
     3a8:	41004000 	.word	0x41004000
     3ac:	ffffa544 	.word	0xffffa544
     3b0:	0000026d 	.word	0x0000026d

000003b4 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
     3b4:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     3b6:	4b18      	ldr	r3, [pc, #96]	; (418 <nvm_read_buffer+0x64>)
     3b8:	881d      	ldrh	r5, [r3, #0]
     3ba:	885b      	ldrh	r3, [r3, #2]
     3bc:	436b      	muls	r3, r5
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
     3be:	2418      	movs	r4, #24
	if (source_address >
     3c0:	4283      	cmp	r3, r0
     3c2:	d201      	bcs.n	3c8 <nvm_read_buffer+0x14>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
     3c4:	0020      	movs	r0, r4
     3c6:	bd70      	pop	{r4, r5, r6, pc}
	if (source_address & (_nvm_dev.page_size - 1)) {
     3c8:	1e6b      	subs	r3, r5, #1
     3ca:	4218      	tst	r0, r3
     3cc:	d1fa      	bne.n	3c4 <nvm_read_buffer+0x10>
		return STATUS_ERR_INVALID_ARG;
     3ce:	3c01      	subs	r4, #1
	if (length > _nvm_dev.page_size) {
     3d0:	4295      	cmp	r5, r2
     3d2:	d3f7      	bcc.n	3c4 <nvm_read_buffer+0x10>
     3d4:	4b11      	ldr	r3, [pc, #68]	; (41c <nvm_read_buffer+0x68>)
     3d6:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     3d8:	3c12      	subs	r4, #18
	if (!nvm_is_ready()) {
     3da:	07db      	lsls	r3, r3, #31
     3dc:	d5f2      	bpl.n	3c4 <nvm_read_buffer+0x10>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     3de:	2420      	movs	r4, #32
     3e0:	34ff      	adds	r4, #255	; 0xff
     3e2:	4b0e      	ldr	r3, [pc, #56]	; (41c <nvm_read_buffer+0x68>)
     3e4:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     3e6:	2a00      	cmp	r2, #0
     3e8:	d014      	beq.n	414 <nvm_read_buffer+0x60>
     3ea:	2301      	movs	r3, #1
     3ec:	4398      	bics	r0, r3
     3ee:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     3f0:	1e56      	subs	r6, r2, #1
     3f2:	e004      	b.n	3fe <nvm_read_buffer+0x4a>
	for (uint16_t i = 0; i < length; i += 2) {
     3f4:	3302      	adds	r3, #2
     3f6:	b29b      	uxth	r3, r3
     3f8:	3002      	adds	r0, #2
     3fa:	429a      	cmp	r2, r3
     3fc:	d908      	bls.n	410 <nvm_read_buffer+0x5c>
		uint16_t data = NVM_MEMORY[page_address++];
     3fe:	8804      	ldrh	r4, [r0, #0]
     400:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
     402:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
     404:	42b3      	cmp	r3, r6
     406:	daf5      	bge.n	3f4 <nvm_read_buffer+0x40>
			buffer[i + 1] = (data >> 8);
     408:	18cd      	adds	r5, r1, r3
     40a:	0a24      	lsrs	r4, r4, #8
     40c:	706c      	strb	r4, [r5, #1]
     40e:	e7f1      	b.n	3f4 <nvm_read_buffer+0x40>
	return STATUS_OK;
     410:	2400      	movs	r4, #0
     412:	e7d7      	b.n	3c4 <nvm_read_buffer+0x10>
     414:	2400      	movs	r4, #0
     416:	e7d5      	b.n	3c4 <nvm_read_buffer+0x10>
     418:	20000220 	.word	0x20000220
     41c:	41004000 	.word	0x41004000

00000420 <nvm_erase_row>:
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     420:	4b13      	ldr	r3, [pc, #76]	; (470 <nvm_erase_row+0x50>)
     422:	881a      	ldrh	r2, [r3, #0]
     424:	885b      	ldrh	r3, [r3, #2]
     426:	4353      	muls	r3, r2
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
     428:	2118      	movs	r1, #24
	if (row_address >
     42a:	4283      	cmp	r3, r0
     42c:	d201      	bcs.n	432 <nvm_erase_row+0x12>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
     42e:	0008      	movs	r0, r1
     430:	4770      	bx	lr
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     432:	0092      	lsls	r2, r2, #2
     434:	3a01      	subs	r2, #1
     436:	4210      	tst	r0, r2
     438:	d1f9      	bne.n	42e <nvm_erase_row+0xe>
     43a:	4b0e      	ldr	r3, [pc, #56]	; (474 <nvm_erase_row+0x54>)
     43c:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     43e:	3913      	subs	r1, #19
	if (!nvm_is_ready()) {
     440:	07db      	lsls	r3, r3, #31
     442:	d5f4      	bpl.n	42e <nvm_erase_row+0xe>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     444:	4b0b      	ldr	r3, [pc, #44]	; (474 <nvm_erase_row+0x54>)
     446:	2220      	movs	r2, #32
     448:	32ff      	adds	r2, #255	; 0xff
     44a:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     44c:	0880      	lsrs	r0, r0, #2
     44e:	0040      	lsls	r0, r0, #1
     450:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
     452:	4a09      	ldr	r2, [pc, #36]	; (478 <nvm_erase_row+0x58>)
     454:	801a      	strh	r2, [r3, #0]
     456:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     458:	2201      	movs	r2, #1
     45a:	7d0b      	ldrb	r3, [r1, #20]
     45c:	4213      	tst	r3, r2
     45e:	d0fc      	beq.n	45a <nvm_erase_row+0x3a>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     460:	4b04      	ldr	r3, [pc, #16]	; (474 <nvm_erase_row+0x54>)
     462:	8b19      	ldrh	r1, [r3, #24]
     464:	201c      	movs	r0, #28
     466:	4001      	ands	r1, r0
	return STATUS_OK;
     468:	1e48      	subs	r0, r1, #1
     46a:	4181      	sbcs	r1, r0
     46c:	0089      	lsls	r1, r1, #2
     46e:	e7de      	b.n	42e <nvm_erase_row+0xe>
     470:	20000220 	.word	0x20000220
     474:	41004000 	.word	0x41004000
     478:	ffffa502 	.word	0xffffa502

0000047c <system_peripheral_lock>:

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;

	/* Check if key is correct. */
	if (~peripheral_id != key) {
     47c:	43c2      	mvns	r2, r0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     47e:	2317      	movs	r3, #23
	if (~peripheral_id != key) {
     480:	428a      	cmp	r2, r1
     482:	d001      	beq.n	488 <system_peripheral_lock+0xc>
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     484:	0018      	movs	r0, r3
     486:	4770      	bx	lr
	uint8_t register_bit_pos = peripheral_id % 32;
     488:	3308      	adds	r3, #8
     48a:	4003      	ands	r3, r0
	switch (register_pos) {
     48c:	04c0      	lsls	r0, r0, #19
     48e:	0e00      	lsrs	r0, r0, #24
     490:	2801      	cmp	r0, #1
     492:	d00d      	beq.n	4b0 <system_peripheral_lock+0x34>
     494:	2800      	cmp	r0, #0
     496:	d003      	beq.n	4a0 <system_peripheral_lock+0x24>
     498:	2802      	cmp	r0, #2
     49a:	d011      	beq.n	4c0 <system_peripheral_lock+0x44>
			return STATUS_ERR_INVALID_ARG;
     49c:	2317      	movs	r3, #23
     49e:	e7f1      	b.n	484 <system_peripheral_lock+0x8>
			PAC0->WPSET.reg = (1 << register_bit_pos);
     4a0:	2201      	movs	r2, #1
     4a2:	409a      	lsls	r2, r3
     4a4:	0013      	movs	r3, r2
     4a6:	2280      	movs	r2, #128	; 0x80
     4a8:	05d2      	lsls	r2, r2, #23
     4aa:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
     4ac:	2300      	movs	r3, #0
			break;
     4ae:	e7e9      	b.n	484 <system_peripheral_lock+0x8>
			PAC1->WPSET.reg = (1 << register_bit_pos);
     4b0:	2201      	movs	r2, #1
     4b2:	409a      	lsls	r2, r3
     4b4:	0013      	movs	r3, r2
     4b6:	2282      	movs	r2, #130	; 0x82
     4b8:	05d2      	lsls	r2, r2, #23
     4ba:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
     4bc:	2300      	movs	r3, #0
			break;
     4be:	e7e1      	b.n	484 <system_peripheral_lock+0x8>
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     4c0:	4805      	ldr	r0, [pc, #20]	; (4d8 <system_peripheral_lock+0x5c>)
     4c2:	6a01      	ldr	r1, [r0, #32]
     4c4:	2201      	movs	r2, #1
     4c6:	4311      	orrs	r1, r2
     4c8:	6201      	str	r1, [r0, #32]
			PAC2->WPSET.reg = (1 << register_bit_pos);
     4ca:	409a      	lsls	r2, r3
     4cc:	2384      	movs	r3, #132	; 0x84
     4ce:	05db      	lsls	r3, r3, #23
     4d0:	605a      	str	r2, [r3, #4]
	return STATUS_OK;
     4d2:	2300      	movs	r3, #0
			break;
     4d4:	e7d6      	b.n	484 <system_peripheral_lock+0x8>
     4d6:	46c0      	nop			; (mov r8, r8)
     4d8:	40000400 	.word	0x40000400

000004dc <system_peripheral_unlock>:

	/* Value of which PAC register to use is given by bit 31:6 */
	uint8_t register_pos = peripheral_id / 32;

	/* Check if key is correct. */
	if (~peripheral_id != key) {
     4dc:	43c2      	mvns	r2, r0
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     4de:	2317      	movs	r3, #23
	if (~peripheral_id != key) {
     4e0:	428a      	cmp	r2, r1
     4e2:	d001      	beq.n	4e8 <system_peripheral_unlock+0xc>
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
     4e4:	0018      	movs	r0, r3
     4e6:	4770      	bx	lr
	uint8_t register_bit_pos = peripheral_id % 32;
     4e8:	3308      	adds	r3, #8
     4ea:	4003      	ands	r3, r0
	switch (register_pos) {
     4ec:	04c0      	lsls	r0, r0, #19
     4ee:	0e00      	lsrs	r0, r0, #24
     4f0:	2801      	cmp	r0, #1
     4f2:	d00d      	beq.n	510 <system_peripheral_unlock+0x34>
     4f4:	2800      	cmp	r0, #0
     4f6:	d003      	beq.n	500 <system_peripheral_unlock+0x24>
     4f8:	2802      	cmp	r0, #2
     4fa:	d011      	beq.n	520 <system_peripheral_unlock+0x44>
			return STATUS_ERR_INVALID_ARG;
     4fc:	2317      	movs	r3, #23
     4fe:	e7f1      	b.n	4e4 <system_peripheral_unlock+0x8>
			PAC0->WPCLR.reg = (1 << register_bit_pos);
     500:	2201      	movs	r2, #1
     502:	409a      	lsls	r2, r3
     504:	0013      	movs	r3, r2
     506:	2280      	movs	r2, #128	; 0x80
     508:	05d2      	lsls	r2, r2, #23
     50a:	6013      	str	r3, [r2, #0]
	return STATUS_OK;
     50c:	2300      	movs	r3, #0
			break;
     50e:	e7e9      	b.n	4e4 <system_peripheral_unlock+0x8>
			PAC1->WPCLR.reg = (1 << register_bit_pos);
     510:	2201      	movs	r2, #1
     512:	409a      	lsls	r2, r3
     514:	0013      	movs	r3, r2
     516:	2282      	movs	r2, #130	; 0x82
     518:	05d2      	lsls	r2, r2, #23
     51a:	6013      	str	r3, [r2, #0]
	return STATUS_OK;
     51c:	2300      	movs	r3, #0
			break;
     51e:	e7e1      	b.n	4e4 <system_peripheral_unlock+0x8>
     520:	4805      	ldr	r0, [pc, #20]	; (538 <system_peripheral_unlock+0x5c>)
     522:	6a01      	ldr	r1, [r0, #32]
     524:	2201      	movs	r2, #1
     526:	4311      	orrs	r1, r2
     528:	6201      	str	r1, [r0, #32]
			PAC2->WPCLR.reg = (1 << register_bit_pos);
     52a:	409a      	lsls	r2, r3
     52c:	2384      	movs	r3, #132	; 0x84
     52e:	05db      	lsls	r3, r3, #23
     530:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
     532:	2300      	movs	r3, #0
			break;
     534:	e7d6      	b.n	4e4 <system_peripheral_unlock+0x8>
     536:	46c0      	nop			; (mov r8, r8)
     538:	40000400 	.word	0x40000400

0000053c <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     53c:	b510      	push	{r4, lr}
     53e:	0004      	movs	r4, r0
	 //assert(cbuf);

	 if(cbuf->full)
     540:	7c03      	ldrb	r3, [r0, #16]
     542:	2b00      	cmp	r3, #0
     544:	d005      	beq.n	552 <advance_pointer+0x16>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     546:	6883      	ldr	r3, [r0, #8]
     548:	1c58      	adds	r0, r3, #1
     54a:	68e1      	ldr	r1, [r4, #12]
     54c:	4b07      	ldr	r3, [pc, #28]	; (56c <advance_pointer+0x30>)
     54e:	4798      	blx	r3
     550:	60a1      	str	r1, [r4, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     552:	6863      	ldr	r3, [r4, #4]
     554:	1c58      	adds	r0, r3, #1
     556:	68e1      	ldr	r1, [r4, #12]
     558:	4b04      	ldr	r3, [pc, #16]	; (56c <advance_pointer+0x30>)
     55a:	4798      	blx	r3
     55c:	6061      	str	r1, [r4, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     55e:	68a3      	ldr	r3, [r4, #8]
     560:	1a59      	subs	r1, r3, r1
     562:	424a      	negs	r2, r1
     564:	414a      	adcs	r2, r1
     566:	7422      	strb	r2, [r4, #16]
 }
     568:	bd10      	pop	{r4, pc}
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	00005cf1 	.word	0x00005cf1

00000570 <circular_buf_init>:
 }

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     570:	b570      	push	{r4, r5, r6, lr}
     572:	0005      	movs	r5, r0
     574:	000c      	movs	r4, r1
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     576:	2014      	movs	r0, #20
     578:	4b04      	ldr	r3, [pc, #16]	; (58c <circular_buf_init+0x1c>)
     57a:	4798      	blx	r3
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     57c:	6005      	str	r5, [r0, #0]
	 cbuf->max = size;
     57e:	60c4      	str	r4, [r0, #12]

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
	// assert(cbuf);

	 cbuf->head = 0;
     580:	2300      	movs	r3, #0
     582:	6043      	str	r3, [r0, #4]
	 cbuf->tail = 0;
     584:	6083      	str	r3, [r0, #8]
	 cbuf->full = false;
     586:	7403      	strb	r3, [r0, #16]
 }
     588:	bd70      	pop	{r4, r5, r6, pc}
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	0000618d 	.word	0x0000618d

00000590 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     590:	b510      	push	{r4, lr}
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     592:	6803      	ldr	r3, [r0, #0]
     594:	6842      	ldr	r2, [r0, #4]
     596:	5499      	strb	r1, [r3, r2]

	 advance_pointer(cbuf);
     598:	4b01      	ldr	r3, [pc, #4]	; (5a0 <circular_buf_put+0x10>)
     59a:	4798      	blx	r3
 }
     59c:	bd10      	pop	{r4, pc}
     59e:	46c0      	nop			; (mov r8, r8)
     5a0:	0000053d 	.word	0x0000053d

000005a4 <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     5a4:	7c02      	ldrb	r2, [r0, #16]
     5a6:	2300      	movs	r3, #0
     5a8:	2a00      	cmp	r2, #0
     5aa:	d105      	bne.n	5b8 <circular_buf_empty+0x14>
     5ac:	6843      	ldr	r3, [r0, #4]
     5ae:	6880      	ldr	r0, [r0, #8]
     5b0:	1a1b      	subs	r3, r3, r0
     5b2:	4258      	negs	r0, r3
     5b4:	4143      	adcs	r3, r0
     5b6:	b2db      	uxtb	r3, r3
     5b8:	0018      	movs	r0, r3
 }
     5ba:	4770      	bx	lr

000005bc <circular_buf_get>:
 {
     5bc:	b570      	push	{r4, r5, r6, lr}
     5be:	0004      	movs	r4, r0
     5c0:	000d      	movs	r5, r1
	 if(!circular_buf_empty(cbuf))
     5c2:	4b0a      	ldr	r3, [pc, #40]	; (5ec <circular_buf_get+0x30>)
     5c4:	4798      	blx	r3
     5c6:	2800      	cmp	r0, #0
     5c8:	d10d      	bne.n	5e6 <circular_buf_get+0x2a>
		 *data = cbuf->buffer[cbuf->tail];
     5ca:	6823      	ldr	r3, [r4, #0]
     5cc:	68a2      	ldr	r2, [r4, #8]
     5ce:	5c9b      	ldrb	r3, [r3, r2]
     5d0:	702b      	strb	r3, [r5, #0]
	 cbuf->full = false;
     5d2:	2300      	movs	r3, #0
     5d4:	7423      	strb	r3, [r4, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     5d6:	68a3      	ldr	r3, [r4, #8]
     5d8:	1c58      	adds	r0, r3, #1
     5da:	68e1      	ldr	r1, [r4, #12]
     5dc:	4b04      	ldr	r3, [pc, #16]	; (5f0 <circular_buf_get+0x34>)
     5de:	4798      	blx	r3
     5e0:	60a1      	str	r1, [r4, #8]
		 r = 0;
     5e2:	2000      	movs	r0, #0
 }
     5e4:	bd70      	pop	{r4, r5, r6, pc}
	 int r = -1;
     5e6:	2001      	movs	r0, #1
     5e8:	4240      	negs	r0, r0
	 return r;
     5ea:	e7fb      	b.n	5e4 <circular_buf_get+0x28>
     5ec:	000005a5 	.word	0x000005a5
     5f0:	00005cf1 	.word	0x00005cf1

000005f4 <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
     5f4:	b510      	push	{r4, lr}
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
     5f6:	4b06      	ldr	r3, [pc, #24]	; (610 <usart_write_callback+0x1c>)
     5f8:	6818      	ldr	r0, [r3, #0]
     5fa:	4906      	ldr	r1, [pc, #24]	; (614 <usart_write_callback+0x20>)
     5fc:	4b06      	ldr	r3, [pc, #24]	; (618 <usart_write_callback+0x24>)
     5fe:	4798      	blx	r3
     600:	1c43      	adds	r3, r0, #1
     602:	d004      	beq.n	60e <usart_write_callback+0x1a>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     604:	2201      	movs	r2, #1
     606:	4903      	ldr	r1, [pc, #12]	; (614 <usart_write_callback+0x20>)
     608:	4804      	ldr	r0, [pc, #16]	; (61c <usart_write_callback+0x28>)
     60a:	4b05      	ldr	r3, [pc, #20]	; (620 <usart_write_callback+0x2c>)
     60c:	4798      	blx	r3
	}
	
}
     60e:	bd10      	pop	{r4, pc}
     610:	20000b6c 	.word	0x20000b6c
     614:	20000b68 	.word	0x20000b68
     618:	000005bd 	.word	0x000005bd
     61c:	2000032c 	.word	0x2000032c
     620:	00002b95 	.word	0x00002b95

00000624 <InitializeSerialConsole>:
{
     624:	b530      	push	{r4, r5, lr}
     626:	b091      	sub	sp, #68	; 0x44
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     628:	2580      	movs	r5, #128	; 0x80
     62a:	00ed      	lsls	r5, r5, #3
     62c:	0029      	movs	r1, r5
     62e:	4836      	ldr	r0, [pc, #216]	; (708 <InitializeSerialConsole+0xe4>)
     630:	4c36      	ldr	r4, [pc, #216]	; (70c <InitializeSerialConsole+0xe8>)
     632:	47a0      	blx	r4
     634:	4b36      	ldr	r3, [pc, #216]	; (710 <InitializeSerialConsole+0xec>)
     636:	6018      	str	r0, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, RX_BUFFER_SIZE);
     638:	0029      	movs	r1, r5
     63a:	4836      	ldr	r0, [pc, #216]	; (714 <InitializeSerialConsole+0xf0>)
     63c:	47a0      	blx	r4
     63e:	4b36      	ldr	r3, [pc, #216]	; (718 <InitializeSerialConsole+0xf4>)
     640:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     642:	2380      	movs	r3, #128	; 0x80
     644:	05db      	lsls	r3, r3, #23
     646:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     648:	2300      	movs	r3, #0
     64a:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     64c:	22ff      	movs	r2, #255	; 0xff
     64e:	4669      	mov	r1, sp
     650:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     652:	2200      	movs	r2, #0
     654:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     656:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     658:	2101      	movs	r1, #1
     65a:	2024      	movs	r0, #36	; 0x24
     65c:	466c      	mov	r4, sp
     65e:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
     660:	3001      	adds	r0, #1
     662:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
     664:	3125      	adds	r1, #37	; 0x25
     666:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
     668:	3101      	adds	r1, #1
     66a:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
     66c:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     66e:	3105      	adds	r1, #5
     670:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
     672:	3101      	adds	r1, #1
     674:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     676:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     678:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     67a:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     67c:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     67e:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     680:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
     682:	2313      	movs	r3, #19
     684:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     686:	7762      	strb	r2, [r4, #29]
	config_usart.baudrate    = 115200;
     688:	23e1      	movs	r3, #225	; 0xe1
     68a:	025b      	lsls	r3, r3, #9
     68c:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     68e:	23c4      	movs	r3, #196	; 0xc4
     690:	039b      	lsls	r3, r3, #14
     692:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     694:	2301      	movs	r3, #1
     696:	425b      	negs	r3, r3
     698:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     69a:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     69c:	4b1f      	ldr	r3, [pc, #124]	; (71c <InitializeSerialConsole+0xf8>)
     69e:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     6a0:	4b1f      	ldr	r3, [pc, #124]	; (720 <InitializeSerialConsole+0xfc>)
     6a2:	930f      	str	r3, [sp, #60]	; 0x3c
	while (usart_init(&usart_instance,
     6a4:	4d1f      	ldr	r5, [pc, #124]	; (724 <InitializeSerialConsole+0x100>)
     6a6:	4c20      	ldr	r4, [pc, #128]	; (728 <InitializeSerialConsole+0x104>)
     6a8:	466a      	mov	r2, sp
     6aa:	4920      	ldr	r1, [pc, #128]	; (72c <InitializeSerialConsole+0x108>)
     6ac:	0028      	movs	r0, r5
     6ae:	47a0      	blx	r4
     6b0:	2800      	cmp	r0, #0
     6b2:	d1f9      	bne.n	6a8 <InitializeSerialConsole+0x84>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     6b4:	4d1b      	ldr	r5, [pc, #108]	; (724 <InitializeSerialConsole+0x100>)
     6b6:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     6b8:	0020      	movs	r0, r4
     6ba:	4b1d      	ldr	r3, [pc, #116]	; (730 <InitializeSerialConsole+0x10c>)
     6bc:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6be:	231f      	movs	r3, #31
     6c0:	4018      	ands	r0, r3
     6c2:	3b1e      	subs	r3, #30
     6c4:	4083      	lsls	r3, r0
     6c6:	4a1b      	ldr	r2, [pc, #108]	; (734 <InitializeSerialConsole+0x110>)
     6c8:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     6ca:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     6cc:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     6ce:	2b00      	cmp	r3, #0
     6d0:	d1fc      	bne.n	6cc <InitializeSerialConsole+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     6d2:	6823      	ldr	r3, [r4, #0]
     6d4:	2202      	movs	r2, #2
     6d6:	4313      	orrs	r3, r2
     6d8:	6023      	str	r3, [r4, #0]
	usart_register_callback(&usart_instance,
     6da:	4c12      	ldr	r4, [pc, #72]	; (724 <InitializeSerialConsole+0x100>)
     6dc:	2200      	movs	r2, #0
     6de:	4916      	ldr	r1, [pc, #88]	; (738 <InitializeSerialConsole+0x114>)
     6e0:	0020      	movs	r0, r4
     6e2:	4d16      	ldr	r5, [pc, #88]	; (73c <InitializeSerialConsole+0x118>)
     6e4:	47a8      	blx	r5
	usart_register_callback(&usart_instance,
     6e6:	2201      	movs	r2, #1
     6e8:	4915      	ldr	r1, [pc, #84]	; (740 <InitializeSerialConsole+0x11c>)
     6ea:	0020      	movs	r0, r4
     6ec:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     6ee:	2231      	movs	r2, #49	; 0x31
     6f0:	5ca3      	ldrb	r3, [r4, r2]
     6f2:	2103      	movs	r1, #3
     6f4:	430b      	orrs	r3, r1
     6f6:	54a3      	strb	r3, [r4, r2]
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     6f8:	3a30      	subs	r2, #48	; 0x30
     6fa:	4912      	ldr	r1, [pc, #72]	; (744 <InitializeSerialConsole+0x120>)
     6fc:	0020      	movs	r0, r4
     6fe:	4b12      	ldr	r3, [pc, #72]	; (748 <InitializeSerialConsole+0x124>)
     700:	4798      	blx	r3
}
     702:	b011      	add	sp, #68	; 0x44
     704:	bd30      	pop	{r4, r5, pc}
     706:	46c0      	nop			; (mov r8, r8)
     708:	20000768 	.word	0x20000768
     70c:	00000571 	.word	0x00000571
     710:	20000360 	.word	0x20000360
     714:	20000368 	.word	0x20000368
     718:	20000b6c 	.word	0x20000b6c
     71c:	002a0003 	.word	0x002a0003
     720:	002b0003 	.word	0x002b0003
     724:	2000032c 	.word	0x2000032c
     728:	000027ad 	.word	0x000027ad
     72c:	42001800 	.word	0x42001800
     730:	00001fdd 	.word	0x00001fdd
     734:	e000e100 	.word	0xe000e100
     738:	000005f5 	.word	0x000005f5
     73c:	00002b7d 	.word	0x00002b7d
     740:	000007f9 	.word	0x000007f9
     744:	20000364 	.word	0x20000364
     748:	00002bb5 	.word	0x00002bb5

0000074c <DeinitializeSerialConsole>:
{
     74c:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     74e:	4d0a      	ldr	r5, [pc, #40]	; (778 <DeinitializeSerialConsole+0x2c>)
     750:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     752:	0020      	movs	r0, r4
     754:	4b09      	ldr	r3, [pc, #36]	; (77c <DeinitializeSerialConsole+0x30>)
     756:	4798      	blx	r3
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     758:	231f      	movs	r3, #31
     75a:	4018      	ands	r0, r3
     75c:	3b1e      	subs	r3, #30
     75e:	4083      	lsls	r3, r0
     760:	2280      	movs	r2, #128	; 0x80
     762:	4907      	ldr	r1, [pc, #28]	; (780 <DeinitializeSerialConsole+0x34>)
     764:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
     766:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     768:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     76a:	2b00      	cmp	r3, #0
     76c:	d1fc      	bne.n	768 <DeinitializeSerialConsole+0x1c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     76e:	6823      	ldr	r3, [r4, #0]
     770:	2202      	movs	r2, #2
     772:	4393      	bics	r3, r2
     774:	6023      	str	r3, [r4, #0]
}
     776:	bd70      	pop	{r4, r5, r6, pc}
     778:	2000032c 	.word	0x2000032c
     77c:	00001fdd 	.word	0x00001fdd
     780:	e000e100 	.word	0xe000e100

00000784 <SerialConsoleWriteString>:
{
     784:	b5f0      	push	{r4, r5, r6, r7, lr}
     786:	46c6      	mov	lr, r8
     788:	b500      	push	{lr}
     78a:	0005      	movs	r5, r0
     78c:	2400      	movs	r4, #0
	if(string != NULL)
     78e:	2800      	cmp	r0, #0
     790:	d012      	beq.n	7b8 <SerialConsoleWriteString+0x34>
		for (size_t iter = 0; iter < strlen(string); iter++)
     792:	4e11      	ldr	r6, [pc, #68]	; (7d8 <SerialConsoleWriteString+0x54>)
			circular_buf_put(cbufTx, string[iter]);
     794:	4f11      	ldr	r7, [pc, #68]	; (7dc <SerialConsoleWriteString+0x58>)
     796:	4b12      	ldr	r3, [pc, #72]	; (7e0 <SerialConsoleWriteString+0x5c>)
     798:	4698      	mov	r8, r3
     79a:	e003      	b.n	7a4 <SerialConsoleWriteString+0x20>
     79c:	5d29      	ldrb	r1, [r5, r4]
     79e:	6838      	ldr	r0, [r7, #0]
     7a0:	47c0      	blx	r8
		for (size_t iter = 0; iter < strlen(string); iter++)
     7a2:	3401      	adds	r4, #1
     7a4:	0028      	movs	r0, r5
     7a6:	47b0      	blx	r6
     7a8:	4284      	cmp	r4, r0
     7aa:	d3f7      	bcc.n	79c <SerialConsoleWriteString+0x18>
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     7ac:	2101      	movs	r1, #1
     7ae:	480d      	ldr	r0, [pc, #52]	; (7e4 <SerialConsoleWriteString+0x60>)
     7b0:	4b0d      	ldr	r3, [pc, #52]	; (7e8 <SerialConsoleWriteString+0x64>)
     7b2:	4798      	blx	r3
     7b4:	2800      	cmp	r0, #0
     7b6:	d002      	beq.n	7be <SerialConsoleWriteString+0x3a>
}
     7b8:	bc04      	pop	{r2}
     7ba:	4690      	mov	r8, r2
     7bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
     7be:	4c0b      	ldr	r4, [pc, #44]	; (7ec <SerialConsoleWriteString+0x68>)
     7c0:	4b06      	ldr	r3, [pc, #24]	; (7dc <SerialConsoleWriteString+0x58>)
     7c2:	6818      	ldr	r0, [r3, #0]
     7c4:	0021      	movs	r1, r4
     7c6:	4b0a      	ldr	r3, [pc, #40]	; (7f0 <SerialConsoleWriteString+0x6c>)
     7c8:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     7ca:	2201      	movs	r2, #1
     7cc:	0021      	movs	r1, r4
     7ce:	4805      	ldr	r0, [pc, #20]	; (7e4 <SerialConsoleWriteString+0x60>)
     7d0:	4b08      	ldr	r3, [pc, #32]	; (7f4 <SerialConsoleWriteString+0x70>)
     7d2:	4798      	blx	r3
}
     7d4:	e7f0      	b.n	7b8 <SerialConsoleWriteString+0x34>
     7d6:	46c0      	nop			; (mov r8, r8)
     7d8:	00006369 	.word	0x00006369
     7dc:	20000b6c 	.word	0x20000b6c
     7e0:	00000591 	.word	0x00000591
     7e4:	2000032c 	.word	0x2000032c
     7e8:	00002bd5 	.word	0x00002bd5
     7ec:	20000b68 	.word	0x20000b68
     7f0:	000005bd 	.word	0x000005bd
     7f4:	00002b95 	.word	0x00002b95

000007f8 <usart_read_callback>:
{
     7f8:	b510      	push	{r4, lr}
     7fa:	b082      	sub	sp, #8
	SerialConsoleWriteString(&latestRx);
     7fc:	4c0d      	ldr	r4, [pc, #52]	; (834 <usart_read_callback+0x3c>)
     7fe:	0020      	movs	r0, r4
     800:	4b0d      	ldr	r3, [pc, #52]	; (838 <usart_read_callback+0x40>)
     802:	4798      	blx	r3
	if(latestRx == 0x08)
     804:	7823      	ldrb	r3, [r4, #0]
     806:	2b08      	cmp	r3, #8
     808:	d00c      	beq.n	824 <usart_read_callback+0x2c>
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
     80a:	4c0a      	ldr	r4, [pc, #40]	; (834 <usart_read_callback+0x3c>)
     80c:	7821      	ldrb	r1, [r4, #0]
     80e:	4b0b      	ldr	r3, [pc, #44]	; (83c <usart_read_callback+0x44>)
     810:	6818      	ldr	r0, [r3, #0]
     812:	4b0b      	ldr	r3, [pc, #44]	; (840 <usart_read_callback+0x48>)
     814:	4798      	blx	r3
	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
     816:	2201      	movs	r2, #1
     818:	0021      	movs	r1, r4
     81a:	480a      	ldr	r0, [pc, #40]	; (844 <usart_read_callback+0x4c>)
     81c:	4b0a      	ldr	r3, [pc, #40]	; (848 <usart_read_callback+0x50>)
     81e:	4798      	blx	r3
}
     820:	b002      	add	sp, #8
     822:	bd10      	pop	{r4, pc}
	a[0] = 0x20;
     824:	a801      	add	r0, sp, #4
     826:	3318      	adds	r3, #24
     828:	7003      	strb	r3, [r0, #0]
	a[1]= 0x08;
     82a:	3b18      	subs	r3, #24
     82c:	7043      	strb	r3, [r0, #1]
	SerialConsoleWriteString(&a);
     82e:	4b02      	ldr	r3, [pc, #8]	; (838 <usart_read_callback+0x40>)
     830:	4798      	blx	r3
     832:	e7ea      	b.n	80a <usart_read_callback+0x12>
     834:	20000364 	.word	0x20000364
     838:	00000785 	.word	0x00000785
     83c:	20000360 	.word	0x20000360
     840:	00000591 	.word	0x00000591
     844:	2000032c 	.word	0x2000032c
     848:	00002bb5 	.word	0x00002bb5

0000084c <LogMessage>:
{
     84c:	b40e      	push	{r1, r2, r3}
};
     84e:	b003      	add	sp, #12
     850:	4770      	bx	lr
	...

00000854 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     854:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     856:	4b06      	ldr	r3, [pc, #24]	; (870 <sd_mmc_configure_slot+0x1c>)
     858:	6819      	ldr	r1, [r3, #0]
     85a:	7f8b      	ldrb	r3, [r1, #30]
     85c:	1e5a      	subs	r2, r3, #1
     85e:	4193      	sbcs	r3, r2
     860:	b2db      	uxtb	r3, r3
     862:	7b4a      	ldrb	r2, [r1, #13]
     864:	6809      	ldr	r1, [r1, #0]
     866:	4803      	ldr	r0, [pc, #12]	; (874 <sd_mmc_configure_slot+0x20>)
     868:	7800      	ldrb	r0, [r0, #0]
     86a:	4c03      	ldr	r4, [pc, #12]	; (878 <sd_mmc_configure_slot+0x24>)
     86c:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
     86e:	bd10      	pop	{r4, pc}
     870:	20000228 	.word	0x20000228
     874:	20000250 	.word	0x20000250
     878:	00001511 	.word	0x00001511

0000087c <sd_mmc_select_slot>:
{
     87c:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     87e:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     880:	2800      	cmp	r0, #0
     882:	d001      	beq.n	888 <sd_mmc_select_slot+0xc>
}
     884:	0018      	movs	r0, r3
     886:	bd10      	pop	{r4, pc}
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     888:	4b0e      	ldr	r3, [pc, #56]	; (8c4 <sd_mmc_select_slot+0x48>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     88a:	7a9b      	ldrb	r3, [r3, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     88c:	3b03      	subs	r3, #3
     88e:	2b01      	cmp	r3, #1
     890:	d90d      	bls.n	8ae <sd_mmc_select_slot+0x32>
	sd_mmc_slot_sel = slot;
     892:	2200      	movs	r2, #0
     894:	4b0c      	ldr	r3, [pc, #48]	; (8c8 <sd_mmc_select_slot+0x4c>)
     896:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     898:	4c0a      	ldr	r4, [pc, #40]	; (8c4 <sd_mmc_select_slot+0x48>)
     89a:	4b0c      	ldr	r3, [pc, #48]	; (8cc <sd_mmc_select_slot+0x50>)
     89c:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     89e:	4b0c      	ldr	r3, [pc, #48]	; (8d0 <sd_mmc_select_slot+0x54>)
     8a0:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     8a2:	7aa3      	ldrb	r3, [r4, #10]
     8a4:	3b02      	subs	r3, #2
     8a6:	4258      	negs	r0, r3
     8a8:	4143      	adcs	r3, r0
     8aa:	b2db      	uxtb	r3, r3
     8ac:	e7ea      	b.n	884 <sd_mmc_select_slot+0x8>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     8ae:	4b05      	ldr	r3, [pc, #20]	; (8c4 <sd_mmc_select_slot+0x48>)
     8b0:	2202      	movs	r2, #2
     8b2:	729a      	strb	r2, [r3, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     8b4:	4a07      	ldr	r2, [pc, #28]	; (8d4 <sd_mmc_select_slot+0x58>)
     8b6:	601a      	str	r2, [r3, #0]
		sd_mmc_cards[slot].bus_width = 1;
     8b8:	2201      	movs	r2, #1
     8ba:	735a      	strb	r2, [r3, #13]
		sd_mmc_cards[slot].high_speed = 0;
     8bc:	2200      	movs	r2, #0
     8be:	779a      	strb	r2, [r3, #30]
     8c0:	e7e7      	b.n	892 <sd_mmc_select_slot+0x16>
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	2000022c 	.word	0x2000022c
     8c8:	20000250 	.word	0x20000250
     8cc:	20000228 	.word	0x20000228
     8d0:	00000855 	.word	0x00000855
     8d4:	00061a80 	.word	0x00061a80

000008d8 <sd_mmc_cmd13>:
{
     8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8da:	4d09      	ldr	r5, [pc, #36]	; (900 <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     8dc:	4f09      	ldr	r7, [pc, #36]	; (904 <sd_mmc_cmd13+0x2c>)
			if (!(driver_get_response() & 0xFF)) {
     8de:	4e0a      	ldr	r6, [pc, #40]	; (908 <sd_mmc_cmd13+0x30>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     8e0:	2100      	movs	r1, #0
     8e2:	480a      	ldr	r0, [pc, #40]	; (90c <sd_mmc_cmd13+0x34>)
     8e4:	47b8      	blx	r7
     8e6:	1e04      	subs	r4, r0, #0
     8e8:	d007      	beq.n	8fa <sd_mmc_cmd13+0x22>
			if (!(driver_get_response() & 0xFF)) {
     8ea:	47b0      	blx	r6
     8ec:	23ff      	movs	r3, #255	; 0xff
     8ee:	4203      	tst	r3, r0
     8f0:	d003      	beq.n	8fa <sd_mmc_cmd13+0x22>
     8f2:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     8f4:	2d00      	cmp	r5, #0
     8f6:	d1f3      	bne.n	8e0 <sd_mmc_cmd13+0x8>
			return false;
     8f8:	2400      	movs	r4, #0
}
     8fa:	0020      	movs	r0, r4
     8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	00030d41 	.word	0x00030d41
     904:	00001755 	.word	0x00001755
     908:	0000176d 	.word	0x0000176d
     90c:	00001b0d 	.word	0x00001b0d

00000910 <sd_mmc_cmd9_spi>:
{
     910:	b510      	push	{r4, lr}
     912:	b082      	sub	sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     914:	4b0c      	ldr	r3, [pc, #48]	; (948 <sd_mmc_cmd9_spi+0x38>)
     916:	681b      	ldr	r3, [r3, #0]
     918:	8919      	ldrh	r1, [r3, #8]
     91a:	0409      	lsls	r1, r1, #16
     91c:	2301      	movs	r3, #1
     91e:	9300      	str	r3, [sp, #0]
     920:	2210      	movs	r2, #16
     922:	480a      	ldr	r0, [pc, #40]	; (94c <sd_mmc_cmd9_spi+0x3c>)
     924:	4c0a      	ldr	r4, [pc, #40]	; (950 <sd_mmc_cmd9_spi+0x40>)
     926:	47a0      	blx	r4
     928:	2800      	cmp	r0, #0
     92a:	d101      	bne.n	930 <sd_mmc_cmd9_spi+0x20>
}
     92c:	b002      	add	sp, #8
     92e:	bd10      	pop	{r4, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     930:	4b05      	ldr	r3, [pc, #20]	; (948 <sd_mmc_cmd9_spi+0x38>)
     932:	6818      	ldr	r0, [r3, #0]
     934:	300e      	adds	r0, #14
     936:	2101      	movs	r1, #1
     938:	4b06      	ldr	r3, [pc, #24]	; (954 <sd_mmc_cmd9_spi+0x44>)
     93a:	4798      	blx	r3
     93c:	2800      	cmp	r0, #0
     93e:	d0f5      	beq.n	92c <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     940:	4b05      	ldr	r3, [pc, #20]	; (958 <sd_mmc_cmd9_spi+0x48>)
     942:	4798      	blx	r3
     944:	e7f2      	b.n	92c <sd_mmc_cmd9_spi+0x1c>
     946:	46c0      	nop			; (mov r8, r8)
     948:	20000228 	.word	0x20000228
     94c:	00081109 	.word	0x00081109
     950:	000015c5 	.word	0x000015c5
     954:	000017f1 	.word	0x000017f1
     958:	0000187d 	.word	0x0000187d

0000095c <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     95c:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     95e:	4b04      	ldr	r3, [pc, #16]	; (970 <sd_mmc_deselect_slot+0x14>)
     960:	781b      	ldrb	r3, [r3, #0]
     962:	2b00      	cmp	r3, #0
     964:	d000      	beq.n	968 <sd_mmc_deselect_slot+0xc>
		driver_deselect_device(sd_mmc_slot_sel);
	}
}
     966:	bd10      	pop	{r4, pc}
		driver_deselect_device(sd_mmc_slot_sel);
     968:	2000      	movs	r0, #0
     96a:	4b02      	ldr	r3, [pc, #8]	; (974 <sd_mmc_deselect_slot+0x18>)
     96c:	4798      	blx	r3
}
     96e:	e7fa      	b.n	966 <sd_mmc_deselect_slot+0xa>
     970:	20000250 	.word	0x20000250
     974:	00001565 	.word	0x00001565

00000978 <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
     978:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     97a:	2204      	movs	r2, #4
     97c:	4b03      	ldr	r3, [pc, #12]	; (98c <sd_mmc_init+0x14>)
     97e:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     980:	32fb      	adds	r2, #251	; 0xfb
     982:	4b03      	ldr	r3, [pc, #12]	; (990 <sd_mmc_init+0x18>)
     984:	701a      	strb	r2, [r3, #0]
	driver_init();
     986:	4b03      	ldr	r3, [pc, #12]	; (994 <sd_mmc_init+0x1c>)
     988:	4798      	blx	r3
}
     98a:	bd10      	pop	{r4, pc}
     98c:	2000022c 	.word	0x2000022c
     990:	20000250 	.word	0x20000250
     994:	00001411 	.word	0x00001411

00000998 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     998:	b5f0      	push	{r4, r5, r6, r7, lr}
     99a:	46c6      	mov	lr, r8
     99c:	b500      	push	{lr}
     99e:	b088      	sub	sp, #32
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     9a0:	4bcb      	ldr	r3, [pc, #812]	; (cd0 <sd_mmc_check+0x338>)
     9a2:	4798      	blx	r3
     9a4:	0004      	movs	r4, r0
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     9a6:	2801      	cmp	r0, #1
     9a8:	d006      	beq.n	9b8 <sd_mmc_check+0x20>
		sd_mmc_deselect_slot();
     9aa:	4bca      	ldr	r3, [pc, #808]	; (cd4 <sd_mmc_check+0x33c>)
     9ac:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     9ae:	0020      	movs	r0, r4
     9b0:	b008      	add	sp, #32
     9b2:	bc04      	pop	{r2}
     9b4:	4690      	mov	r8, r2
     9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     9b8:	4bc7      	ldr	r3, [pc, #796]	; (cd8 <sd_mmc_check+0x340>)
     9ba:	681b      	ldr	r3, [r3, #0]
     9bc:	2201      	movs	r2, #1
     9be:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     9c0:	2200      	movs	r2, #0
     9c2:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
     9c4:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
     9c6:	4bc5      	ldr	r3, [pc, #788]	; (cdc <sd_mmc_check+0x344>)
     9c8:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     9ca:	2100      	movs	r1, #0
     9cc:	2088      	movs	r0, #136	; 0x88
     9ce:	0140      	lsls	r0, r0, #5
     9d0:	4bc3      	ldr	r3, [pc, #780]	; (ce0 <sd_mmc_check+0x348>)
     9d2:	4798      	blx	r3
     9d4:	2800      	cmp	r0, #0
     9d6:	d107      	bne.n	9e8 <sd_mmc_check+0x50>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     9d8:	4bbf      	ldr	r3, [pc, #764]	; (cd8 <sd_mmc_check+0x340>)
     9da:	681b      	ldr	r3, [r3, #0]
     9dc:	2203      	movs	r2, #3
     9de:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
     9e0:	4bbc      	ldr	r3, [pc, #752]	; (cd4 <sd_mmc_check+0x33c>)
     9e2:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     9e4:	2403      	movs	r4, #3
     9e6:	e7e2      	b.n	9ae <sd_mmc_check+0x16>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     9e8:	21d5      	movs	r1, #213	; 0xd5
     9ea:	0049      	lsls	r1, r1, #1
     9ec:	48bd      	ldr	r0, [pc, #756]	; (ce4 <sd_mmc_check+0x34c>)
     9ee:	4bbc      	ldr	r3, [pc, #752]	; (ce0 <sd_mmc_check+0x348>)
     9f0:	4798      	blx	r3
	*v2 = 0;
     9f2:	2600      	movs	r6, #0
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     9f4:	2800      	cmp	r0, #0
     9f6:	d125      	bne.n	a44 <sd_mmc_check+0xac>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     9f8:	4bb7      	ldr	r3, [pc, #732]	; (cd8 <sd_mmc_check+0x340>)
     9fa:	681b      	ldr	r3, [r3, #0]
     9fc:	7adb      	ldrb	r3, [r3, #11]
     9fe:	07db      	lsls	r3, r3, #31
     a00:	d500      	bpl.n	a04 <sd_mmc_check+0x6c>
     a02:	e1eb      	b.n	ddc <sd_mmc_check+0x444>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     a04:	4bb4      	ldr	r3, [pc, #720]	; (cd8 <sd_mmc_check+0x340>)
     a06:	681b      	ldr	r3, [r3, #0]
     a08:	7ada      	ldrb	r2, [r3, #11]
     a0a:	2309      	movs	r3, #9
     a0c:	4013      	ands	r3, r2
     a0e:	2b01      	cmp	r3, #1
     a10:	d10f      	bne.n	a32 <sd_mmc_check+0x9a>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     a12:	2180      	movs	r1, #128	; 0x80
     a14:	0089      	lsls	r1, r1, #2
     a16:	48b4      	ldr	r0, [pc, #720]	; (ce8 <sd_mmc_check+0x350>)
     a18:	4bb1      	ldr	r3, [pc, #708]	; (ce0 <sd_mmc_check+0x348>)
     a1a:	4798      	blx	r3
     a1c:	2800      	cmp	r0, #0
     a1e:	d0db      	beq.n	9d8 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     a20:	4bad      	ldr	r3, [pc, #692]	; (cd8 <sd_mmc_check+0x340>)
     a22:	681b      	ldr	r3, [r3, #0]
     a24:	7adb      	ldrb	r3, [r3, #11]
     a26:	07db      	lsls	r3, r3, #31
     a28:	d503      	bpl.n	a32 <sd_mmc_check+0x9a>
		if (!sd_mmc_cmd13()) {
     a2a:	4bb0      	ldr	r3, [pc, #704]	; (cec <sd_mmc_check+0x354>)
     a2c:	4798      	blx	r3
     a2e:	2800      	cmp	r0, #0
     a30:	d0d2      	beq.n	9d8 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     a32:	4baf      	ldr	r3, [pc, #700]	; (cf0 <sd_mmc_check+0x358>)
     a34:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     a36:	4ba8      	ldr	r3, [pc, #672]	; (cd8 <sd_mmc_check+0x340>)
     a38:	681b      	ldr	r3, [r3, #0]
     a3a:	2200      	movs	r2, #0
     a3c:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
     a3e:	4ba5      	ldr	r3, [pc, #660]	; (cd4 <sd_mmc_check+0x33c>)
     a40:	4798      	blx	r3
		return SD_MMC_INIT_ONGOING;
     a42:	e7b4      	b.n	9ae <sd_mmc_check+0x16>
	resp = driver_get_response();
     a44:	4bab      	ldr	r3, [pc, #684]	; (cf4 <sd_mmc_check+0x35c>)
     a46:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     a48:	1c43      	adds	r3, r0, #1
     a4a:	d100      	bne.n	a4e <sd_mmc_check+0xb6>
     a4c:	e1c4      	b.n	dd8 <sd_mmc_check+0x440>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     a4e:	0500      	lsls	r0, r0, #20
     a50:	0d00      	lsrs	r0, r0, #20
     a52:	23d5      	movs	r3, #213	; 0xd5
     a54:	005b      	lsls	r3, r3, #1
	*v2 = 1;
     a56:	3601      	adds	r6, #1
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     a58:	4298      	cmp	r0, r3
     a5a:	d1bd      	bne.n	9d8 <sd_mmc_check+0x40>
     a5c:	e7cc      	b.n	9f8 <sd_mmc_check+0x60>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     a5e:	2100      	movs	r1, #0
     a60:	48a5      	ldr	r0, [pc, #660]	; (cf8 <sd_mmc_check+0x360>)
     a62:	4b9f      	ldr	r3, [pc, #636]	; (ce0 <sd_mmc_check+0x348>)
     a64:	4798      	blx	r3
     a66:	2800      	cmp	r0, #0
     a68:	d119      	bne.n	a9e <sd_mmc_check+0x106>
			sd_mmc_card->type = CARD_TYPE_MMC;
     a6a:	4b9b      	ldr	r3, [pc, #620]	; (cd8 <sd_mmc_check+0x340>)
     a6c:	681b      	ldr	r3, [r3, #0]
     a6e:	2202      	movs	r2, #2
     a70:	72da      	strb	r2, [r3, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     a72:	2100      	movs	r1, #0
     a74:	2088      	movs	r0, #136	; 0x88
     a76:	0140      	lsls	r0, r0, #5
     a78:	4b99      	ldr	r3, [pc, #612]	; (ce0 <sd_mmc_check+0x348>)
     a7a:	4798      	blx	r3
     a7c:	2800      	cmp	r0, #0
     a7e:	d0ab      	beq.n	9d8 <sd_mmc_check+0x40>
     a80:	4d9e      	ldr	r5, [pc, #632]	; (cfc <sd_mmc_check+0x364>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     a82:	4f97      	ldr	r7, [pc, #604]	; (ce0 <sd_mmc_check+0x348>)
		resp = driver_get_response();
     a84:	4e9b      	ldr	r6, [pc, #620]	; (cf4 <sd_mmc_check+0x35c>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     a86:	2100      	movs	r1, #0
     a88:	489d      	ldr	r0, [pc, #628]	; (d00 <sd_mmc_check+0x368>)
     a8a:	47b8      	blx	r7
     a8c:	2800      	cmp	r0, #0
     a8e:	d0a3      	beq.n	9d8 <sd_mmc_check+0x40>
		resp = driver_get_response();
     a90:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     a92:	07c3      	lsls	r3, r0, #31
     a94:	d57d      	bpl.n	b92 <sd_mmc_check+0x1fa>
     a96:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     a98:	2d00      	cmp	r5, #0
     a9a:	d1f4      	bne.n	a86 <sd_mmc_check+0xee>
     a9c:	e79c      	b.n	9d8 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_CCS) != 0) {
     a9e:	4b95      	ldr	r3, [pc, #596]	; (cf4 <sd_mmc_check+0x35c>)
     aa0:	4798      	blx	r3
     aa2:	0043      	lsls	r3, r0, #1
     aa4:	d505      	bpl.n	ab2 <sd_mmc_check+0x11a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     aa6:	4b8c      	ldr	r3, [pc, #560]	; (cd8 <sd_mmc_check+0x340>)
     aa8:	681a      	ldr	r2, [r3, #0]
     aaa:	7ad3      	ldrb	r3, [r2, #11]
     aac:	2108      	movs	r1, #8
     aae:	430b      	orrs	r3, r1
     ab0:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     ab2:	2100      	movs	r1, #0
     ab4:	4893      	ldr	r0, [pc, #588]	; (d04 <sd_mmc_check+0x36c>)
     ab6:	4b8a      	ldr	r3, [pc, #552]	; (ce0 <sd_mmc_check+0x348>)
     ab8:	4798      	blx	r3
     aba:	2800      	cmp	r0, #0
     abc:	d08c      	beq.n	9d8 <sd_mmc_check+0x40>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     abe:	4b86      	ldr	r3, [pc, #536]	; (cd8 <sd_mmc_check+0x340>)
     ac0:	681b      	ldr	r3, [r3, #0]
     ac2:	7adb      	ldrb	r3, [r3, #11]
     ac4:	07da      	lsls	r2, r3, #31
     ac6:	d400      	bmi.n	aca <sd_mmc_check+0x132>
     ac8:	e1a4      	b.n	e14 <sd_mmc_check+0x47c>
		if (!sd_mmc_cmd9_spi()) {
     aca:	4b8f      	ldr	r3, [pc, #572]	; (d08 <sd_mmc_check+0x370>)
     acc:	4798      	blx	r3
     ace:	2800      	cmp	r0, #0
     ad0:	d082      	beq.n	9d8 <sd_mmc_check+0x40>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     ad2:	4b81      	ldr	r3, [pc, #516]	; (cd8 <sd_mmc_check+0x340>)
     ad4:	681a      	ldr	r2, [r3, #0]
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     ad6:	7c53      	ldrb	r3, [r2, #17]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     ad8:	2107      	movs	r1, #7
     ada:	4019      	ands	r1, r3
     adc:	0089      	lsls	r1, r1, #2
	sd_mmc_card->clock = unit * mul * 1000;
     ade:	488b      	ldr	r0, [pc, #556]	; (d0c <sd_mmc_check+0x374>)
     ae0:	5808      	ldr	r0, [r1, r0]
     ae2:	21fa      	movs	r1, #250	; 0xfa
     ae4:	0089      	lsls	r1, r1, #2
     ae6:	4341      	muls	r1, r0
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     ae8:	065b      	lsls	r3, r3, #25
     aea:	0f1b      	lsrs	r3, r3, #28
     aec:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     aee:	4888      	ldr	r0, [pc, #544]	; (d10 <sd_mmc_check+0x378>)
     af0:	581b      	ldr	r3, [r3, r0]
     af2:	434b      	muls	r3, r1
     af4:	6013      	str	r3, [r2, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     af6:	7b93      	ldrb	r3, [r2, #14]
     af8:	099b      	lsrs	r3, r3, #6
     afa:	d000      	beq.n	afe <sd_mmc_check+0x166>
     afc:	e13c      	b.n	d78 <sd_mmc_check+0x3e0>
     afe:	7d91      	ldrb	r1, [r2, #22]
     b00:	1189      	asrs	r1, r1, #6
	if (((pos % 8) + size) > 8) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     b02:	7d53      	ldrb	r3, [r2, #21]
     b04:	009b      	lsls	r3, r3, #2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     b06:	7d10      	ldrb	r0, [r2, #20]
     b08:	0280      	lsls	r0, r0, #10
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     b0a:	4303      	orrs	r3, r0
     b0c:	430b      	orrs	r3, r1
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b0e:	7e10      	ldrb	r0, [r2, #24]
     b10:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     b12:	7dd1      	ldrb	r1, [r2, #23]
     b14:	0049      	lsls	r1, r1, #1
     b16:	4308      	orrs	r0, r1
	}
	value &=  ((uint32_t)1 << size) - 1;
     b18:	051b      	lsls	r3, r3, #20
     b1a:	0d1b      	lsrs	r3, r3, #20
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     b1c:	3301      	adds	r3, #1
     b1e:	2107      	movs	r1, #7
     b20:	4001      	ands	r1, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     b22:	3102      	adds	r1, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     b24:	408b      	lsls	r3, r1
     b26:	7cd0      	ldrb	r0, [r2, #19]
     b28:	210f      	movs	r1, #15
     b2a:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     b2c:	408b      	lsls	r3, r1
				/ 1024;
     b2e:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     b30:	6053      	str	r3, [r2, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     b32:	8911      	ldrh	r1, [r2, #8]
     b34:	0409      	lsls	r1, r1, #16
     b36:	4877      	ldr	r0, [pc, #476]	; (d14 <sd_mmc_check+0x37c>)
     b38:	4b69      	ldr	r3, [pc, #420]	; (ce0 <sd_mmc_check+0x348>)
     b3a:	4798      	blx	r3
     b3c:	2800      	cmp	r0, #0
     b3e:	d100      	bne.n	b42 <sd_mmc_check+0x1aa>
     b40:	e74a      	b.n	9d8 <sd_mmc_check+0x40>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     b42:	2301      	movs	r3, #1
     b44:	9300      	str	r3, [sp, #0]
     b46:	2208      	movs	r2, #8
     b48:	2100      	movs	r1, #0
     b4a:	4873      	ldr	r0, [pc, #460]	; (d18 <sd_mmc_check+0x380>)
     b4c:	4d73      	ldr	r5, [pc, #460]	; (d1c <sd_mmc_check+0x384>)
     b4e:	47a8      	blx	r5
     b50:	2800      	cmp	r0, #0
     b52:	d100      	bne.n	b56 <sd_mmc_check+0x1be>
     b54:	e740      	b.n	9d8 <sd_mmc_check+0x40>
	if (!driver_start_read_blocks(scr, 1)) {
     b56:	2101      	movs	r1, #1
     b58:	a806      	add	r0, sp, #24
     b5a:	4b71      	ldr	r3, [pc, #452]	; (d20 <sd_mmc_check+0x388>)
     b5c:	4798      	blx	r3
     b5e:	2800      	cmp	r0, #0
     b60:	d100      	bne.n	b64 <sd_mmc_check+0x1cc>
     b62:	e739      	b.n	9d8 <sd_mmc_check+0x40>
	if (!driver_wait_end_of_read_blocks()) {
     b64:	4b6f      	ldr	r3, [pc, #444]	; (d24 <sd_mmc_check+0x38c>)
     b66:	4798      	blx	r3
     b68:	2800      	cmp	r0, #0
     b6a:	d100      	bne.n	b6e <sd_mmc_check+0x1d6>
     b6c:	e734      	b.n	9d8 <sd_mmc_check+0x40>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     b6e:	ab06      	add	r3, sp, #24
	switch (SD_SCR_SD_SPEC(scr)) {
     b70:	781b      	ldrb	r3, [r3, #0]
     b72:	220f      	movs	r2, #15
     b74:	4013      	ands	r3, r2
     b76:	2b01      	cmp	r3, #1
     b78:	d100      	bne.n	b7c <sd_mmc_check+0x1e4>
     b7a:	e119      	b.n	db0 <sd_mmc_check+0x418>
     b7c:	2b00      	cmp	r3, #0
     b7e:	d100      	bne.n	b82 <sd_mmc_check+0x1ea>
     b80:	e109      	b.n	d96 <sd_mmc_check+0x3fe>
     b82:	2b02      	cmp	r3, #2
     b84:	d100      	bne.n	b88 <sd_mmc_check+0x1f0>
     b86:	e118      	b.n	dba <sd_mmc_check+0x422>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     b88:	4b53      	ldr	r3, [pc, #332]	; (cd8 <sd_mmc_check+0x340>)
     b8a:	681b      	ldr	r3, [r3, #0]
     b8c:	2210      	movs	r2, #16
     b8e:	731a      	strb	r2, [r3, #12]
     b90:	e105      	b.n	d9e <sd_mmc_check+0x406>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     b92:	2100      	movs	r1, #0
     b94:	4858      	ldr	r0, [pc, #352]	; (cf8 <sd_mmc_check+0x360>)
     b96:	4b52      	ldr	r3, [pc, #328]	; (ce0 <sd_mmc_check+0x348>)
     b98:	4798      	blx	r3
     b9a:	2800      	cmp	r0, #0
     b9c:	d100      	bne.n	ba0 <sd_mmc_check+0x208>
     b9e:	e71b      	b.n	9d8 <sd_mmc_check+0x40>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     ba0:	4b54      	ldr	r3, [pc, #336]	; (cf4 <sd_mmc_check+0x35c>)
     ba2:	4798      	blx	r3
     ba4:	23c0      	movs	r3, #192	; 0xc0
     ba6:	05db      	lsls	r3, r3, #23
     ba8:	4018      	ands	r0, r3
     baa:	2380      	movs	r3, #128	; 0x80
     bac:	05db      	lsls	r3, r3, #23
     bae:	4298      	cmp	r0, r3
     bb0:	d105      	bne.n	bbe <sd_mmc_check+0x226>
		sd_mmc_card->type |= CARD_TYPE_HC;
     bb2:	4b49      	ldr	r3, [pc, #292]	; (cd8 <sd_mmc_check+0x340>)
     bb4:	681a      	ldr	r2, [r3, #0]
     bb6:	7ad1      	ldrb	r1, [r2, #11]
     bb8:	2308      	movs	r3, #8
     bba:	430b      	orrs	r3, r1
     bbc:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     bbe:	2100      	movs	r1, #0
     bc0:	4850      	ldr	r0, [pc, #320]	; (d04 <sd_mmc_check+0x36c>)
     bc2:	4b47      	ldr	r3, [pc, #284]	; (ce0 <sd_mmc_check+0x348>)
     bc4:	4798      	blx	r3
     bc6:	2800      	cmp	r0, #0
     bc8:	d100      	bne.n	bcc <sd_mmc_check+0x234>
     bca:	e705      	b.n	9d8 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd9_spi()) {
     bcc:	4b4e      	ldr	r3, [pc, #312]	; (d08 <sd_mmc_check+0x370>)
     bce:	4798      	blx	r3
     bd0:	2800      	cmp	r0, #0
     bd2:	d100      	bne.n	bd6 <sd_mmc_check+0x23e>
     bd4:	e700      	b.n	9d8 <sd_mmc_check+0x40>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     bd6:	4b40      	ldr	r3, [pc, #256]	; (cd8 <sd_mmc_check+0x340>)
     bd8:	681a      	ldr	r2, [r3, #0]
     bda:	7b93      	ldrb	r3, [r2, #14]
	value &=  ((uint32_t)1 << size) - 1;
     bdc:	069b      	lsls	r3, r3, #26
     bde:	0f1b      	lsrs	r3, r3, #28
     be0:	2b02      	cmp	r3, #2
     be2:	d100      	bne.n	be6 <sd_mmc_check+0x24e>
     be4:	e0a8      	b.n	d38 <sd_mmc_check+0x3a0>
     be6:	d907      	bls.n	bf8 <sd_mmc_check+0x260>
     be8:	2b03      	cmp	r3, #3
     bea:	d100      	bne.n	bee <sd_mmc_check+0x256>
     bec:	e0a7      	b.n	d3e <sd_mmc_check+0x3a6>
     bee:	2b04      	cmp	r3, #4
     bf0:	d104      	bne.n	bfc <sd_mmc_check+0x264>
		sd_mmc_card->version = CARD_VER_MMC_4;
     bf2:	2340      	movs	r3, #64	; 0x40
     bf4:	7313      	strb	r3, [r2, #12]
     bf6:	e003      	b.n	c00 <sd_mmc_check+0x268>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     bf8:	2b01      	cmp	r3, #1
     bfa:	d066      	beq.n	cca <sd_mmc_check+0x332>
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     bfc:	2312      	movs	r3, #18
     bfe:	7313      	strb	r3, [r2, #12]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c00:	7c53      	ldrb	r3, [r2, #17]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     c02:	0659      	lsls	r1, r3, #25
     c04:	0f09      	lsrs	r1, r1, #28
     c06:	0089      	lsls	r1, r1, #2
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     c08:	2007      	movs	r0, #7
     c0a:	4003      	ands	r3, r0
     c0c:	009b      	lsls	r3, r3, #2
	sd_mmc_card->clock = unit * mul * 1000;
     c0e:	483f      	ldr	r0, [pc, #252]	; (d0c <sd_mmc_check+0x374>)
     c10:	5818      	ldr	r0, [r3, r0]
     c12:	23fa      	movs	r3, #250	; 0xfa
     c14:	009b      	lsls	r3, r3, #2
     c16:	4343      	muls	r3, r0
     c18:	4843      	ldr	r0, [pc, #268]	; (d28 <sd_mmc_check+0x390>)
     c1a:	5809      	ldr	r1, [r1, r0]
     c1c:	434b      	muls	r3, r1
     c1e:	6013      	str	r3, [r2, #0]
     c20:	7d91      	ldrb	r1, [r2, #22]
     c22:	1189      	asrs	r1, r1, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     c24:	7d53      	ldrb	r3, [r2, #21]
     c26:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c28:	7d10      	ldrb	r0, [r2, #20]
     c2a:	0280      	lsls	r0, r0, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c2c:	4303      	orrs	r3, r0
     c2e:	430b      	orrs	r3, r1
	value &=  ((uint32_t)1 << size) - 1;
     c30:	051b      	lsls	r3, r3, #20
     c32:	0d1b      	lsrs	r3, r3, #20
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     c34:	493d      	ldr	r1, [pc, #244]	; (d2c <sd_mmc_check+0x394>)
     c36:	428b      	cmp	r3, r1
     c38:	d00f      	beq.n	c5a <sd_mmc_check+0x2c2>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c3a:	7e10      	ldrb	r0, [r2, #24]
     c3c:	11c0      	asrs	r0, r0, #7
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     c3e:	7dd1      	ldrb	r1, [r2, #23]
     c40:	0049      	lsls	r1, r1, #1
     c42:	4301      	orrs	r1, r0
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     c44:	3301      	adds	r3, #1
	value &=  ((uint32_t)1 << size) - 1;
     c46:	2007      	movs	r0, #7
     c48:	4001      	ands	r1, r0
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     c4a:	3102      	adds	r1, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     c4c:	408b      	lsls	r3, r1
     c4e:	7cd1      	ldrb	r1, [r2, #19]
     c50:	3008      	adds	r0, #8
     c52:	4001      	ands	r1, r0
		sd_mmc_card->capacity = blocknr *
     c54:	408b      	lsls	r3, r1
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     c56:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     c58:	6053      	str	r3, [r2, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     c5a:	7b13      	ldrb	r3, [r2, #12]
     c5c:	2b3f      	cmp	r3, #63	; 0x3f
     c5e:	d97b      	bls.n	d58 <sd_mmc_check+0x3c0>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     c60:	2100      	movs	r1, #0
     c62:	9100      	str	r1, [sp, #0]
     c64:	2301      	movs	r3, #1
     c66:	2280      	movs	r2, #128	; 0x80
     c68:	0092      	lsls	r2, r2, #2
     c6a:	4831      	ldr	r0, [pc, #196]	; (d30 <sd_mmc_check+0x398>)
     c6c:	4d2b      	ldr	r5, [pc, #172]	; (d1c <sd_mmc_check+0x384>)
     c6e:	47a8      	blx	r5
     c70:	2800      	cmp	r0, #0
     c72:	d100      	bne.n	c76 <sd_mmc_check+0x2de>
     c74:	e6b0      	b.n	9d8 <sd_mmc_check+0x40>
     c76:	2500      	movs	r5, #0
		if (!driver_read_word(&ext_csd)) {
     c78:	4e2e      	ldr	r6, [pc, #184]	; (d34 <sd_mmc_check+0x39c>)
     c7a:	a805      	add	r0, sp, #20
     c7c:	47b0      	blx	r6
     c7e:	2800      	cmp	r0, #0
     c80:	d100      	bne.n	c84 <sd_mmc_check+0x2ec>
     c82:	e6a9      	b.n	9d8 <sd_mmc_check+0x40>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     c84:	3501      	adds	r5, #1
     c86:	b2ad      	uxth	r5, r5
     c88:	2d32      	cmp	r5, #50	; 0x32
     c8a:	d1f6      	bne.n	c7a <sd_mmc_check+0x2e2>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     c8c:	4b12      	ldr	r3, [pc, #72]	; (cd8 <sd_mmc_check+0x340>)
     c8e:	6819      	ldr	r1, [r3, #0]
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     c90:	7d8a      	ldrb	r2, [r1, #22]
     c92:	1192      	asrs	r2, r2, #6
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     c94:	7d4b      	ldrb	r3, [r1, #21]
     c96:	009b      	lsls	r3, r3, #2
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c98:	7d09      	ldrb	r1, [r1, #20]
     c9a:	0289      	lsls	r1, r1, #10
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     c9c:	430b      	orrs	r3, r1
     c9e:	4313      	orrs	r3, r2
	value &=  ((uint32_t)1 << size) - 1;
     ca0:	051b      	lsls	r3, r3, #20
     ca2:	0d1b      	lsrs	r3, r3, #20
     ca4:	4a21      	ldr	r2, [pc, #132]	; (d2c <sd_mmc_check+0x394>)
     ca6:	4293      	cmp	r3, r2
     ca8:	d154      	bne.n	d54 <sd_mmc_check+0x3bc>
			if (!driver_read_word(&sec_count)) {
     caa:	4e22      	ldr	r6, [pc, #136]	; (d34 <sd_mmc_check+0x39c>)
     cac:	a806      	add	r0, sp, #24
     cae:	47b0      	blx	r6
     cb0:	2800      	cmp	r0, #0
     cb2:	d100      	bne.n	cb6 <sd_mmc_check+0x31e>
     cb4:	e690      	b.n	9d8 <sd_mmc_check+0x40>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     cb6:	3501      	adds	r5, #1
     cb8:	b2ad      	uxth	r5, r5
     cba:	2d35      	cmp	r5, #53	; 0x35
     cbc:	d9f6      	bls.n	cac <sd_mmc_check+0x314>
		sd_mmc_card->capacity = sec_count / 2;
     cbe:	4b06      	ldr	r3, [pc, #24]	; (cd8 <sd_mmc_check+0x340>)
     cc0:	681a      	ldr	r2, [r3, #0]
     cc2:	9b06      	ldr	r3, [sp, #24]
     cc4:	085b      	lsrs	r3, r3, #1
     cc6:	6053      	str	r3, [r2, #4]
     cc8:	e044      	b.n	d54 <sd_mmc_check+0x3bc>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     cca:	2314      	movs	r3, #20
     ccc:	7313      	strb	r3, [r2, #12]
     cce:	e797      	b.n	c00 <sd_mmc_check+0x268>
     cd0:	0000087d 	.word	0x0000087d
     cd4:	0000095d 	.word	0x0000095d
     cd8:	20000228 	.word	0x20000228
     cdc:	0000158d 	.word	0x0000158d
     ce0:	00001755 	.word	0x00001755
     ce4:	00005508 	.word	0x00005508
     ce8:	00001110 	.word	0x00001110
     cec:	000008d9 	.word	0x000008d9
     cf0:	00000855 	.word	0x00000855
     cf4:	0000176d 	.word	0x0000176d
     cf8:	0000053a 	.word	0x0000053a
     cfc:	00001bef 	.word	0x00001bef
     d00:	00001101 	.word	0x00001101
     d04:	0000113b 	.word	0x0000113b
     d08:	00000911 	.word	0x00000911
     d0c:	00006cd0 	.word	0x00006cd0
     d10:	00006cec 	.word	0x00006cec
     d14:	00001137 	.word	0x00001137
     d18:	00081133 	.word	0x00081133
     d1c:	000015c5 	.word	0x000015c5
     d20:	000017f1 	.word	0x000017f1
     d24:	0000187d 	.word	0x0000187d
     d28:	00006c90 	.word	0x00006c90
     d2c:	00000fff 	.word	0x00000fff
     d30:	00081108 	.word	0x00081108
     d34:	00001779 	.word	0x00001779
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     d38:	2322      	movs	r3, #34	; 0x22
     d3a:	7313      	strb	r3, [r2, #12]
     d3c:	e760      	b.n	c00 <sd_mmc_check+0x268>
		sd_mmc_card->version = CARD_VER_MMC_3;
     d3e:	2330      	movs	r3, #48	; 0x30
     d40:	7313      	strb	r3, [r2, #12]
     d42:	e75d      	b.n	c00 <sd_mmc_check+0x268>
		if (!driver_read_word(&sec_count)) {
     d44:	a806      	add	r0, sp, #24
     d46:	4b36      	ldr	r3, [pc, #216]	; (e20 <sd_mmc_check+0x488>)
     d48:	4798      	blx	r3
     d4a:	2800      	cmp	r0, #0
     d4c:	d100      	bne.n	d50 <sd_mmc_check+0x3b8>
     d4e:	e643      	b.n	9d8 <sd_mmc_check+0x40>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     d50:	3501      	adds	r5, #1
     d52:	b2ad      	uxth	r5, r5
     d54:	2d7f      	cmp	r5, #127	; 0x7f
     d56:	d9f5      	bls.n	d44 <sd_mmc_check+0x3ac>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     d58:	2180      	movs	r1, #128	; 0x80
     d5a:	0089      	lsls	r1, r1, #2
     d5c:	4831      	ldr	r0, [pc, #196]	; (e24 <sd_mmc_check+0x48c>)
     d5e:	4b32      	ldr	r3, [pc, #200]	; (e28 <sd_mmc_check+0x490>)
     d60:	4798      	blx	r3
     d62:	2800      	cmp	r0, #0
     d64:	d100      	bne.n	d68 <sd_mmc_check+0x3d0>
     d66:	e637      	b.n	9d8 <sd_mmc_check+0x40>
	if (!sd_mmc_cmd13()) {
     d68:	4b30      	ldr	r3, [pc, #192]	; (e2c <sd_mmc_check+0x494>)
     d6a:	4798      	blx	r3
     d6c:	2800      	cmp	r0, #0
     d6e:	d100      	bne.n	d72 <sd_mmc_check+0x3da>
     d70:	e632      	b.n	9d8 <sd_mmc_check+0x40>
	sd_mmc_configure_slot();
     d72:	4b2f      	ldr	r3, [pc, #188]	; (e30 <sd_mmc_check+0x498>)
     d74:	4798      	blx	r3
     d76:	e65e      	b.n	a36 <sd_mmc_check+0x9e>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     d78:	7dd0      	ldrb	r0, [r2, #23]
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     d7a:	7d93      	ldrb	r3, [r2, #22]
     d7c:	021b      	lsls	r3, r3, #8
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d7e:	7d51      	ldrb	r1, [r2, #21]
     d80:	0409      	lsls	r1, r1, #16
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d82:	430b      	orrs	r3, r1
     d84:	4303      	orrs	r3, r0
	value &=  ((uint32_t)1 << size) - 1;
     d86:	029b      	lsls	r3, r3, #10
				* 512;
     d88:	085b      	lsrs	r3, r3, #1
     d8a:	2180      	movs	r1, #128	; 0x80
     d8c:	0089      	lsls	r1, r1, #2
     d8e:	468c      	mov	ip, r1
     d90:	4463      	add	r3, ip
		sd_mmc_card->capacity =
     d92:	6053      	str	r3, [r2, #4]
     d94:	e6cd      	b.n	b32 <sd_mmc_check+0x19a>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     d96:	4b27      	ldr	r3, [pc, #156]	; (e34 <sd_mmc_check+0x49c>)
     d98:	681b      	ldr	r3, [r3, #0]
     d9a:	2210      	movs	r2, #16
     d9c:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     d9e:	4b25      	ldr	r3, [pc, #148]	; (e34 <sd_mmc_check+0x49c>)
     da0:	681b      	ldr	r3, [r3, #0]
     da2:	7adb      	ldrb	r3, [r3, #11]
     da4:	2209      	movs	r2, #9
     da6:	4013      	ands	r3, r2
     da8:	2b01      	cmp	r3, #1
     daa:	d000      	beq.n	dae <sd_mmc_check+0x416>
     dac:	e638      	b.n	a20 <sd_mmc_check+0x88>
     dae:	e630      	b.n	a12 <sd_mmc_check+0x7a>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     db0:	4b20      	ldr	r3, [pc, #128]	; (e34 <sd_mmc_check+0x49c>)
     db2:	681b      	ldr	r3, [r3, #0]
     db4:	221a      	movs	r2, #26
     db6:	731a      	strb	r2, [r3, #12]
     db8:	e7f1      	b.n	d9e <sd_mmc_check+0x406>
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     dba:	ab06      	add	r3, sp, #24
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     dbc:	789b      	ldrb	r3, [r3, #2]
     dbe:	09db      	lsrs	r3, r3, #7
     dc0:	2b01      	cmp	r3, #1
     dc2:	d104      	bne.n	dce <sd_mmc_check+0x436>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     dc4:	4b1b      	ldr	r3, [pc, #108]	; (e34 <sd_mmc_check+0x49c>)
     dc6:	681b      	ldr	r3, [r3, #0]
     dc8:	2230      	movs	r2, #48	; 0x30
     dca:	731a      	strb	r2, [r3, #12]
     dcc:	e7e7      	b.n	d9e <sd_mmc_check+0x406>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     dce:	4b19      	ldr	r3, [pc, #100]	; (e34 <sd_mmc_check+0x49c>)
     dd0:	681b      	ldr	r3, [r3, #0]
     dd2:	2220      	movs	r2, #32
     dd4:	731a      	strb	r2, [r3, #12]
     dd6:	e7e2      	b.n	d9e <sd_mmc_check+0x406>
	*v2 = 0;
     dd8:	2600      	movs	r6, #0
     dda:	e60d      	b.n	9f8 <sd_mmc_check+0x60>
     ddc:	1e73      	subs	r3, r6, #1
     dde:	419e      	sbcs	r6, r3
     de0:	07b3      	lsls	r3, r6, #30
     de2:	9303      	str	r3, [sp, #12]
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     de4:	4d14      	ldr	r5, [pc, #80]	; (e38 <sd_mmc_check+0x4a0>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     de6:	4f10      	ldr	r7, [pc, #64]	; (e28 <sd_mmc_check+0x490>)
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     de8:	46b8      	mov	r8, r7
		resp = driver_get_response();
     dea:	4e14      	ldr	r6, [pc, #80]	; (e3c <sd_mmc_check+0x4a4>)
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     dec:	2100      	movs	r1, #0
     dee:	4814      	ldr	r0, [pc, #80]	; (e40 <sd_mmc_check+0x4a8>)
     df0:	47b8      	blx	r7
     df2:	2800      	cmp	r0, #0
     df4:	d100      	bne.n	df8 <sd_mmc_check+0x460>
     df6:	e638      	b.n	a6a <sd_mmc_check+0xd2>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     df8:	9903      	ldr	r1, [sp, #12]
     dfa:	4812      	ldr	r0, [pc, #72]	; (e44 <sd_mmc_check+0x4ac>)
     dfc:	47c0      	blx	r8
     dfe:	2800      	cmp	r0, #0
     e00:	d100      	bne.n	e04 <sd_mmc_check+0x46c>
     e02:	e632      	b.n	a6a <sd_mmc_check+0xd2>
		resp = driver_get_response();
     e04:	47b0      	blx	r6
		if (!(resp & R1_SPI_IDLE)) {
     e06:	07c3      	lsls	r3, r0, #31
     e08:	d400      	bmi.n	e0c <sd_mmc_check+0x474>
     e0a:	e628      	b.n	a5e <sd_mmc_check+0xc6>
     e0c:	3d01      	subs	r5, #1
		if (retry-- == 0) {
     e0e:	2d00      	cmp	r5, #0
     e10:	d1ec      	bne.n	dec <sd_mmc_check+0x454>
     e12:	e62a      	b.n	a6a <sd_mmc_check+0xd2>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     e14:	2209      	movs	r2, #9
     e16:	4013      	ands	r3, r2
     e18:	2b01      	cmp	r3, #1
     e1a:	d000      	beq.n	e1e <sd_mmc_check+0x486>
     e1c:	e609      	b.n	a32 <sd_mmc_check+0x9a>
     e1e:	e5f8      	b.n	a12 <sd_mmc_check+0x7a>
     e20:	00001779 	.word	0x00001779
     e24:	00001110 	.word	0x00001110
     e28:	00001755 	.word	0x00001755
     e2c:	000008d9 	.word	0x000008d9
     e30:	00000855 	.word	0x00000855
     e34:	20000228 	.word	0x20000228
     e38:	00001bef 	.word	0x00001bef
     e3c:	0000176d 	.word	0x0000176d
     e40:	00001137 	.word	0x00001137
     e44:	00001129 	.word	0x00001129

00000e48 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
     e48:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e4a:	4b06      	ldr	r3, [pc, #24]	; (e64 <sd_mmc_get_type+0x1c>)
     e4c:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     e4e:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e50:	2800      	cmp	r0, #0
     e52:	d001      	beq.n	e58 <sd_mmc_get_type+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->type;
}
     e54:	0018      	movs	r0, r3
     e56:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     e58:	4b03      	ldr	r3, [pc, #12]	; (e68 <sd_mmc_get_type+0x20>)
     e5a:	4798      	blx	r3
	return sd_mmc_card->type;
     e5c:	4b03      	ldr	r3, [pc, #12]	; (e6c <sd_mmc_get_type+0x24>)
     e5e:	681b      	ldr	r3, [r3, #0]
     e60:	7adb      	ldrb	r3, [r3, #11]
     e62:	e7f7      	b.n	e54 <sd_mmc_get_type+0xc>
     e64:	0000087d 	.word	0x0000087d
     e68:	0000095d 	.word	0x0000095d
     e6c:	20000228 	.word	0x20000228

00000e70 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
     e70:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e72:	4b06      	ldr	r3, [pc, #24]	; (e8c <sd_mmc_get_capacity+0x1c>)
     e74:	4798      	blx	r3
		return 0;
     e76:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     e78:	2800      	cmp	r0, #0
     e7a:	d001      	beq.n	e80 <sd_mmc_get_capacity+0x10>
	}
	sd_mmc_deselect_slot();
	return sd_mmc_card->capacity;
}
     e7c:	0018      	movs	r0, r3
     e7e:	bd10      	pop	{r4, pc}
	sd_mmc_deselect_slot();
     e80:	4b03      	ldr	r3, [pc, #12]	; (e90 <sd_mmc_get_capacity+0x20>)
     e82:	4798      	blx	r3
	return sd_mmc_card->capacity;
     e84:	4b03      	ldr	r3, [pc, #12]	; (e94 <sd_mmc_get_capacity+0x24>)
     e86:	681b      	ldr	r3, [r3, #0]
     e88:	685b      	ldr	r3, [r3, #4]
     e8a:	e7f7      	b.n	e7c <sd_mmc_get_capacity+0xc>
     e8c:	0000087d 	.word	0x0000087d
     e90:	0000095d 	.word	0x0000095d
     e94:	20000228 	.word	0x20000228

00000e98 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     e98:	2000      	movs	r0, #0
     e9a:	4770      	bx	lr

00000e9c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     e9c:	b570      	push	{r4, r5, r6, lr}
     e9e:	b082      	sub	sp, #8
     ea0:	000e      	movs	r6, r1
     ea2:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     ea4:	4b16      	ldr	r3, [pc, #88]	; (f00 <sd_mmc_init_read_blocks+0x64>)
     ea6:	4798      	blx	r3
     ea8:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     eaa:	d002      	beq.n	eb2 <sd_mmc_init_read_blocks+0x16>
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     eac:	0020      	movs	r0, r4
     eae:	b002      	add	sp, #8
     eb0:	bd70      	pop	{r4, r5, r6, pc}
	if (!sd_mmc_cmd13()) {
     eb2:	4b14      	ldr	r3, [pc, #80]	; (f04 <sd_mmc_init_read_blocks+0x68>)
     eb4:	4798      	blx	r3
     eb6:	2800      	cmp	r0, #0
     eb8:	d017      	beq.n	eea <sd_mmc_init_read_blocks+0x4e>
	if (nb_block > 1) {
     eba:	2d01      	cmp	r5, #1
     ebc:	d919      	bls.n	ef2 <sd_mmc_init_read_blocks+0x56>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     ebe:	4812      	ldr	r0, [pc, #72]	; (f08 <sd_mmc_init_read_blocks+0x6c>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     ec0:	4b12      	ldr	r3, [pc, #72]	; (f0c <sd_mmc_init_read_blocks+0x70>)
     ec2:	681b      	ldr	r3, [r3, #0]
     ec4:	7adb      	ldrb	r3, [r3, #11]
     ec6:	071b      	lsls	r3, r3, #28
     ec8:	d400      	bmi.n	ecc <sd_mmc_init_read_blocks+0x30>
		arg = (start * SD_MMC_BLOCK_SIZE);
     eca:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     ecc:	2301      	movs	r3, #1
     ece:	9300      	str	r3, [sp, #0]
     ed0:	002b      	movs	r3, r5
     ed2:	2280      	movs	r2, #128	; 0x80
     ed4:	0092      	lsls	r2, r2, #2
     ed6:	0031      	movs	r1, r6
     ed8:	4e0d      	ldr	r6, [pc, #52]	; (f10 <sd_mmc_init_read_blocks+0x74>)
     eda:	47b0      	blx	r6
     edc:	2800      	cmp	r0, #0
     ede:	d00a      	beq.n	ef6 <sd_mmc_init_read_blocks+0x5a>
	sd_mmc_nb_block_remaining = nb_block;
     ee0:	4b0c      	ldr	r3, [pc, #48]	; (f14 <sd_mmc_init_read_blocks+0x78>)
     ee2:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     ee4:	4b0c      	ldr	r3, [pc, #48]	; (f18 <sd_mmc_init_read_blocks+0x7c>)
     ee6:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
     ee8:	e7e0      	b.n	eac <sd_mmc_init_read_blocks+0x10>
		sd_mmc_deselect_slot();
     eea:	4b0c      	ldr	r3, [pc, #48]	; (f1c <sd_mmc_init_read_blocks+0x80>)
     eec:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     eee:	3405      	adds	r4, #5
     ef0:	e7dc      	b.n	eac <sd_mmc_init_read_blocks+0x10>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     ef2:	480b      	ldr	r0, [pc, #44]	; (f20 <sd_mmc_init_read_blocks+0x84>)
     ef4:	e7e4      	b.n	ec0 <sd_mmc_init_read_blocks+0x24>
		sd_mmc_deselect_slot();
     ef6:	4b09      	ldr	r3, [pc, #36]	; (f1c <sd_mmc_init_read_blocks+0x80>)
     ef8:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     efa:	2405      	movs	r4, #5
     efc:	e7d6      	b.n	eac <sd_mmc_init_read_blocks+0x10>
     efe:	46c0      	nop			; (mov r8, r8)
     f00:	0000087d 	.word	0x0000087d
     f04:	000008d9 	.word	0x000008d9
     f08:	00101112 	.word	0x00101112
     f0c:	20000228 	.word	0x20000228
     f10:	000015c5 	.word	0x000015c5
     f14:	2000024c 	.word	0x2000024c
     f18:	2000024e 	.word	0x2000024e
     f1c:	0000095d 	.word	0x0000095d
     f20:	00081111 	.word	0x00081111

00000f24 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     f24:	b510      	push	{r4, lr}
     f26:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     f28:	4b07      	ldr	r3, [pc, #28]	; (f48 <sd_mmc_start_read_blocks+0x24>)
     f2a:	4798      	blx	r3
     f2c:	2800      	cmp	r0, #0
     f2e:	d104      	bne.n	f3a <sd_mmc_start_read_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
     f30:	2200      	movs	r2, #0
     f32:	4b06      	ldr	r3, [pc, #24]	; (f4c <sd_mmc_start_read_blocks+0x28>)
     f34:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
     f36:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     f38:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     f3a:	4a04      	ldr	r2, [pc, #16]	; (f4c <sd_mmc_start_read_blocks+0x28>)
     f3c:	8813      	ldrh	r3, [r2, #0]
     f3e:	1b1c      	subs	r4, r3, r4
     f40:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
     f42:	2000      	movs	r0, #0
     f44:	e7f8      	b.n	f38 <sd_mmc_start_read_blocks+0x14>
     f46:	46c0      	nop			; (mov r8, r8)
     f48:	000017f1 	.word	0x000017f1
     f4c:	2000024c 	.word	0x2000024c

00000f50 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     f50:	b510      	push	{r4, lr}
     f52:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     f54:	4b14      	ldr	r3, [pc, #80]	; (fa8 <sd_mmc_wait_end_of_read_blocks+0x58>)
     f56:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     f58:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     f5a:	2800      	cmp	r0, #0
     f5c:	d101      	bne.n	f62 <sd_mmc_wait_end_of_read_blocks+0x12>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     f5e:	0018      	movs	r0, r3
     f60:	bd10      	pop	{r4, pc}
	if (abort) {
     f62:	2c00      	cmp	r4, #0
     f64:	d010      	beq.n	f88 <sd_mmc_wait_end_of_read_blocks+0x38>
		sd_mmc_nb_block_remaining = 0;
     f66:	2200      	movs	r2, #0
     f68:	4b10      	ldr	r3, [pc, #64]	; (fac <sd_mmc_wait_end_of_read_blocks+0x5c>)
     f6a:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
     f6c:	4b10      	ldr	r3, [pc, #64]	; (fb0 <sd_mmc_wait_end_of_read_blocks+0x60>)
     f6e:	881b      	ldrh	r3, [r3, #0]
     f70:	2b01      	cmp	r3, #1
     f72:	d00f      	beq.n	f94 <sd_mmc_wait_end_of_read_blocks+0x44>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     f74:	2100      	movs	r1, #0
     f76:	480f      	ldr	r0, [pc, #60]	; (fb4 <sd_mmc_wait_end_of_read_blocks+0x64>)
     f78:	4b0f      	ldr	r3, [pc, #60]	; (fb8 <sd_mmc_wait_end_of_read_blocks+0x68>)
     f7a:	4798      	blx	r3
     f7c:	2800      	cmp	r0, #0
     f7e:	d00d      	beq.n	f9c <sd_mmc_wait_end_of_read_blocks+0x4c>
	sd_mmc_deselect_slot();
     f80:	4b0e      	ldr	r3, [pc, #56]	; (fbc <sd_mmc_wait_end_of_read_blocks+0x6c>)
     f82:	4798      	blx	r3
	return SD_MMC_OK;
     f84:	2300      	movs	r3, #0
     f86:	e7ea      	b.n	f5e <sd_mmc_wait_end_of_read_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
     f88:	4b08      	ldr	r3, [pc, #32]	; (fac <sd_mmc_wait_end_of_read_blocks+0x5c>)
     f8a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     f8c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
     f8e:	2a00      	cmp	r2, #0
     f90:	d0ec      	beq.n	f6c <sd_mmc_wait_end_of_read_blocks+0x1c>
     f92:	e7e4      	b.n	f5e <sd_mmc_wait_end_of_read_blocks+0xe>
		sd_mmc_deselect_slot();
     f94:	4b09      	ldr	r3, [pc, #36]	; (fbc <sd_mmc_wait_end_of_read_blocks+0x6c>)
     f96:	4798      	blx	r3
		return SD_MMC_OK;
     f98:	2300      	movs	r3, #0
     f9a:	e7e0      	b.n	f5e <sd_mmc_wait_end_of_read_blocks+0xe>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     f9c:	2100      	movs	r1, #0
     f9e:	4805      	ldr	r0, [pc, #20]	; (fb4 <sd_mmc_wait_end_of_read_blocks+0x64>)
     fa0:	4b05      	ldr	r3, [pc, #20]	; (fb8 <sd_mmc_wait_end_of_read_blocks+0x68>)
     fa2:	4798      	blx	r3
     fa4:	e7ec      	b.n	f80 <sd_mmc_wait_end_of_read_blocks+0x30>
     fa6:	46c0      	nop			; (mov r8, r8)
     fa8:	0000187d 	.word	0x0000187d
     fac:	2000024c 	.word	0x2000024c
     fb0:	2000024e 	.word	0x2000024e
     fb4:	0000310c 	.word	0x0000310c
     fb8:	00001755 	.word	0x00001755
     fbc:	0000095d 	.word	0x0000095d

00000fc0 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     fc0:	b570      	push	{r4, r5, r6, lr}
     fc2:	b082      	sub	sp, #8
     fc4:	000e      	movs	r6, r1
     fc6:	0015      	movs	r5, r2
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     fc8:	4b11      	ldr	r3, [pc, #68]	; (1010 <sd_mmc_init_write_blocks+0x50>)
     fca:	4798      	blx	r3
     fcc:	1e04      	subs	r4, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     fce:	d116      	bne.n	ffe <sd_mmc_init_write_blocks+0x3e>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     fd0:	2d01      	cmp	r5, #1
     fd2:	d917      	bls.n	1004 <sd_mmc_init_write_blocks+0x44>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     fd4:	480f      	ldr	r0, [pc, #60]	; (1014 <sd_mmc_init_write_blocks+0x54>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     fd6:	4b10      	ldr	r3, [pc, #64]	; (1018 <sd_mmc_init_write_blocks+0x58>)
     fd8:	681b      	ldr	r3, [r3, #0]
     fda:	7adb      	ldrb	r3, [r3, #11]
     fdc:	071b      	lsls	r3, r3, #28
     fde:	d400      	bmi.n	fe2 <sd_mmc_init_write_blocks+0x22>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     fe0:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     fe2:	2301      	movs	r3, #1
     fe4:	9300      	str	r3, [sp, #0]
     fe6:	002b      	movs	r3, r5
     fe8:	2280      	movs	r2, #128	; 0x80
     fea:	0092      	lsls	r2, r2, #2
     fec:	0031      	movs	r1, r6
     fee:	4e0b      	ldr	r6, [pc, #44]	; (101c <sd_mmc_init_write_blocks+0x5c>)
     ff0:	47b0      	blx	r6
     ff2:	2800      	cmp	r0, #0
     ff4:	d008      	beq.n	1008 <sd_mmc_init_write_blocks+0x48>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
     ff6:	4b0a      	ldr	r3, [pc, #40]	; (1020 <sd_mmc_init_write_blocks+0x60>)
     ff8:	801d      	strh	r5, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     ffa:	4b0a      	ldr	r3, [pc, #40]	; (1024 <sd_mmc_init_write_blocks+0x64>)
     ffc:	801d      	strh	r5, [r3, #0]
	return SD_MMC_OK;
}
     ffe:	0020      	movs	r0, r4
    1000:	b002      	add	sp, #8
    1002:	bd70      	pop	{r4, r5, r6, pc}
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    1004:	4808      	ldr	r0, [pc, #32]	; (1028 <sd_mmc_init_write_blocks+0x68>)
    1006:	e7e6      	b.n	fd6 <sd_mmc_init_write_blocks+0x16>
		sd_mmc_deselect_slot();
    1008:	4b08      	ldr	r3, [pc, #32]	; (102c <sd_mmc_init_write_blocks+0x6c>)
    100a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    100c:	2405      	movs	r4, #5
    100e:	e7f6      	b.n	ffe <sd_mmc_init_write_blocks+0x3e>
    1010:	0000087d 	.word	0x0000087d
    1014:	00109119 	.word	0x00109119
    1018:	20000228 	.word	0x20000228
    101c:	000015c5 	.word	0x000015c5
    1020:	2000024c 	.word	0x2000024c
    1024:	2000024e 	.word	0x2000024e
    1028:	00089118 	.word	0x00089118
    102c:	0000095d 	.word	0x0000095d

00001030 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    1030:	b510      	push	{r4, lr}
    1032:	000c      	movs	r4, r1
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    1034:	4b07      	ldr	r3, [pc, #28]	; (1054 <sd_mmc_start_write_blocks+0x24>)
    1036:	4798      	blx	r3
    1038:	2800      	cmp	r0, #0
    103a:	d104      	bne.n	1046 <sd_mmc_start_write_blocks+0x16>
		sd_mmc_nb_block_remaining = 0;
    103c:	2200      	movs	r2, #0
    103e:	4b06      	ldr	r3, [pc, #24]	; (1058 <sd_mmc_start_write_blocks+0x28>)
    1040:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1042:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
    1044:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
    1046:	4a04      	ldr	r2, [pc, #16]	; (1058 <sd_mmc_start_write_blocks+0x28>)
    1048:	8813      	ldrh	r3, [r2, #0]
    104a:	1b1c      	subs	r4, r3, r4
    104c:	8014      	strh	r4, [r2, #0]
	return SD_MMC_OK;
    104e:	2000      	movs	r0, #0
    1050:	e7f8      	b.n	1044 <sd_mmc_start_write_blocks+0x14>
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	00001881 	.word	0x00001881
    1058:	2000024c 	.word	0x2000024c

0000105c <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    105c:	b510      	push	{r4, lr}
    105e:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
    1060:	4b0e      	ldr	r3, [pc, #56]	; (109c <sd_mmc_wait_end_of_write_blocks+0x40>)
    1062:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1064:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
    1066:	2800      	cmp	r0, #0
    1068:	d101      	bne.n	106e <sd_mmc_wait_end_of_write_blocks+0x12>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
    106a:	0018      	movs	r0, r3
    106c:	bd10      	pop	{r4, pc}
	if (abort) {
    106e:	2c00      	cmp	r4, #0
    1070:	d00a      	beq.n	1088 <sd_mmc_wait_end_of_write_blocks+0x2c>
		sd_mmc_nb_block_remaining = 0;
    1072:	2200      	movs	r2, #0
    1074:	4b0a      	ldr	r3, [pc, #40]	; (10a0 <sd_mmc_wait_end_of_write_blocks+0x44>)
    1076:	801a      	strh	r2, [r3, #0]
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1078:	4b0a      	ldr	r3, [pc, #40]	; (10a4 <sd_mmc_wait_end_of_write_blocks+0x48>)
    107a:	881b      	ldrh	r3, [r3, #0]
    107c:	2b01      	cmp	r3, #1
    107e:	d009      	beq.n	1094 <sd_mmc_wait_end_of_write_blocks+0x38>
	sd_mmc_deselect_slot();
    1080:	4b09      	ldr	r3, [pc, #36]	; (10a8 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    1082:	4798      	blx	r3
	return SD_MMC_OK;
    1084:	2300      	movs	r3, #0
    1086:	e7f0      	b.n	106a <sd_mmc_wait_end_of_write_blocks+0xe>
	} else if (sd_mmc_nb_block_remaining) {
    1088:	4b05      	ldr	r3, [pc, #20]	; (10a0 <sd_mmc_wait_end_of_write_blocks+0x44>)
    108a:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
    108c:	2300      	movs	r3, #0
	} else if (sd_mmc_nb_block_remaining) {
    108e:	2a00      	cmp	r2, #0
    1090:	d0f2      	beq.n	1078 <sd_mmc_wait_end_of_write_blocks+0x1c>
    1092:	e7ea      	b.n	106a <sd_mmc_wait_end_of_write_blocks+0xe>
		sd_mmc_deselect_slot();
    1094:	4b04      	ldr	r3, [pc, #16]	; (10a8 <sd_mmc_wait_end_of_write_blocks+0x4c>)
    1096:	4798      	blx	r3
		return SD_MMC_OK;
    1098:	2300      	movs	r3, #0
    109a:	e7e6      	b.n	106a <sd_mmc_wait_end_of_write_blocks+0xe>
    109c:	00001901 	.word	0x00001901
    10a0:	2000024c 	.word	0x2000024c
    10a4:	2000024e 	.word	0x2000024e
    10a8:	0000095d 	.word	0x0000095d

000010ac <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    10ac:	b510      	push	{r4, lr}
    10ae:	0004      	movs	r4, r0
	switch (sd_mmc_check(slot))
    10b0:	4b0f      	ldr	r3, [pc, #60]	; (10f0 <sd_mmc_test_unit_ready+0x44>)
    10b2:	4798      	blx	r3
    10b4:	2801      	cmp	r0, #1
    10b6:	d019      	beq.n	10ec <sd_mmc_test_unit_ready+0x40>
    10b8:	2800      	cmp	r0, #0
    10ba:	d003      	beq.n	10c4 <sd_mmc_test_unit_ready+0x18>
    10bc:	2802      	cmp	r0, #2
    10be:	d010      	beq.n	10e2 <sd_mmc_test_unit_ready+0x36>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
    10c0:	2001      	movs	r0, #1
	}
}
    10c2:	bd10      	pop	{r4, pc}
		if (sd_mmc_ejected[slot]) {
    10c4:	4b0b      	ldr	r3, [pc, #44]	; (10f4 <sd_mmc_test_unit_ready+0x48>)
    10c6:	5d1b      	ldrb	r3, [r3, r4]
			return CTRL_NO_PRESENT;
    10c8:	2002      	movs	r0, #2
		if (sd_mmc_ejected[slot]) {
    10ca:	2b00      	cmp	r3, #0
    10cc:	d1f9      	bne.n	10c2 <sd_mmc_test_unit_ready+0x16>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    10ce:	0020      	movs	r0, r4
    10d0:	4b09      	ldr	r3, [pc, #36]	; (10f8 <sd_mmc_test_unit_ready+0x4c>)
    10d2:	4798      	blx	r3
    10d4:	0003      	movs	r3, r0
    10d6:	2003      	movs	r0, #3
    10d8:	4018      	ands	r0, r3
		return CTRL_NO_PRESENT;
    10da:	4243      	negs	r3, r0
    10dc:	4158      	adcs	r0, r3
    10de:	0040      	lsls	r0, r0, #1
    10e0:	e7ef      	b.n	10c2 <sd_mmc_test_unit_ready+0x16>
		sd_mmc_ejected[slot] = false;
    10e2:	2200      	movs	r2, #0
    10e4:	4b03      	ldr	r3, [pc, #12]	; (10f4 <sd_mmc_test_unit_ready+0x48>)
    10e6:	551a      	strb	r2, [r3, r4]
		return CTRL_NO_PRESENT;
    10e8:	2002      	movs	r0, #2
    10ea:	e7ea      	b.n	10c2 <sd_mmc_test_unit_ready+0x16>
		return CTRL_BUSY;
    10ec:	2003      	movs	r0, #3
    10ee:	e7e8      	b.n	10c2 <sd_mmc_test_unit_ready+0x16>
    10f0:	00000999 	.word	0x00000999
    10f4:	20000254 	.word	0x20000254
    10f8:	00000e49 	.word	0x00000e49

000010fc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    10fc:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
    10fe:	2000      	movs	r0, #0
    1100:	4b01      	ldr	r3, [pc, #4]	; (1108 <sd_mmc_test_unit_ready_0+0xc>)
    1102:	4798      	blx	r3
}
    1104:	bd10      	pop	{r4, pc}
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	000010ad 	.word	0x000010ad

0000110c <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    110c:	b570      	push	{r4, r5, r6, lr}
    110e:	0004      	movs	r4, r0
    1110:	000d      	movs	r5, r1
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    1112:	4b04      	ldr	r3, [pc, #16]	; (1124 <sd_mmc_read_capacity+0x18>)
    1114:	4798      	blx	r3
    1116:	0040      	lsls	r0, r0, #1
    1118:	3801      	subs	r0, #1
    111a:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
    111c:	0020      	movs	r0, r4
    111e:	4b02      	ldr	r3, [pc, #8]	; (1128 <sd_mmc_read_capacity+0x1c>)
    1120:	4798      	blx	r3
}
    1122:	bd70      	pop	{r4, r5, r6, pc}
    1124:	00000e71 	.word	0x00000e71
    1128:	000010ad 	.word	0x000010ad

0000112c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    112c:	b510      	push	{r4, lr}
    112e:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
    1130:	2000      	movs	r0, #0
    1132:	4b01      	ldr	r3, [pc, #4]	; (1138 <sd_mmc_read_capacity_0+0xc>)
    1134:	4798      	blx	r3
}
    1136:	bd10      	pop	{r4, pc}
    1138:	0000110d 	.word	0x0000110d

0000113c <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
    113c:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
    113e:	2000      	movs	r0, #0
    1140:	4b01      	ldr	r3, [pc, #4]	; (1148 <sd_mmc_wr_protect_0+0xc>)
    1142:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
    1144:	bd10      	pop	{r4, pc}
    1146:	46c0      	nop			; (mov r8, r8)
    1148:	00000e99 	.word	0x00000e99

0000114c <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    114c:	b510      	push	{r4, lr}
    114e:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    1150:	2201      	movs	r2, #1
    1152:	4b0c      	ldr	r3, [pc, #48]	; (1184 <sd_mmc_mem_2_ram+0x38>)
    1154:	4798      	blx	r3
    1156:	2800      	cmp	r0, #0
    1158:	d004      	beq.n	1164 <sd_mmc_mem_2_ram+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    115a:	3802      	subs	r0, #2
    115c:	4243      	negs	r3, r0
    115e:	4158      	adcs	r0, r3
    1160:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    1162:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    1164:	2101      	movs	r1, #1
    1166:	0020      	movs	r0, r4
    1168:	4b07      	ldr	r3, [pc, #28]	; (1188 <sd_mmc_mem_2_ram+0x3c>)
    116a:	4798      	blx	r3
    116c:	0003      	movs	r3, r0
		return CTRL_FAIL;
    116e:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    1170:	2b00      	cmp	r3, #0
    1172:	d1f6      	bne.n	1162 <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    1174:	2000      	movs	r0, #0
    1176:	4b05      	ldr	r3, [pc, #20]	; (118c <sd_mmc_mem_2_ram+0x40>)
    1178:	4798      	blx	r3
    117a:	1e43      	subs	r3, r0, #1
    117c:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    117e:	b2c0      	uxtb	r0, r0
    1180:	e7ef      	b.n	1162 <sd_mmc_mem_2_ram+0x16>
    1182:	46c0      	nop			; (mov r8, r8)
    1184:	00000e9d 	.word	0x00000e9d
    1188:	00000f25 	.word	0x00000f25
    118c:	00000f51 	.word	0x00000f51

00001190 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    1190:	b510      	push	{r4, lr}
    1192:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
    1194:	0001      	movs	r1, r0
    1196:	2000      	movs	r0, #0
    1198:	4b01      	ldr	r3, [pc, #4]	; (11a0 <sd_mmc_mem_2_ram_0+0x10>)
    119a:	4798      	blx	r3
}
    119c:	bd10      	pop	{r4, pc}
    119e:	46c0      	nop			; (mov r8, r8)
    11a0:	0000114d 	.word	0x0000114d

000011a4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    11a4:	b510      	push	{r4, lr}
    11a6:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    11a8:	2201      	movs	r2, #1
    11aa:	4b0c      	ldr	r3, [pc, #48]	; (11dc <sd_mmc_ram_2_mem+0x38>)
    11ac:	4798      	blx	r3
    11ae:	2800      	cmp	r0, #0
    11b0:	d004      	beq.n	11bc <sd_mmc_ram_2_mem+0x18>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
    11b2:	3802      	subs	r0, #2
    11b4:	4243      	negs	r3, r0
    11b6:	4158      	adcs	r0, r3
    11b8:	3001      	adds	r0, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
    11ba:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    11bc:	2101      	movs	r1, #1
    11be:	0020      	movs	r0, r4
    11c0:	4b07      	ldr	r3, [pc, #28]	; (11e0 <sd_mmc_ram_2_mem+0x3c>)
    11c2:	4798      	blx	r3
    11c4:	0003      	movs	r3, r0
		return CTRL_FAIL;
    11c6:	2001      	movs	r0, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    11c8:	2b00      	cmp	r3, #0
    11ca:	d1f6      	bne.n	11ba <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    11cc:	2000      	movs	r0, #0
    11ce:	4b05      	ldr	r3, [pc, #20]	; (11e4 <sd_mmc_ram_2_mem+0x40>)
    11d0:	4798      	blx	r3
    11d2:	1e43      	subs	r3, r0, #1
    11d4:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
    11d6:	b2c0      	uxtb	r0, r0
    11d8:	e7ef      	b.n	11ba <sd_mmc_ram_2_mem+0x16>
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	00000fc1 	.word	0x00000fc1
    11e0:	00001031 	.word	0x00001031
    11e4:	0000105d 	.word	0x0000105d

000011e8 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    11e8:	b510      	push	{r4, lr}
    11ea:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
    11ec:	0001      	movs	r1, r0
    11ee:	2000      	movs	r0, #0
    11f0:	4b01      	ldr	r3, [pc, #4]	; (11f8 <sd_mmc_ram_2_mem_0+0x10>)
    11f2:	4798      	blx	r3
}
    11f4:	bd10      	pop	{r4, pc}
    11f6:	46c0      	nop			; (mov r8, r8)
    11f8:	000011a5 	.word	0x000011a5

000011fc <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    11fc:	b500      	push	{lr}
    11fe:	b083      	sub	sp, #12
	uint8_t dummy = 0xFF;
    1200:	466b      	mov	r3, sp
    1202:	1dd9      	adds	r1, r3, #7
    1204:	23ff      	movs	r3, #255	; 0xff
    1206:	700b      	strb	r3, [r1, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    1208:	2201      	movs	r2, #1
    120a:	480b      	ldr	r0, [pc, #44]	; (1238 <sd_mmc_spi_start_write_block+0x3c>)
    120c:	4b0b      	ldr	r3, [pc, #44]	; (123c <sd_mmc_spi_start_write_block+0x40>)
    120e:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    1210:	4b0b      	ldr	r3, [pc, #44]	; (1240 <sd_mmc_spi_start_write_block+0x44>)
    1212:	881b      	ldrh	r3, [r3, #0]
    1214:	2b01      	cmp	r3, #1
    1216:	d00a      	beq.n	122e <sd_mmc_spi_start_write_block+0x32>
		token = SPI_TOKEN_SINGLE_WRITE;
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    1218:	22fc      	movs	r2, #252	; 0xfc
    121a:	466b      	mov	r3, sp
    121c:	719a      	strb	r2, [r3, #6]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    121e:	2201      	movs	r2, #1
    1220:	466b      	mov	r3, sp
    1222:	1d99      	adds	r1, r3, #6
    1224:	4804      	ldr	r0, [pc, #16]	; (1238 <sd_mmc_spi_start_write_block+0x3c>)
    1226:	4b05      	ldr	r3, [pc, #20]	; (123c <sd_mmc_spi_start_write_block+0x40>)
    1228:	4798      	blx	r3
}
    122a:	b003      	add	sp, #12
    122c:	bd00      	pop	{pc}
		token = SPI_TOKEN_SINGLE_WRITE;
    122e:	22fe      	movs	r2, #254	; 0xfe
    1230:	466b      	mov	r3, sp
    1232:	719a      	strb	r2, [r3, #6]
    1234:	e7f3      	b.n	121e <sd_mmc_spi_start_write_block+0x22>
    1236:	46c0      	nop			; (mov r8, r8)
    1238:	20000258 	.word	0x20000258
    123c:	00002511 	.word	0x00002511
    1240:	2000029c 	.word	0x2000029c

00001244 <sd_mmc_spi_wait_busy>:
{
    1244:	b5f0      	push	{r4, r5, r6, r7, lr}
    1246:	b083      	sub	sp, #12
	uint8_t line = 0xFF;
    1248:	466b      	mov	r3, sp
    124a:	1ddc      	adds	r4, r3, #7
    124c:	23ff      	movs	r3, #255	; 0xff
    124e:	7023      	strb	r3, [r4, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    1250:	4e12      	ldr	r6, [pc, #72]	; (129c <sd_mmc_spi_wait_busy+0x58>)
    1252:	2201      	movs	r2, #1
    1254:	0021      	movs	r1, r4
    1256:	0030      	movs	r0, r6
    1258:	4d11      	ldr	r5, [pc, #68]	; (12a0 <sd_mmc_spi_wait_busy+0x5c>)
    125a:	47a8      	blx	r5
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    125c:	23ff      	movs	r3, #255	; 0xff
    125e:	2201      	movs	r2, #1
    1260:	0021      	movs	r1, r4
    1262:	0030      	movs	r0, r6
    1264:	47a8      	blx	r5
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    1266:	23ff      	movs	r3, #255	; 0xff
    1268:	2201      	movs	r2, #1
    126a:	0021      	movs	r1, r4
    126c:	0030      	movs	r0, r6
    126e:	47a8      	blx	r5
    1270:	4c0c      	ldr	r4, [pc, #48]	; (12a4 <sd_mmc_spi_wait_busy+0x60>)
	} while (line != 0xFF);
    1272:	466b      	mov	r3, sp
    1274:	1ddd      	adds	r5, r3, #7
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    1276:	4e09      	ldr	r6, [pc, #36]	; (129c <sd_mmc_spi_wait_busy+0x58>)
    1278:	4f09      	ldr	r7, [pc, #36]	; (12a0 <sd_mmc_spi_wait_busy+0x5c>)
	} while (line != 0xFF);
    127a:	782b      	ldrb	r3, [r5, #0]
    127c:	2bff      	cmp	r3, #255	; 0xff
    127e:	d009      	beq.n	1294 <sd_mmc_spi_wait_busy+0x50>
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    1280:	23ff      	movs	r3, #255	; 0xff
    1282:	2201      	movs	r2, #1
    1284:	0029      	movs	r1, r5
    1286:	0030      	movs	r0, r6
    1288:	47b8      	blx	r7
    128a:	3c01      	subs	r4, #1
		if (!(nec_timeout--)) {
    128c:	2c00      	cmp	r4, #0
    128e:	d1f4      	bne.n	127a <sd_mmc_spi_wait_busy+0x36>
			return false;
    1290:	2000      	movs	r0, #0
    1292:	e000      	b.n	1296 <sd_mmc_spi_wait_busy+0x52>
	return true;
    1294:	2001      	movs	r0, #1
}
    1296:	b003      	add	sp, #12
    1298:	bdf0      	pop	{r4, r5, r6, r7, pc}
    129a:	46c0      	nop			; (mov r8, r8)
    129c:	20000258 	.word	0x20000258
    12a0:	00002349 	.word	0x00002349
    12a4:	00030d40 	.word	0x00030d40

000012a8 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    12a8:	b570      	push	{r4, r5, r6, lr}
    12aa:	b082      	sub	sp, #8
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    12ac:	4b14      	ldr	r3, [pc, #80]	; (1300 <sd_mmc_spi_stop_multiwrite_block+0x58>)
    12ae:	881c      	ldrh	r4, [r3, #0]
    12b0:	2c01      	cmp	r4, #1
    12b2:	d023      	beq.n	12fc <sd_mmc_spi_stop_multiwrite_block+0x54>
		return true; // Single block write
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    12b4:	4b13      	ldr	r3, [pc, #76]	; (1304 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    12b6:	8819      	ldrh	r1, [r3, #0]
    12b8:	4b13      	ldr	r3, [pc, #76]	; (1308 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    12ba:	6818      	ldr	r0, [r3, #0]
    12bc:	4b13      	ldr	r3, [pc, #76]	; (130c <sd_mmc_spi_stop_multiwrite_block+0x64>)
    12be:	4798      	blx	r3
		return true; // It is not the End of multi write
    12c0:	2301      	movs	r3, #1
	if (sd_mmc_spi_nb_block >
    12c2:	4284      	cmp	r4, r0
    12c4:	d902      	bls.n	12cc <sd_mmc_spi_stop_multiwrite_block+0x24>
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    12c6:	0018      	movs	r0, r3
    12c8:	b002      	add	sp, #8
    12ca:	bd70      	pop	{r4, r5, r6, pc}
	value = 0xFF;
    12cc:	466b      	mov	r3, sp
    12ce:	1ddc      	adds	r4, r3, #7
    12d0:	23ff      	movs	r3, #255	; 0xff
    12d2:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    12d4:	4e0e      	ldr	r6, [pc, #56]	; (1310 <sd_mmc_spi_stop_multiwrite_block+0x68>)
    12d6:	2201      	movs	r2, #1
    12d8:	0021      	movs	r1, r4
    12da:	0030      	movs	r0, r6
    12dc:	4d0d      	ldr	r5, [pc, #52]	; (1314 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    12de:	47a8      	blx	r5
	value = SPI_TOKEN_STOP_TRAN;
    12e0:	23fd      	movs	r3, #253	; 0xfd
    12e2:	7023      	strb	r3, [r4, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    12e4:	2201      	movs	r2, #1
    12e6:	0021      	movs	r1, r4
    12e8:	0030      	movs	r0, r6
    12ea:	47a8      	blx	r5
	if (!sd_mmc_spi_wait_busy()) {
    12ec:	4b0a      	ldr	r3, [pc, #40]	; (1318 <sd_mmc_spi_stop_multiwrite_block+0x70>)
    12ee:	4798      	blx	r3
    12f0:	1e03      	subs	r3, r0, #0
    12f2:	d1e8      	bne.n	12c6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    12f4:	2105      	movs	r1, #5
    12f6:	4a09      	ldr	r2, [pc, #36]	; (131c <sd_mmc_spi_stop_multiwrite_block+0x74>)
    12f8:	7011      	strb	r1, [r2, #0]
		return false;
    12fa:	e7e4      	b.n	12c6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
		return true; // Single block write
    12fc:	2301      	movs	r3, #1
    12fe:	e7e2      	b.n	12c6 <sd_mmc_spi_stop_multiwrite_block+0x1e>
    1300:	2000029c 	.word	0x2000029c
    1304:	20000294 	.word	0x20000294
    1308:	200002a4 	.word	0x200002a4
    130c:	00005be5 	.word	0x00005be5
    1310:	20000258 	.word	0x20000258
    1314:	00002511 	.word	0x00002511
    1318:	00001245 	.word	0x00001245
    131c:	2000029b 	.word	0x2000029b

00001320 <sd_mmc_spi_start_read_block>:
{
    1320:	b5f0      	push	{r4, r5, r6, r7, lr}
    1322:	b083      	sub	sp, #12
	token = 0;
    1324:	2200      	movs	r2, #0
    1326:	466b      	mov	r3, sp
    1328:	71da      	strb	r2, [r3, #7]
    132a:	4c14      	ldr	r4, [pc, #80]	; (137c <sd_mmc_spi_start_read_block+0x5c>)
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    132c:	466b      	mov	r3, sp
    132e:	1ddd      	adds	r5, r3, #7
    1330:	4e13      	ldr	r6, [pc, #76]	; (1380 <sd_mmc_spi_start_read_block+0x60>)
    1332:	4f14      	ldr	r7, [pc, #80]	; (1384 <sd_mmc_spi_start_read_block+0x64>)
    1334:	23ff      	movs	r3, #255	; 0xff
    1336:	2201      	movs	r2, #1
    1338:	0029      	movs	r1, r5
    133a:	0030      	movs	r0, r6
    133c:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    133e:	782b      	ldrb	r3, [r5, #0]
    1340:	220f      	movs	r2, #15
    1342:	0019      	movs	r1, r3
    1344:	4391      	bics	r1, r2
    1346:	1e0a      	subs	r2, r1, #0
    1348:	d009      	beq.n	135e <sd_mmc_spi_start_read_block+0x3e>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    134a:	2bfe      	cmp	r3, #254	; 0xfe
    134c:	d013      	beq.n	1376 <sd_mmc_spi_start_read_block+0x56>
    134e:	3c01      	subs	r4, #1
		if (i-- == 0) {
    1350:	2c00      	cmp	r4, #0
    1352:	d1ef      	bne.n	1334 <sd_mmc_spi_start_read_block+0x14>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    1354:	2204      	movs	r2, #4
    1356:	4b0c      	ldr	r3, [pc, #48]	; (1388 <sd_mmc_spi_start_read_block+0x68>)
    1358:	701a      	strb	r2, [r3, #0]
			return false;
    135a:	2000      	movs	r0, #0
    135c:	e00c      	b.n	1378 <sd_mmc_spi_start_read_block+0x58>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    135e:	075b      	lsls	r3, r3, #29
    1360:	d004      	beq.n	136c <sd_mmc_spi_start_read_block+0x4c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    1362:	3207      	adds	r2, #7
    1364:	4b08      	ldr	r3, [pc, #32]	; (1388 <sd_mmc_spi_start_read_block+0x68>)
    1366:	701a      	strb	r2, [r3, #0]
			return false;
    1368:	2000      	movs	r0, #0
    136a:	e005      	b.n	1378 <sd_mmc_spi_start_read_block+0x58>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    136c:	220b      	movs	r2, #11
    136e:	4b06      	ldr	r3, [pc, #24]	; (1388 <sd_mmc_spi_start_read_block+0x68>)
    1370:	701a      	strb	r2, [r3, #0]
			return false;
    1372:	2000      	movs	r0, #0
    1374:	e000      	b.n	1378 <sd_mmc_spi_start_read_block+0x58>
	return true;
    1376:	2001      	movs	r0, #1
}
    1378:	b003      	add	sp, #12
    137a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    137c:	0007a120 	.word	0x0007a120
    1380:	20000258 	.word	0x20000258
    1384:	00002349 	.word	0x00002349
    1388:	2000029b 	.word	0x2000029b

0000138c <sd_mmc_spi_stop_write_block>:
{
    138c:	b530      	push	{r4, r5, lr}
    138e:	b083      	sub	sp, #12
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    1390:	a901      	add	r1, sp, #4
    1392:	2301      	movs	r3, #1
    1394:	425b      	negs	r3, r3
    1396:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    1398:	4d14      	ldr	r5, [pc, #80]	; (13ec <sd_mmc_spi_stop_write_block+0x60>)
    139a:	2202      	movs	r2, #2
    139c:	0028      	movs	r0, r5
    139e:	4b14      	ldr	r3, [pc, #80]	; (13f0 <sd_mmc_spi_stop_write_block+0x64>)
    13a0:	4798      	blx	r3
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    13a2:	466b      	mov	r3, sp
    13a4:	1ddc      	adds	r4, r3, #7
    13a6:	23ff      	movs	r3, #255	; 0xff
    13a8:	2201      	movs	r2, #1
    13aa:	0021      	movs	r1, r4
    13ac:	0028      	movs	r0, r5
    13ae:	4d11      	ldr	r5, [pc, #68]	; (13f4 <sd_mmc_spi_stop_write_block+0x68>)
    13b0:	47a8      	blx	r5
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    13b2:	7822      	ldrb	r2, [r4, #0]
    13b4:	2311      	movs	r3, #17
    13b6:	4013      	ands	r3, r2
    13b8:	2b01      	cmp	r3, #1
    13ba:	d005      	beq.n	13c8 <sd_mmc_spi_stop_write_block+0x3c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    13bc:	2201      	movs	r2, #1
    13be:	4b0e      	ldr	r3, [pc, #56]	; (13f8 <sd_mmc_spi_stop_write_block+0x6c>)
    13c0:	701a      	strb	r2, [r3, #0]
		return false;
    13c2:	2000      	movs	r0, #0
}
    13c4:	b003      	add	sp, #12
    13c6:	bd30      	pop	{r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    13c8:	231e      	movs	r3, #30
    13ca:	401a      	ands	r2, r3
    13cc:	2a04      	cmp	r2, #4
    13ce:	d00b      	beq.n	13e8 <sd_mmc_spi_stop_write_block+0x5c>
    13d0:	2a0a      	cmp	r2, #10
    13d2:	d104      	bne.n	13de <sd_mmc_spi_stop_write_block+0x52>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    13d4:	3a02      	subs	r2, #2
    13d6:	4b08      	ldr	r3, [pc, #32]	; (13f8 <sd_mmc_spi_stop_write_block+0x6c>)
    13d8:	701a      	strb	r2, [r3, #0]
		return false;
    13da:	2000      	movs	r0, #0
    13dc:	e7f2      	b.n	13c4 <sd_mmc_spi_stop_write_block+0x38>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    13de:	220a      	movs	r2, #10
    13e0:	4b05      	ldr	r3, [pc, #20]	; (13f8 <sd_mmc_spi_stop_write_block+0x6c>)
    13e2:	701a      	strb	r2, [r3, #0]
		return false;
    13e4:	2000      	movs	r0, #0
    13e6:	e7ed      	b.n	13c4 <sd_mmc_spi_stop_write_block+0x38>
	return true;
    13e8:	2001      	movs	r0, #1
    13ea:	e7eb      	b.n	13c4 <sd_mmc_spi_stop_write_block+0x38>
    13ec:	20000258 	.word	0x20000258
    13f0:	00002511 	.word	0x00002511
    13f4:	00002349 	.word	0x00002349
    13f8:	2000029b 	.word	0x2000029b

000013fc <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    13fc:	b510      	push	{r4, lr}
	spi_reset(&sd_mmc_master);
    13fe:	4802      	ldr	r0, [pc, #8]	; (1408 <sd_mmc_deinit+0xc>)
    1400:	4b02      	ldr	r3, [pc, #8]	; (140c <sd_mmc_deinit+0x10>)
    1402:	4798      	blx	r3
}
    1404:	bd10      	pop	{r4, pc}
    1406:	46c0      	nop			; (mov r8, r8)
    1408:	20000258 	.word	0x20000258
    140c:	0000206d 	.word	0x0000206d

00001410 <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    1410:	b570      	push	{r4, r5, r6, lr}
    1412:	b090      	sub	sp, #64	; 0x40
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1414:	2300      	movs	r3, #0
    1416:	4a2d      	ldr	r2, [pc, #180]	; (14cc <sd_mmc_spi_init+0xbc>)
    1418:	7013      	strb	r3, [r2, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    141a:	ac02      	add	r4, sp, #8
    141c:	2501      	movs	r5, #1
    141e:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1420:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1422:	9304      	str	r3, [sp, #16]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1424:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    1426:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    1428:	74a5      	strb	r5, [r4, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    142a:	74e5      	strb	r5, [r4, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    142c:	7523      	strb	r3, [r4, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    142e:	2224      	movs	r2, #36	; 0x24
    1430:	54a3      	strb	r3, [r4, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1432:	3a18      	subs	r2, #24
    1434:	2100      	movs	r1, #0
    1436:	a808      	add	r0, sp, #32
    1438:	4b25      	ldr	r3, [pc, #148]	; (14d0 <sd_mmc_spi_init+0xc0>)
    143a:	4798      	blx	r3

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    143c:	2380      	movs	r3, #128	; 0x80
    143e:	025b      	lsls	r3, r3, #9
    1440:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    1442:	4b24      	ldr	r3, [pc, #144]	; (14d4 <sd_mmc_spi_init+0xc4>)
    1444:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    1446:	4b24      	ldr	r3, [pc, #144]	; (14d8 <sd_mmc_spi_init+0xc8>)
    1448:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    144a:	4b24      	ldr	r3, [pc, #144]	; (14dc <sd_mmc_spi_init+0xcc>)
    144c:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    144e:	4b24      	ldr	r3, [pc, #144]	; (14e0 <sd_mmc_spi_init+0xd0>)
    1450:	6363      	str	r3, [r4, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    1452:	4b24      	ldr	r3, [pc, #144]	; (14e4 <sd_mmc_spi_init+0xd4>)
    1454:	61a3      	str	r3, [r4, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    1456:	4e24      	ldr	r6, [pc, #144]	; (14e8 <sd_mmc_spi_init+0xd8>)
    1458:	0022      	movs	r2, r4
    145a:	4924      	ldr	r1, [pc, #144]	; (14ec <sd_mmc_spi_init+0xdc>)
    145c:	0030      	movs	r0, r6
    145e:	4b24      	ldr	r3, [pc, #144]	; (14f0 <sd_mmc_spi_init+0xe0>)
    1460:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1462:	6834      	ldr	r4, [r6, #0]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1464:	0020      	movs	r0, r4
    1466:	4b23      	ldr	r3, [pc, #140]	; (14f4 <sd_mmc_spi_init+0xe4>)
    1468:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    146a:	231f      	movs	r3, #31
    146c:	4018      	ands	r0, r3
    146e:	4085      	lsls	r5, r0
    1470:	4b21      	ldr	r3, [pc, #132]	; (14f8 <sd_mmc_spi_init+0xe8>)
    1472:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    1474:	6832      	ldr	r2, [r6, #0]
	return (spi_module->SYNCBUSY.reg);
    1476:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    1478:	2b00      	cmp	r3, #0
    147a:	d1fc      	bne.n	1476 <sd_mmc_spi_init+0x66>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    147c:	6823      	ldr	r3, [r4, #0]
    147e:	2202      	movs	r2, #2
    1480:	4313      	orrs	r3, r2
    1482:	6023      	str	r3, [r4, #0]
	config->address_enabled = false;
    1484:	4a1d      	ldr	r2, [pc, #116]	; (14fc <sd_mmc_spi_init+0xec>)
    1486:	2300      	movs	r3, #0
    1488:	7053      	strb	r3, [r2, #1]
	config->address         = 0;
    148a:	7093      	strb	r3, [r2, #2]
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    148c:	491c      	ldr	r1, [pc, #112]	; (1500 <sd_mmc_spi_init+0xf0>)
    148e:	7808      	ldrb	r0, [r1, #0]
    1490:	7010      	strb	r0, [r2, #0]
	slave->ss_pin          = config->ss_pin;
    1492:	4c1c      	ldr	r4, [pc, #112]	; (1504 <sd_mmc_spi_init+0xf4>)
    1494:	7020      	strb	r0, [r4, #0]
	slave->address_enabled = config->address_enabled;
    1496:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
    1498:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    149a:	a901      	add	r1, sp, #4
    149c:	2201      	movs	r2, #1
    149e:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    14a0:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    14a2:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    14a4:	4b18      	ldr	r3, [pc, #96]	; (1508 <sd_mmc_spi_init+0xf8>)
    14a6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    14a8:	7822      	ldrb	r2, [r4, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    14aa:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    14ac:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    14ae:	2900      	cmp	r1, #0
    14b0:	d104      	bne.n	14bc <sd_mmc_spi_init+0xac>
		return &(ports[port_index]->Group[group_index]);
    14b2:	0953      	lsrs	r3, r2, #5
    14b4:	01db      	lsls	r3, r3, #7
    14b6:	4915      	ldr	r1, [pc, #84]	; (150c <sd_mmc_spi_init+0xfc>)
    14b8:	468c      	mov	ip, r1
    14ba:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14bc:	211f      	movs	r1, #31
    14be:	4011      	ands	r1, r2
    14c0:	2201      	movs	r2, #1
    14c2:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    14c4:	619a      	str	r2, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    14c6:	b010      	add	sp, #64	; 0x40
    14c8:	bd70      	pop	{r4, r5, r6, pc}
    14ca:	46c0      	nop			; (mov r8, r8)
    14cc:	2000029b 	.word	0x2000029b
    14d0:	000061a1 	.word	0x000061a1
    14d4:	00100002 	.word	0x00100002
    14d8:	00110002 	.word	0x00110002
    14dc:	00120002 	.word	0x00120002
    14e0:	00130002 	.word	0x00130002
    14e4:	00061a80 	.word	0x00061a80
    14e8:	20000258 	.word	0x20000258
    14ec:	42000c00 	.word	0x42000c00
    14f0:	00002171 	.word	0x00002171
    14f4:	00001fdd 	.word	0x00001fdd
    14f8:	e000e100 	.word	0xe000e100
    14fc:	200002a8 	.word	0x200002a8
    1500:	2000000c 	.word	0x2000000c
    1504:	20000298 	.word	0x20000298
    1508:	00001a2d 	.word	0x00001a2d
    150c:	41004400 	.word	0x41004400

00001510 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    1510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1512:	0007      	movs	r7, r0
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1514:	2200      	movs	r2, #0
    1516:	4b0d      	ldr	r3, [pc, #52]	; (154c <sd_mmc_spi_select_device+0x3c>)
    1518:	701a      	strb	r2, [r3, #0]
    151a:	000c      	movs	r4, r1
    151c:	4b0c      	ldr	r3, [pc, #48]	; (1550 <sd_mmc_spi_select_device+0x40>)
    151e:	4299      	cmp	r1, r3
    1520:	d900      	bls.n	1524 <sd_mmc_spi_select_device+0x14>
    1522:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    1524:	4d0b      	ldr	r5, [pc, #44]	; (1554 <sd_mmc_spi_select_device+0x44>)
    1526:	4e0c      	ldr	r6, [pc, #48]	; (1558 <sd_mmc_spi_select_device+0x48>)
    1528:	e001      	b.n	152e <sd_mmc_spi_select_device+0x1e>
		clock -= clock / 8;
    152a:	08e3      	lsrs	r3, r4, #3
    152c:	1ae4      	subs	r4, r4, r3
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    152e:	0021      	movs	r1, r4
    1530:	0028      	movs	r0, r5
    1532:	47b0      	blx	r6
    1534:	2817      	cmp	r0, #23
    1536:	d0f8      	beq.n	152a <sd_mmc_spi_select_device+0x1a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    1538:	0079      	lsls	r1, r7, #1
    153a:	19cf      	adds	r7, r1, r7
    153c:	4907      	ldr	r1, [pc, #28]	; (155c <sd_mmc_spi_select_device+0x4c>)
    153e:	19c9      	adds	r1, r1, r7
    1540:	2201      	movs	r2, #1
    1542:	4804      	ldr	r0, [pc, #16]	; (1554 <sd_mmc_spi_select_device+0x44>)
    1544:	4b06      	ldr	r3, [pc, #24]	; (1560 <sd_mmc_spi_select_device+0x50>)
    1546:	4798      	blx	r3
}
    1548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    154a:	46c0      	nop			; (mov r8, r8)
    154c:	2000029b 	.word	0x2000029b
    1550:	00989680 	.word	0x00989680
    1554:	20000258 	.word	0x20000258
    1558:	000020b9 	.word	0x000020b9
    155c:	20000298 	.word	0x20000298
    1560:	0000241d 	.word	0x0000241d

00001564 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    1564:	b510      	push	{r4, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1566:	2200      	movs	r2, #0
    1568:	4b04      	ldr	r3, [pc, #16]	; (157c <sd_mmc_spi_deselect_device+0x18>)
    156a:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    156c:	0041      	lsls	r1, r0, #1
    156e:	1808      	adds	r0, r1, r0
    1570:	4903      	ldr	r1, [pc, #12]	; (1580 <sd_mmc_spi_deselect_device+0x1c>)
    1572:	1809      	adds	r1, r1, r0
    1574:	4803      	ldr	r0, [pc, #12]	; (1584 <sd_mmc_spi_deselect_device+0x20>)
    1576:	4b04      	ldr	r3, [pc, #16]	; (1588 <sd_mmc_spi_deselect_device+0x24>)
    1578:	4798      	blx	r3
}
    157a:	bd10      	pop	{r4, pc}
    157c:	2000029b 	.word	0x2000029b
    1580:	20000298 	.word	0x20000298
    1584:	20000258 	.word	0x20000258
    1588:	0000241d 	.word	0x0000241d

0000158c <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    158c:	b570      	push	{r4, r5, r6, lr}
    158e:	b082      	sub	sp, #8
	uint8_t i;
	uint8_t dummy = 0xFF;
    1590:	22ff      	movs	r2, #255	; 0xff
    1592:	466b      	mov	r3, sp
    1594:	71da      	strb	r2, [r3, #7]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1596:	2200      	movs	r2, #0
    1598:	4b07      	ldr	r3, [pc, #28]	; (15b8 <sd_mmc_spi_send_clock+0x2c>)
    159a:	701a      	strb	r2, [r3, #0]
    159c:	240a      	movs	r4, #10
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    159e:	4e07      	ldr	r6, [pc, #28]	; (15bc <sd_mmc_spi_send_clock+0x30>)
    15a0:	4d07      	ldr	r5, [pc, #28]	; (15c0 <sd_mmc_spi_send_clock+0x34>)
    15a2:	2201      	movs	r2, #1
    15a4:	466b      	mov	r3, sp
    15a6:	1dd9      	adds	r1, r3, #7
    15a8:	0030      	movs	r0, r6
    15aa:	47a8      	blx	r5
    15ac:	3c01      	subs	r4, #1
    15ae:	b2e4      	uxtb	r4, r4
	for (i = 0; i < 10; i++) {
    15b0:	2c00      	cmp	r4, #0
    15b2:	d1f6      	bne.n	15a2 <sd_mmc_spi_send_clock+0x16>
	}
}
    15b4:	b002      	add	sp, #8
    15b6:	bd70      	pop	{r4, r5, r6, pc}
    15b8:	2000029b 	.word	0x2000029b
    15bc:	20000258 	.word	0x20000258
    15c0:	00002511 	.word	0x00002511

000015c4 <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    15c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    15c6:	46c6      	mov	lr, r8
    15c8:	b500      	push	{lr}
    15ca:	b086      	sub	sp, #24
    15cc:	4680      	mov	r8, r0
    15ce:	9200      	str	r2, [sp, #0]
    15d0:	9301      	str	r3, [sp, #4]
	uint8_t dummy = 0xFF;
    15d2:	22ff      	movs	r2, #255	; 0xff
    15d4:	230f      	movs	r3, #15
    15d6:	a802      	add	r0, sp, #8
    15d8:	4684      	mov	ip, r0
    15da:	4463      	add	r3, ip
    15dc:	701a      	strb	r2, [r3, #0]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    15de:	2200      	movs	r2, #0
    15e0:	4b53      	ldr	r3, [pc, #332]	; (1730 <sd_mmc_spi_adtc_start+0x16c>)
    15e2:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    15e4:	ab04      	add	r3, sp, #16
    15e6:	323f      	adds	r2, #63	; 0x3f
    15e8:	4640      	mov	r0, r8
    15ea:	4002      	ands	r2, r0
    15ec:	2040      	movs	r0, #64	; 0x40
    15ee:	4302      	orrs	r2, r0
    15f0:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    15f2:	0e0a      	lsrs	r2, r1, #24
    15f4:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    15f6:	0c0a      	lsrs	r2, r1, #16
    15f8:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    15fa:	0a0a      	lsrs	r2, r1, #8
    15fc:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    15fe:	7119      	strb	r1, [r3, #4]
    1600:	2700      	movs	r7, #0
	crc = 0;
    1602:	2300      	movs	r3, #0
		value = *buf++;
    1604:	a904      	add	r1, sp, #16
    1606:	2208      	movs	r2, #8
				crc ^= 0x09;
    1608:	2409      	movs	r4, #9
    160a:	e011      	b.n	1630 <sd_mmc_spi_adtc_start+0x6c>
			value <<= 1;
    160c:	0076      	lsls	r6, r6, #1
    160e:	b2f6      	uxtb	r6, r6
    1610:	3801      	subs	r0, #1
    1612:	b2c0      	uxtb	r0, r0
		for (i = 0; i < 8; i++) {
    1614:	2800      	cmp	r0, #0
    1616:	d008      	beq.n	162a <sd_mmc_spi_adtc_start+0x66>
			crc <<= 1;
    1618:	005b      	lsls	r3, r3, #1
    161a:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    161c:	001d      	movs	r5, r3
    161e:	4075      	eors	r5, r6
    1620:	062d      	lsls	r5, r5, #24
    1622:	d5f3      	bpl.n	160c <sd_mmc_spi_adtc_start+0x48>
				crc ^= 0x09;
    1624:	4063      	eors	r3, r4
    1626:	b2db      	uxtb	r3, r3
    1628:	e7f0      	b.n	160c <sd_mmc_spi_adtc_start+0x48>
    162a:	3701      	adds	r7, #1
	while (size--) {
    162c:	2f05      	cmp	r7, #5
    162e:	d002      	beq.n	1636 <sd_mmc_spi_adtc_start+0x72>
		value = *buf++;
    1630:	5c7e      	ldrb	r6, [r7, r1]
    1632:	0010      	movs	r0, r2
    1634:	e7f0      	b.n	1618 <sd_mmc_spi_adtc_start+0x54>
	crc = (crc << 1) | 1;
    1636:	005b      	lsls	r3, r3, #1
    1638:	2201      	movs	r2, #1
    163a:	4313      	orrs	r3, r2
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    163c:	ac04      	add	r4, sp, #16
    163e:	7163      	strb	r3, [r4, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    1640:	4e3c      	ldr	r6, [pc, #240]	; (1734 <sd_mmc_spi_adtc_start+0x170>)
    1642:	2201      	movs	r2, #1
    1644:	210f      	movs	r1, #15
    1646:	ab02      	add	r3, sp, #8
    1648:	469c      	mov	ip, r3
    164a:	4461      	add	r1, ip
    164c:	0030      	movs	r0, r6
    164e:	4f3a      	ldr	r7, [pc, #232]	; (1738 <sd_mmc_spi_adtc_start+0x174>)
    1650:	47b8      	blx	r7
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    1652:	2206      	movs	r2, #6
    1654:	0021      	movs	r1, r4
    1656:	0030      	movs	r0, r6
    1658:	47b8      	blx	r7

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    165a:	ab02      	add	r3, sp, #8
    165c:	1dd9      	adds	r1, r3, #7
    165e:	23ff      	movs	r3, #255	; 0xff
    1660:	700b      	strb	r3, [r1, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    1662:	2201      	movs	r2, #1
    1664:	0030      	movs	r0, r6
    1666:	4e35      	ldr	r6, [pc, #212]	; (173c <sd_mmc_spi_adtc_start+0x178>)
    1668:	47b0      	blx	r6
    166a:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    166c:	ab02      	add	r3, sp, #8
    166e:	1dde      	adds	r6, r3, #7
    1670:	4f30      	ldr	r7, [pc, #192]	; (1734 <sd_mmc_spi_adtc_start+0x170>)
    1672:	4d32      	ldr	r5, [pc, #200]	; (173c <sd_mmc_spi_adtc_start+0x178>)
    1674:	23ff      	movs	r3, #255	; 0xff
    1676:	2201      	movs	r2, #1
    1678:	0031      	movs	r1, r6
    167a:	0038      	movs	r0, r7
    167c:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    167e:	7833      	ldrb	r3, [r6, #0]
    1680:	b25a      	sxtb	r2, r3
    1682:	2a00      	cmp	r2, #0
    1684:	da0b      	bge.n	169e <sd_mmc_spi_adtc_start+0xda>
    1686:	3c01      	subs	r4, #1
    1688:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    168a:	2c00      	cmp	r4, #0
    168c:	d1f2      	bne.n	1674 <sd_mmc_spi_adtc_start+0xb0>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    168e:	2202      	movs	r2, #2
    1690:	4b27      	ldr	r3, [pc, #156]	; (1730 <sd_mmc_spi_adtc_start+0x16c>)
    1692:	701a      	strb	r2, [r3, #0]
			return false;
    1694:	2000      	movs	r0, #0

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    1696:	b006      	add	sp, #24
    1698:	bc04      	pop	{r2}
    169a:	4690      	mov	r8, r2
    169c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_spi_response_32 = r1;
    169e:	4a28      	ldr	r2, [pc, #160]	; (1740 <sd_mmc_spi_adtc_start+0x17c>)
    16a0:	6013      	str	r3, [r2, #0]
	if (r1 & R1_SPI_COM_CRC) {
    16a2:	071a      	lsls	r2, r3, #28
    16a4:	d41a      	bmi.n	16dc <sd_mmc_spi_adtc_start+0x118>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    16a6:	075a      	lsls	r2, r3, #29
    16a8:	d41d      	bmi.n	16e6 <sd_mmc_spi_adtc_start+0x122>
	if (r1 & ~R1_SPI_IDLE) {
    16aa:	2201      	movs	r2, #1
    16ac:	4393      	bics	r3, r2
    16ae:	d11f      	bne.n	16f0 <sd_mmc_spi_adtc_start+0x12c>
	if (cmd & SDMMC_RESP_BUSY) {
    16b0:	4643      	mov	r3, r8
    16b2:	049b      	lsls	r3, r3, #18
    16b4:	d420      	bmi.n	16f8 <sd_mmc_spi_adtc_start+0x134>
	if (cmd & SDMMC_RESP_8) {
    16b6:	4643      	mov	r3, r8
    16b8:	059b      	lsls	r3, r3, #22
    16ba:	d425      	bmi.n	1708 <sd_mmc_spi_adtc_start+0x144>
	if (cmd & SDMMC_RESP_32) {
    16bc:	4643      	mov	r3, r8
    16be:	055b      	lsls	r3, r3, #21
    16c0:	d42b      	bmi.n	171a <sd_mmc_spi_adtc_start+0x156>
	sd_mmc_spi_block_size = block_size;
    16c2:	4b20      	ldr	r3, [pc, #128]	; (1744 <sd_mmc_spi_adtc_start+0x180>)
    16c4:	466a      	mov	r2, sp
    16c6:	8812      	ldrh	r2, [r2, #0]
    16c8:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    16ca:	4b1f      	ldr	r3, [pc, #124]	; (1748 <sd_mmc_spi_adtc_start+0x184>)
    16cc:	466a      	mov	r2, sp
    16ce:	8892      	ldrh	r2, [r2, #4]
    16d0:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    16d2:	2200      	movs	r2, #0
    16d4:	4b1d      	ldr	r3, [pc, #116]	; (174c <sd_mmc_spi_adtc_start+0x188>)
    16d6:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    16d8:	2001      	movs	r0, #1
    16da:	e7dc      	b.n	1696 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    16dc:	2206      	movs	r2, #6
    16de:	4b14      	ldr	r3, [pc, #80]	; (1730 <sd_mmc_spi_adtc_start+0x16c>)
    16e0:	701a      	strb	r2, [r3, #0]
		return false;
    16e2:	2000      	movs	r0, #0
    16e4:	e7d7      	b.n	1696 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    16e6:	2209      	movs	r2, #9
    16e8:	4b11      	ldr	r3, [pc, #68]	; (1730 <sd_mmc_spi_adtc_start+0x16c>)
    16ea:	701a      	strb	r2, [r3, #0]
		return false;
    16ec:	2000      	movs	r0, #0
    16ee:	e7d2      	b.n	1696 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    16f0:	4b0f      	ldr	r3, [pc, #60]	; (1730 <sd_mmc_spi_adtc_start+0x16c>)
    16f2:	701a      	strb	r2, [r3, #0]
		return false;
    16f4:	2000      	movs	r0, #0
    16f6:	e7ce      	b.n	1696 <sd_mmc_spi_adtc_start+0xd2>
		if (!sd_mmc_spi_wait_busy()) {
    16f8:	4b15      	ldr	r3, [pc, #84]	; (1750 <sd_mmc_spi_adtc_start+0x18c>)
    16fa:	4798      	blx	r3
    16fc:	2800      	cmp	r0, #0
    16fe:	d1da      	bne.n	16b6 <sd_mmc_spi_adtc_start+0xf2>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    1700:	2203      	movs	r2, #3
    1702:	4b0b      	ldr	r3, [pc, #44]	; (1730 <sd_mmc_spi_adtc_start+0x16c>)
    1704:	701a      	strb	r2, [r3, #0]
			return false;
    1706:	e7c6      	b.n	1696 <sd_mmc_spi_adtc_start+0xd2>
		sd_mmc_spi_response_32 = 0;
    1708:	490d      	ldr	r1, [pc, #52]	; (1740 <sd_mmc_spi_adtc_start+0x17c>)
    170a:	2300      	movs	r3, #0
    170c:	600b      	str	r3, [r1, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    170e:	33ff      	adds	r3, #255	; 0xff
    1710:	2201      	movs	r2, #1
    1712:	4808      	ldr	r0, [pc, #32]	; (1734 <sd_mmc_spi_adtc_start+0x170>)
    1714:	4e09      	ldr	r6, [pc, #36]	; (173c <sd_mmc_spi_adtc_start+0x178>)
    1716:	47b0      	blx	r6
    1718:	e7d0      	b.n	16bc <sd_mmc_spi_adtc_start+0xf8>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    171a:	4e09      	ldr	r6, [pc, #36]	; (1740 <sd_mmc_spi_adtc_start+0x17c>)
    171c:	23ff      	movs	r3, #255	; 0xff
    171e:	2204      	movs	r2, #4
    1720:	0031      	movs	r1, r6
    1722:	4804      	ldr	r0, [pc, #16]	; (1734 <sd_mmc_spi_adtc_start+0x170>)
    1724:	4f05      	ldr	r7, [pc, #20]	; (173c <sd_mmc_spi_adtc_start+0x178>)
    1726:	47b8      	blx	r7
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    1728:	6833      	ldr	r3, [r6, #0]
    172a:	ba1b      	rev	r3, r3
    172c:	6033      	str	r3, [r6, #0]
    172e:	e7c8      	b.n	16c2 <sd_mmc_spi_adtc_start+0xfe>
    1730:	2000029b 	.word	0x2000029b
    1734:	20000258 	.word	0x20000258
    1738:	00002511 	.word	0x00002511
    173c:	00002349 	.word	0x00002349
    1740:	200002a0 	.word	0x200002a0
    1744:	20000294 	.word	0x20000294
    1748:	2000029c 	.word	0x2000029c
    174c:	200002a4 	.word	0x200002a4
    1750:	00001245 	.word	0x00001245

00001754 <sd_mmc_spi_send_cmd>:
{
    1754:	b510      	push	{r4, lr}
    1756:	b082      	sub	sp, #8
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    1758:	2300      	movs	r3, #0
    175a:	9300      	str	r3, [sp, #0]
    175c:	2200      	movs	r2, #0
    175e:	4c02      	ldr	r4, [pc, #8]	; (1768 <sd_mmc_spi_send_cmd+0x14>)
    1760:	47a0      	blx	r4
}
    1762:	b002      	add	sp, #8
    1764:	bd10      	pop	{r4, pc}
    1766:	46c0      	nop			; (mov r8, r8)
    1768:	000015c5 	.word	0x000015c5

0000176c <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    176c:	4b01      	ldr	r3, [pc, #4]	; (1774 <sd_mmc_spi_get_response+0x8>)
    176e:	6818      	ldr	r0, [r3, #0]
}
    1770:	4770      	bx	lr
    1772:	46c0      	nop			; (mov r8, r8)
    1774:	200002a0 	.word	0x200002a0

00001778 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    1778:	b510      	push	{r4, lr}
    177a:	b084      	sub	sp, #16
    177c:	9001      	str	r0, [sp, #4]
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    177e:	2200      	movs	r2, #0
    1780:	4b14      	ldr	r3, [pc, #80]	; (17d4 <sd_mmc_spi_read_word+0x5c>)
    1782:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    1784:	4b14      	ldr	r3, [pc, #80]	; (17d8 <sd_mmc_spi_read_word+0x60>)
    1786:	8819      	ldrh	r1, [r3, #0]
    1788:	4b14      	ldr	r3, [pc, #80]	; (17dc <sd_mmc_spi_read_word+0x64>)
    178a:	6818      	ldr	r0, [r3, #0]
    178c:	4b14      	ldr	r3, [pc, #80]	; (17e0 <sd_mmc_spi_read_word+0x68>)
    178e:	4798      	blx	r3
    1790:	2900      	cmp	r1, #0
    1792:	d103      	bne.n	179c <sd_mmc_spi_read_word+0x24>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    1794:	4b13      	ldr	r3, [pc, #76]	; (17e4 <sd_mmc_spi_read_word+0x6c>)
    1796:	4798      	blx	r3
    1798:	2800      	cmp	r0, #0
    179a:	d010      	beq.n	17be <sd_mmc_spi_read_word+0x46>
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    179c:	23ff      	movs	r3, #255	; 0xff
    179e:	2204      	movs	r2, #4
    17a0:	a901      	add	r1, sp, #4
    17a2:	4811      	ldr	r0, [pc, #68]	; (17e8 <sd_mmc_spi_read_word+0x70>)
    17a4:	4c11      	ldr	r4, [pc, #68]	; (17ec <sd_mmc_spi_read_word+0x74>)
    17a6:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    17a8:	4b0c      	ldr	r3, [pc, #48]	; (17dc <sd_mmc_spi_read_word+0x64>)
    17aa:	681a      	ldr	r2, [r3, #0]
    17ac:	1d10      	adds	r0, r2, #4
    17ae:	6018      	str	r0, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    17b0:	4b09      	ldr	r3, [pc, #36]	; (17d8 <sd_mmc_spi_read_word+0x60>)
    17b2:	8819      	ldrh	r1, [r3, #0]
    17b4:	4b0a      	ldr	r3, [pc, #40]	; (17e0 <sd_mmc_spi_read_word+0x68>)
    17b6:	4798      	blx	r3
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    17b8:	2001      	movs	r0, #1
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    17ba:	2900      	cmp	r1, #0
    17bc:	d001      	beq.n	17c2 <sd_mmc_spi_read_word+0x4a>
}
    17be:	b004      	add	sp, #16
    17c0:	bd10      	pop	{r4, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    17c2:	23ff      	movs	r3, #255	; 0xff
    17c4:	2202      	movs	r2, #2
    17c6:	a903      	add	r1, sp, #12
    17c8:	4807      	ldr	r0, [pc, #28]	; (17e8 <sd_mmc_spi_read_word+0x70>)
    17ca:	4c08      	ldr	r4, [pc, #32]	; (17ec <sd_mmc_spi_read_word+0x74>)
    17cc:	47a0      	blx	r4
	return true;
    17ce:	2001      	movs	r0, #1
    17d0:	e7f5      	b.n	17be <sd_mmc_spi_read_word+0x46>
    17d2:	46c0      	nop			; (mov r8, r8)
    17d4:	2000029b 	.word	0x2000029b
    17d8:	20000294 	.word	0x20000294
    17dc:	200002a4 	.word	0x200002a4
    17e0:	00005cf1 	.word	0x00005cf1
    17e4:	00001321 	.word	0x00001321
    17e8:	20000258 	.word	0x20000258
    17ec:	00002349 	.word	0x00002349

000017f0 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    17f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17f2:	46de      	mov	lr, fp
    17f4:	4657      	mov	r7, sl
    17f6:	4646      	mov	r6, r8
    17f8:	b5c0      	push	{r6, r7, lr}
    17fa:	b082      	sub	sp, #8
    17fc:	4683      	mov	fp, r0
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    17fe:	2200      	movs	r2, #0
    1800:	4b17      	ldr	r3, [pc, #92]	; (1860 <sd_mmc_spi_start_read_blocks+0x70>)
    1802:	701a      	strb	r2, [r3, #0]
	pos = 0;
	while (nb_block--) {
    1804:	1e4c      	subs	r4, r1, #1
    1806:	b2a4      	uxth	r4, r4
    1808:	2900      	cmp	r1, #0
    180a:	d026      	beq.n	185a <sd_mmc_spi_start_read_blocks+0x6a>
    180c:	2600      	movs	r6, #0
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    180e:	4b15      	ldr	r3, [pc, #84]	; (1864 <sd_mmc_spi_start_read_blocks+0x74>)
    1810:	469a      	mov	sl, r3
			return false;
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    1812:	4f15      	ldr	r7, [pc, #84]	; (1868 <sd_mmc_spi_start_read_blocks+0x78>)
		if (!sd_mmc_spi_start_read_block()) {
    1814:	47d0      	blx	sl
    1816:	4680      	mov	r8, r0
    1818:	2800      	cmp	r0, #0
    181a:	d017      	beq.n	184c <sd_mmc_spi_start_read_blocks+0x5c>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    181c:	883a      	ldrh	r2, [r7, #0]
    181e:	465b      	mov	r3, fp
    1820:	1999      	adds	r1, r3, r6
    1822:	23ff      	movs	r3, #255	; 0xff
    1824:	4811      	ldr	r0, [pc, #68]	; (186c <sd_mmc_spi_start_read_blocks+0x7c>)
    1826:	4d12      	ldr	r5, [pc, #72]	; (1870 <sd_mmc_spi_start_read_blocks+0x80>)
    1828:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    182a:	883b      	ldrh	r3, [r7, #0]
    182c:	18f6      	adds	r6, r6, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    182e:	4a11      	ldr	r2, [pc, #68]	; (1874 <sd_mmc_spi_start_read_blocks+0x84>)
    1830:	6811      	ldr	r1, [r2, #0]
    1832:	468c      	mov	ip, r1
    1834:	4463      	add	r3, ip
    1836:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    1838:	23ff      	movs	r3, #255	; 0xff
    183a:	2202      	movs	r2, #2
    183c:	a901      	add	r1, sp, #4
    183e:	480b      	ldr	r0, [pc, #44]	; (186c <sd_mmc_spi_start_read_blocks+0x7c>)
    1840:	47a8      	blx	r5
	while (nb_block--) {
    1842:	3c01      	subs	r4, #1
    1844:	b2a4      	uxth	r4, r4
    1846:	4b0c      	ldr	r3, [pc, #48]	; (1878 <sd_mmc_spi_start_read_blocks+0x88>)
    1848:	429c      	cmp	r4, r3
    184a:	d1e3      	bne.n	1814 <sd_mmc_spi_start_read_blocks+0x24>

		sd_mmc_spi_stop_read_block();
	}
	return true;
}
    184c:	4640      	mov	r0, r8
    184e:	b002      	add	sp, #8
    1850:	bc1c      	pop	{r2, r3, r4}
    1852:	4690      	mov	r8, r2
    1854:	469a      	mov	sl, r3
    1856:	46a3      	mov	fp, r4
    1858:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
    185a:	2301      	movs	r3, #1
    185c:	4698      	mov	r8, r3
    185e:	e7f5      	b.n	184c <sd_mmc_spi_start_read_blocks+0x5c>
    1860:	2000029b 	.word	0x2000029b
    1864:	00001321 	.word	0x00001321
    1868:	20000294 	.word	0x20000294
    186c:	20000258 	.word	0x20000258
    1870:	00002349 	.word	0x00002349
    1874:	200002a4 	.word	0x200002a4
    1878:	0000ffff 	.word	0x0000ffff

0000187c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    187c:	2001      	movs	r0, #1
    187e:	4770      	bx	lr

00001880 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    1880:	b5f0      	push	{r4, r5, r6, r7, lr}
    1882:	46c6      	mov	lr, r8
    1884:	b500      	push	{lr}
    1886:	4680      	mov	r8, r0
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    1888:	2200      	movs	r2, #0
    188a:	4b15      	ldr	r3, [pc, #84]	; (18e0 <sd_mmc_spi_start_write_blocks+0x60>)
    188c:	701a      	strb	r2, [r3, #0]
	pos = 0;
    188e:	2500      	movs	r5, #0
	while (nb_block--) {
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    1890:	4f14      	ldr	r7, [pc, #80]	; (18e4 <sd_mmc_spi_start_write_blocks+0x64>)

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    1892:	4e15      	ldr	r6, [pc, #84]	; (18e8 <sd_mmc_spi_start_write_blocks+0x68>)
	while (nb_block--) {
    1894:	e000      	b.n	1898 <sd_mmc_spi_start_write_blocks+0x18>
{
    1896:	0021      	movs	r1, r4
	while (nb_block--) {
    1898:	1e4c      	subs	r4, r1, #1
    189a:	b2a4      	uxth	r4, r4
    189c:	2900      	cmp	r1, #0
    189e:	d01b      	beq.n	18d8 <sd_mmc_spi_start_write_blocks+0x58>
		sd_mmc_spi_start_write_block();
    18a0:	47b8      	blx	r7
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    18a2:	8832      	ldrh	r2, [r6, #0]
    18a4:	4643      	mov	r3, r8
    18a6:	1959      	adds	r1, r3, r5
    18a8:	4810      	ldr	r0, [pc, #64]	; (18ec <sd_mmc_spi_start_write_blocks+0x6c>)
    18aa:	4b11      	ldr	r3, [pc, #68]	; (18f0 <sd_mmc_spi_start_write_blocks+0x70>)
    18ac:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    18ae:	8833      	ldrh	r3, [r6, #0]
    18b0:	18ed      	adds	r5, r5, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    18b2:	4a10      	ldr	r2, [pc, #64]	; (18f4 <sd_mmc_spi_start_write_blocks+0x74>)
    18b4:	6811      	ldr	r1, [r2, #0]
    18b6:	468c      	mov	ip, r1
    18b8:	4463      	add	r3, ip
    18ba:	6013      	str	r3, [r2, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    18bc:	4b0e      	ldr	r3, [pc, #56]	; (18f8 <sd_mmc_spi_start_write_blocks+0x78>)
    18be:	4798      	blx	r3
    18c0:	2800      	cmp	r0, #0
    18c2:	d00a      	beq.n	18da <sd_mmc_spi_start_write_blocks+0x5a>
			return false;
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    18c4:	2c00      	cmp	r4, #0
    18c6:	d0e6      	beq.n	1896 <sd_mmc_spi_start_write_blocks+0x16>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    18c8:	4b0c      	ldr	r3, [pc, #48]	; (18fc <sd_mmc_spi_start_write_blocks+0x7c>)
    18ca:	4798      	blx	r3
    18cc:	2800      	cmp	r0, #0
    18ce:	d1e2      	bne.n	1896 <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    18d0:	2205      	movs	r2, #5
    18d2:	4b03      	ldr	r3, [pc, #12]	; (18e0 <sd_mmc_spi_start_write_blocks+0x60>)
    18d4:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    18d6:	e000      	b.n	18da <sd_mmc_spi_start_write_blocks+0x5a>
			}
		}
	}
	return true;
    18d8:	2001      	movs	r0, #1
}
    18da:	bc04      	pop	{r2}
    18dc:	4690      	mov	r8, r2
    18de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18e0:	2000029b 	.word	0x2000029b
    18e4:	000011fd 	.word	0x000011fd
    18e8:	20000294 	.word	0x20000294
    18ec:	20000258 	.word	0x20000258
    18f0:	00002511 	.word	0x00002511
    18f4:	200002a4 	.word	0x200002a4
    18f8:	0000138d 	.word	0x0000138d
    18fc:	00001245 	.word	0x00001245

00001900 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    1900:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    1902:	4b05      	ldr	r3, [pc, #20]	; (1918 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    1904:	4798      	blx	r3
    1906:	2800      	cmp	r0, #0
    1908:	d103      	bne.n	1912 <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    190a:	2205      	movs	r2, #5
    190c:	4b03      	ldr	r3, [pc, #12]	; (191c <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    190e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    1910:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    1912:	4b03      	ldr	r3, [pc, #12]	; (1920 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    1914:	4798      	blx	r3
    1916:	e7fb      	b.n	1910 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    1918:	00001245 	.word	0x00001245
    191c:	2000029b 	.word	0x2000029b
    1920:	000012a9 	.word	0x000012a9

00001924 <delay_init>:
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
}
    1924:	4770      	bx	lr
	...

00001928 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    1928:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    192a:	2301      	movs	r3, #1
    192c:	2800      	cmp	r0, #0
    192e:	d001      	beq.n	1934 <mem_test_unit_ready+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    1930:	0018      	movs	r0, r3
    1932:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    1934:	4b01      	ldr	r3, [pc, #4]	; (193c <mem_test_unit_ready+0x14>)
    1936:	4798      	blx	r3
    1938:	0003      	movs	r3, r0
    193a:	e7f9      	b.n	1930 <mem_test_unit_ready+0x8>
    193c:	000010fd 	.word	0x000010fd

00001940 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    1940:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    1942:	2301      	movs	r3, #1
    1944:	2800      	cmp	r0, #0
    1946:	d001      	beq.n	194c <mem_read_capacity+0xc>
#endif

  Ctrl_access_unlock();

  return status;
}
    1948:	0018      	movs	r0, r3
    194a:	bd10      	pop	{r4, pc}
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    194c:	0008      	movs	r0, r1
    194e:	4b02      	ldr	r3, [pc, #8]	; (1958 <mem_read_capacity+0x18>)
    1950:	4798      	blx	r3
    1952:	0003      	movs	r3, r0
    1954:	e7f8      	b.n	1948 <mem_read_capacity+0x8>
    1956:	46c0      	nop			; (mov r8, r8)
    1958:	0000112d 	.word	0x0000112d

0000195c <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    195c:	4243      	negs	r3, r0
    195e:	4158      	adcs	r0, r3
    1960:	b2c0      	uxtb	r0, r0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    1962:	4770      	bx	lr

00001964 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    1964:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    1966:	2301      	movs	r3, #1
    1968:	2800      	cmp	r0, #0
    196a:	d001      	beq.n	1970 <mem_wr_protect+0xc>
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    196c:	0018      	movs	r0, r3
    196e:	bd10      	pop	{r4, pc}
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    1970:	4b01      	ldr	r3, [pc, #4]	; (1978 <mem_wr_protect+0x14>)
    1972:	4798      	blx	r3
    1974:	0003      	movs	r3, r0
    1976:	e7f9      	b.n	196c <mem_wr_protect+0x8>
    1978:	0000113d 	.word	0x0000113d

0000197c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    197c:	b510      	push	{r4, lr}
    197e:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    1980:	2301      	movs	r3, #1
    1982:	2800      	cmp	r0, #0
    1984:	d001      	beq.n	198a <memory_2_ram+0xe>
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    1986:	0018      	movs	r0, r3
    1988:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    198a:	0011      	movs	r1, r2
    198c:	0020      	movs	r0, r4
    198e:	4b02      	ldr	r3, [pc, #8]	; (1998 <memory_2_ram+0x1c>)
    1990:	4798      	blx	r3
    1992:	0003      	movs	r3, r0
    1994:	e7f7      	b.n	1986 <memory_2_ram+0xa>
    1996:	46c0      	nop			; (mov r8, r8)
    1998:	00001191 	.word	0x00001191

0000199c <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    199c:	b510      	push	{r4, lr}
    199e:	000c      	movs	r4, r1
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    19a0:	2301      	movs	r3, #1
    19a2:	2800      	cmp	r0, #0
    19a4:	d001      	beq.n	19aa <ram_2_memory+0xe>
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    19a6:	0018      	movs	r0, r3
    19a8:	bd10      	pop	{r4, pc}
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    19aa:	0011      	movs	r1, r2
    19ac:	0020      	movs	r0, r4
    19ae:	4b02      	ldr	r3, [pc, #8]	; (19b8 <ram_2_memory+0x1c>)
    19b0:	4798      	blx	r3
    19b2:	0003      	movs	r3, r0
    19b4:	e7f7      	b.n	19a6 <ram_2_memory+0xa>
    19b6:	46c0      	nop			; (mov r8, r8)
    19b8:	000011e9 	.word	0x000011e9

000019bc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    19bc:	4b0c      	ldr	r3, [pc, #48]	; (19f0 <cpu_irq_enter_critical+0x34>)
    19be:	681b      	ldr	r3, [r3, #0]
    19c0:	2b00      	cmp	r3, #0
    19c2:	d106      	bne.n	19d2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    19c4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    19c8:	2b00      	cmp	r3, #0
    19ca:	d007      	beq.n	19dc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    19cc:	2200      	movs	r2, #0
    19ce:	4b09      	ldr	r3, [pc, #36]	; (19f4 <cpu_irq_enter_critical+0x38>)
    19d0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    19d2:	4a07      	ldr	r2, [pc, #28]	; (19f0 <cpu_irq_enter_critical+0x34>)
    19d4:	6813      	ldr	r3, [r2, #0]
    19d6:	3301      	adds	r3, #1
    19d8:	6013      	str	r3, [r2, #0]
}
    19da:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    19dc:	b672      	cpsid	i
    19de:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    19e2:	2200      	movs	r2, #0
    19e4:	4b04      	ldr	r3, [pc, #16]	; (19f8 <cpu_irq_enter_critical+0x3c>)
    19e6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    19e8:	3201      	adds	r2, #1
    19ea:	4b02      	ldr	r3, [pc, #8]	; (19f4 <cpu_irq_enter_critical+0x38>)
    19ec:	701a      	strb	r2, [r3, #0]
    19ee:	e7f0      	b.n	19d2 <cpu_irq_enter_critical+0x16>
    19f0:	200002ac 	.word	0x200002ac
    19f4:	200002b0 	.word	0x200002b0
    19f8:	2000000d 	.word	0x2000000d

000019fc <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    19fc:	4b08      	ldr	r3, [pc, #32]	; (1a20 <cpu_irq_leave_critical+0x24>)
    19fe:	681a      	ldr	r2, [r3, #0]
    1a00:	3a01      	subs	r2, #1
    1a02:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1a04:	681b      	ldr	r3, [r3, #0]
    1a06:	2b00      	cmp	r3, #0
    1a08:	d109      	bne.n	1a1e <cpu_irq_leave_critical+0x22>
    1a0a:	4b06      	ldr	r3, [pc, #24]	; (1a24 <cpu_irq_leave_critical+0x28>)
    1a0c:	781b      	ldrb	r3, [r3, #0]
    1a0e:	2b00      	cmp	r3, #0
    1a10:	d005      	beq.n	1a1e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1a12:	2201      	movs	r2, #1
    1a14:	4b04      	ldr	r3, [pc, #16]	; (1a28 <cpu_irq_leave_critical+0x2c>)
    1a16:	701a      	strb	r2, [r3, #0]
    1a18:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1a1c:	b662      	cpsie	i
	}
}
    1a1e:	4770      	bx	lr
    1a20:	200002ac 	.word	0x200002ac
    1a24:	200002b0 	.word	0x200002b0
    1a28:	2000000d 	.word	0x2000000d

00001a2c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1a2c:	b500      	push	{lr}
    1a2e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1a30:	ab01      	add	r3, sp, #4
    1a32:	2280      	movs	r2, #128	; 0x80
    1a34:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1a36:	780a      	ldrb	r2, [r1, #0]
    1a38:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1a3a:	784a      	ldrb	r2, [r1, #1]
    1a3c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1a3e:	788a      	ldrb	r2, [r1, #2]
    1a40:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1a42:	0019      	movs	r1, r3
    1a44:	4b01      	ldr	r3, [pc, #4]	; (1a4c <port_pin_set_config+0x20>)
    1a46:	4798      	blx	r3
}
    1a48:	b003      	add	sp, #12
    1a4a:	bd00      	pop	{pc}
    1a4c:	000034b9 	.word	0x000034b9

00001a50 <rtc_calendar_enable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1a50:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1a52:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1a54:	b25b      	sxtb	r3, r3
    1a56:	2b00      	cmp	r3, #0
    1a58:	dbfb      	blt.n	1a52 <rtc_calendar_enable+0x2>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    1a5a:	8813      	ldrh	r3, [r2, #0]
    1a5c:	2102      	movs	r1, #2
    1a5e:	430b      	orrs	r3, r1
    1a60:	8013      	strh	r3, [r2, #0]
}
    1a62:	4770      	bx	lr

00001a64 <rtc_calendar_disable>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1a64:	6802      	ldr	r2, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1a66:	7a93      	ldrb	r3, [r2, #10]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    1a68:	b25b      	sxtb	r3, r3
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	dbfb      	blt.n	1a66 <rtc_calendar_disable+0x2>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    1a6e:	23c1      	movs	r3, #193	; 0xc1
    1a70:	7193      	strb	r3, [r2, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    1a72:	7213      	strb	r3, [r2, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    1a74:	8813      	ldrh	r3, [r2, #0]
    1a76:	2102      	movs	r1, #2
    1a78:	438b      	bics	r3, r1
    1a7a:	8013      	strh	r3, [r2, #0]
}
    1a7c:	4770      	bx	lr
	...

00001a80 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    1a80:	b570      	push	{r4, r5, r6, lr}
    1a82:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1a84:	6805      	ldr	r5, [r0, #0]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    1a86:	4b06      	ldr	r3, [pc, #24]	; (1aa0 <rtc_calendar_reset+0x20>)
    1a88:	4798      	blx	r3
	Rtc *const rtc_module = module->hw;
    1a8a:	6822      	ldr	r2, [r4, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1a8c:	7a93      	ldrb	r3, [r2, #10]
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    1a8e:	b25b      	sxtb	r3, r3
    1a90:	2b00      	cmp	r3, #0
    1a92:	dbfb      	blt.n	1a8c <rtc_calendar_reset+0xc>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    1a94:	882b      	ldrh	r3, [r5, #0]
    1a96:	2201      	movs	r2, #1
    1a98:	4313      	orrs	r3, r2
    1a9a:	802b      	strh	r3, [r5, #0]
}
    1a9c:	bd70      	pop	{r4, r5, r6, pc}
    1a9e:	46c0      	nop			; (mov r8, r8)
    1aa0:	00001a65 	.word	0x00001a65

00001aa4 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    1aa4:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    1aa6:	88cb      	ldrh	r3, [r1, #6]
    1aa8:	88c2      	ldrh	r2, [r0, #6]
    1aaa:	1a9a      	subs	r2, r3, r2
    1aac:	0692      	lsls	r2, r2, #26
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    1aae:	794b      	ldrb	r3, [r1, #5]
    1ab0:	059b      	lsls	r3, r3, #22

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    1ab2:	790c      	ldrb	r4, [r1, #4]
    1ab4:	0464      	lsls	r4, r4, #17

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    1ab6:	4323      	orrs	r3, r4
    1ab8:	788c      	ldrb	r4, [r1, #2]
    1aba:	0324      	lsls	r4, r4, #12
    1abc:	4323      	orrs	r3, r4
    1abe:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    1ac0:	7902      	ldrb	r2, [r0, #4]
    1ac2:	2a00      	cmp	r2, #0
    1ac4:	d105      	bne.n	1ad2 <rtc_calendar_time_to_register_value+0x2e>
    1ac6:	78ca      	ldrb	r2, [r1, #3]
    1ac8:	2a00      	cmp	r2, #0
    1aca:	d002      	beq.n	1ad2 <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    1acc:	2280      	movs	r2, #128	; 0x80
    1ace:	0252      	lsls	r2, r2, #9
    1ad0:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    1ad2:	7848      	ldrb	r0, [r1, #1]
    1ad4:	0180      	lsls	r0, r0, #6

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    1ad6:	780a      	ldrb	r2, [r1, #0]
    1ad8:	4310      	orrs	r0, r2
    1ada:	4318      	orrs	r0, r3

	return register_value;
}
    1adc:	bd10      	pop	{r4, pc}

00001ade <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    1ade:	b510      	push	{r4, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1ae0:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    1ae2:	88c4      	ldrh	r4, [r0, #6]
    1ae4:	191b      	adds	r3, r3, r4
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    1ae6:	80d3      	strh	r3, [r2, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    1ae8:	018b      	lsls	r3, r1, #6
    1aea:	0f1b      	lsrs	r3, r3, #28
    1aec:	7153      	strb	r3, [r2, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    1aee:	028b      	lsls	r3, r1, #10
    1af0:	0edb      	lsrs	r3, r3, #27
    1af2:	7113      	strb	r3, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    1af4:	7903      	ldrb	r3, [r0, #4]
    1af6:	2b00      	cmp	r3, #0
    1af8:	d10c      	bne.n	1b14 <rtc_calendar_register_value_to_time+0x36>
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    1afa:	040b      	lsls	r3, r1, #16
    1afc:	0f1b      	lsrs	r3, r3, #28
		time->hour = ((register_value &
    1afe:	7093      	strb	r3, [r2, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    1b00:	03cb      	lsls	r3, r1, #15
    1b02:	0fdb      	lsrs	r3, r3, #31
    1b04:	70d3      	strb	r3, [r2, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    1b06:	0988      	lsrs	r0, r1, #6
    1b08:	233f      	movs	r3, #63	; 0x3f
    1b0a:	4018      	ands	r0, r3
    1b0c:	7050      	strb	r0, [r2, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    1b0e:	4019      	ands	r1, r3
    1b10:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    1b12:	bd10      	pop	{r4, pc}
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    1b14:	03cb      	lsls	r3, r1, #15
    1b16:	0edb      	lsrs	r3, r3, #27
    1b18:	7093      	strb	r3, [r2, #2]
    1b1a:	e7f4      	b.n	1b06 <rtc_calendar_register_value_to_time+0x28>

00001b1c <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    1b1c:	b510      	push	{r4, lr}
    1b1e:	000a      	movs	r2, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1b20:	6803      	ldr	r3, [r0, #0]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    1b22:	7941      	ldrb	r1, [r0, #5]
    1b24:	2900      	cmp	r1, #0
    1b26:	d006      	beq.n	1b36 <rtc_calendar_get_time+0x1a>
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;

		while (rtc_calendar_is_syncing(module)) {
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    1b28:	8859      	ldrh	r1, [r3, #2]
    1b2a:	0449      	lsls	r1, r1, #17
    1b2c:	d50b      	bpl.n	1b46 <rtc_calendar_get_time+0x2a>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    1b2e:	6919      	ldr	r1, [r3, #16]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    1b30:	4b0a      	ldr	r3, [pc, #40]	; (1b5c <rtc_calendar_get_time+0x40>)
    1b32:	4798      	blx	r3
}
    1b34:	bd10      	pop	{r4, pc}
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    1b36:	490a      	ldr	r1, [pc, #40]	; (1b60 <rtc_calendar_get_time+0x44>)
    1b38:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1b3a:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1b3c:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1b3e:	b249      	sxtb	r1, r1
    1b40:	2900      	cmp	r1, #0
    1b42:	dbfb      	blt.n	1b3c <rtc_calendar_get_time+0x20>
    1b44:	e7f3      	b.n	1b2e <rtc_calendar_get_time+0x12>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    1b46:	8859      	ldrh	r1, [r3, #2]
    1b48:	24c0      	movs	r4, #192	; 0xc0
    1b4a:	0224      	lsls	r4, r4, #8
    1b4c:	4321      	orrs	r1, r4
    1b4e:	8059      	strh	r1, [r3, #2]
	Rtc *const rtc_module = module->hw;
    1b50:	6804      	ldr	r4, [r0, #0]
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1b52:	7aa1      	ldrb	r1, [r4, #10]
		while (rtc_calendar_is_syncing(module)) {
    1b54:	b249      	sxtb	r1, r1
    1b56:	2900      	cmp	r1, #0
    1b58:	dbfb      	blt.n	1b52 <rtc_calendar_get_time+0x36>
    1b5a:	e7e8      	b.n	1b2e <rtc_calendar_get_time+0x12>
    1b5c:	00001adf 	.word	0x00001adf
    1b60:	ffff8000 	.word	0xffff8000

00001b64 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    1b64:	b570      	push	{r4, r5, r6, lr}
    1b66:	000d      	movs	r5, r1
    1b68:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
    1b6a:	2317      	movs	r3, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    1b6c:	2a01      	cmp	r2, #1
    1b6e:	d901      	bls.n	1b74 <rtc_calendar_set_alarm+0x10>

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;

	return STATUS_OK;
}
    1b70:	0018      	movs	r0, r3
    1b72:	bd70      	pop	{r4, r5, r6, pc}
	Rtc *const rtc_module = module->hw;
    1b74:	6806      	ldr	r6, [r0, #0]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    1b76:	4b06      	ldr	r3, [pc, #24]	; (1b90 <rtc_calendar_set_alarm+0x2c>)
    1b78:	4798      	blx	r3
        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    1b7a:	7ab3      	ldrb	r3, [r6, #10]
	while (rtc_calendar_is_syncing(module)) {
    1b7c:	b25b      	sxtb	r3, r3
    1b7e:	2b00      	cmp	r3, #0
    1b80:	dbfb      	blt.n	1b7a <rtc_calendar_set_alarm+0x16>
    1b82:	00e4      	lsls	r4, r4, #3
    1b84:	1934      	adds	r4, r6, r4
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    1b86:	61a0      	str	r0, [r4, #24]
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    1b88:	7a2b      	ldrb	r3, [r5, #8]
    1b8a:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
    1b8c:	2300      	movs	r3, #0
    1b8e:	e7ef      	b.n	1b70 <rtc_calendar_set_alarm+0xc>
    1b90:	00001aa5 	.word	0x00001aa5

00001b94 <rtc_calendar_init>:
{
    1b94:	b530      	push	{r4, r5, lr}
    1b96:	b083      	sub	sp, #12
    1b98:	0005      	movs	r5, r0
    1b9a:	0014      	movs	r4, r2
	module->hw = hw;
    1b9c:	6001      	str	r1, [r0, #0]
			PM->APBAMASK.reg |= mask;
    1b9e:	4a1c      	ldr	r2, [pc, #112]	; (1c10 <rtc_calendar_init+0x7c>)
    1ba0:	6993      	ldr	r3, [r2, #24]
    1ba2:	2120      	movs	r1, #32
    1ba4:	430b      	orrs	r3, r1
    1ba6:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    1ba8:	a901      	add	r1, sp, #4
    1baa:	2302      	movs	r3, #2
    1bac:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    1bae:	2004      	movs	r0, #4
    1bb0:	4b18      	ldr	r3, [pc, #96]	; (1c14 <rtc_calendar_init+0x80>)
    1bb2:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    1bb4:	2004      	movs	r0, #4
    1bb6:	4b18      	ldr	r3, [pc, #96]	; (1c18 <rtc_calendar_init+0x84>)
    1bb8:	4798      	blx	r3
	rtc_calendar_reset(module);
    1bba:	0028      	movs	r0, r5
    1bbc:	4b17      	ldr	r3, [pc, #92]	; (1c1c <rtc_calendar_init+0x88>)
    1bbe:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
    1bc0:	7923      	ldrb	r3, [r4, #4]
    1bc2:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
    1bc4:	78e3      	ldrb	r3, [r4, #3]
    1bc6:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
    1bc8:	88e3      	ldrh	r3, [r4, #6]
    1bca:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
    1bcc:	4b14      	ldr	r3, [pc, #80]	; (1c20 <rtc_calendar_init+0x8c>)
    1bce:	601d      	str	r5, [r3, #0]
	Rtc *const rtc_module = module->hw;
    1bd0:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1bd2:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
    1bd4:	7921      	ldrb	r1, [r4, #4]
    1bd6:	2900      	cmp	r1, #0
    1bd8:	d017      	beq.n	1c0a <rtc_calendar_init+0x76>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    1bda:	2108      	movs	r1, #8
    1bdc:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
    1bde:	78a1      	ldrb	r1, [r4, #2]
    1be0:	2900      	cmp	r1, #0
    1be2:	d001      	beq.n	1be8 <rtc_calendar_init+0x54>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    1be4:	2180      	movs	r1, #128	; 0x80
    1be6:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    1be8:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
    1bea:	78e3      	ldrb	r3, [r4, #3]
    1bec:	2b00      	cmp	r3, #0
    1bee:	d004      	beq.n	1bfa <rtc_calendar_init+0x66>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    1bf0:	8853      	ldrh	r3, [r2, #2]
    1bf2:	2180      	movs	r1, #128	; 0x80
    1bf4:	01c9      	lsls	r1, r1, #7
    1bf6:	430b      	orrs	r3, r1
    1bf8:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    1bfa:	0021      	movs	r1, r4
    1bfc:	3108      	adds	r1, #8
    1bfe:	2200      	movs	r2, #0
    1c00:	0028      	movs	r0, r5
    1c02:	4b08      	ldr	r3, [pc, #32]	; (1c24 <rtc_calendar_init+0x90>)
    1c04:	4798      	blx	r3
}
    1c06:	b003      	add	sp, #12
    1c08:	bd30      	pop	{r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    1c0a:	2148      	movs	r1, #72	; 0x48
    1c0c:	430b      	orrs	r3, r1
    1c0e:	e7e6      	b.n	1bde <rtc_calendar_init+0x4a>
    1c10:	40000400 	.word	0x40000400
    1c14:	000033c1 	.word	0x000033c1
    1c18:	00003335 	.word	0x00003335
    1c1c:	00001a81 	.word	0x00001a81
    1c20:	20000b70 	.word	0x20000b70
    1c24:	00001b65 	.word	0x00001b65

00001c28 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c2a:	46de      	mov	lr, fp
    1c2c:	4657      	mov	r7, sl
    1c2e:	464e      	mov	r6, r9
    1c30:	4645      	mov	r5, r8
    1c32:	b5e0      	push	{r5, r6, r7, lr}
    1c34:	b087      	sub	sp, #28
    1c36:	4680      	mov	r8, r0
    1c38:	9104      	str	r1, [sp, #16]
    1c3a:	0016      	movs	r6, r2
    1c3c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1c3e:	2200      	movs	r2, #0
    1c40:	2300      	movs	r3, #0
    1c42:	2100      	movs	r1, #0
    1c44:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1c46:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1c48:	2001      	movs	r0, #1
    1c4a:	0021      	movs	r1, r4
    1c4c:	9600      	str	r6, [sp, #0]
    1c4e:	9701      	str	r7, [sp, #4]
    1c50:	465c      	mov	r4, fp
    1c52:	9403      	str	r4, [sp, #12]
    1c54:	4644      	mov	r4, r8
    1c56:	9405      	str	r4, [sp, #20]
    1c58:	e013      	b.n	1c82 <long_division+0x5a>
    1c5a:	2420      	movs	r4, #32
    1c5c:	1a64      	subs	r4, r4, r1
    1c5e:	0005      	movs	r5, r0
    1c60:	40e5      	lsrs	r5, r4
    1c62:	46a8      	mov	r8, r5
    1c64:	e014      	b.n	1c90 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1c66:	9c00      	ldr	r4, [sp, #0]
    1c68:	9d01      	ldr	r5, [sp, #4]
    1c6a:	1b12      	subs	r2, r2, r4
    1c6c:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1c6e:	465c      	mov	r4, fp
    1c70:	464d      	mov	r5, r9
    1c72:	432c      	orrs	r4, r5
    1c74:	46a3      	mov	fp, r4
    1c76:	9c03      	ldr	r4, [sp, #12]
    1c78:	4645      	mov	r5, r8
    1c7a:	432c      	orrs	r4, r5
    1c7c:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1c7e:	3901      	subs	r1, #1
    1c80:	d325      	bcc.n	1cce <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1c82:	2420      	movs	r4, #32
    1c84:	4264      	negs	r4, r4
    1c86:	190c      	adds	r4, r1, r4
    1c88:	d4e7      	bmi.n	1c5a <long_division+0x32>
    1c8a:	0005      	movs	r5, r0
    1c8c:	40a5      	lsls	r5, r4
    1c8e:	46a8      	mov	r8, r5
    1c90:	0004      	movs	r4, r0
    1c92:	408c      	lsls	r4, r1
    1c94:	46a1      	mov	r9, r4
		r = r << 1;
    1c96:	1892      	adds	r2, r2, r2
    1c98:	415b      	adcs	r3, r3
    1c9a:	0014      	movs	r4, r2
    1c9c:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1c9e:	9e05      	ldr	r6, [sp, #20]
    1ca0:	464f      	mov	r7, r9
    1ca2:	403e      	ands	r6, r7
    1ca4:	46b4      	mov	ip, r6
    1ca6:	9e04      	ldr	r6, [sp, #16]
    1ca8:	4647      	mov	r7, r8
    1caa:	403e      	ands	r6, r7
    1cac:	46b2      	mov	sl, r6
    1cae:	4666      	mov	r6, ip
    1cb0:	4657      	mov	r7, sl
    1cb2:	433e      	orrs	r6, r7
    1cb4:	d003      	beq.n	1cbe <long_division+0x96>
			r |= 0x01;
    1cb6:	0006      	movs	r6, r0
    1cb8:	4326      	orrs	r6, r4
    1cba:	0032      	movs	r2, r6
    1cbc:	002b      	movs	r3, r5
		if (r >= d) {
    1cbe:	9c00      	ldr	r4, [sp, #0]
    1cc0:	9d01      	ldr	r5, [sp, #4]
    1cc2:	429d      	cmp	r5, r3
    1cc4:	d8db      	bhi.n	1c7e <long_division+0x56>
    1cc6:	d1ce      	bne.n	1c66 <long_division+0x3e>
    1cc8:	4294      	cmp	r4, r2
    1cca:	d8d8      	bhi.n	1c7e <long_division+0x56>
    1ccc:	e7cb      	b.n	1c66 <long_division+0x3e>
    1cce:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1cd0:	4658      	mov	r0, fp
    1cd2:	0019      	movs	r1, r3
    1cd4:	b007      	add	sp, #28
    1cd6:	bc3c      	pop	{r2, r3, r4, r5}
    1cd8:	4690      	mov	r8, r2
    1cda:	4699      	mov	r9, r3
    1cdc:	46a2      	mov	sl, r4
    1cde:	46ab      	mov	fp, r5
    1ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001ce2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1ce2:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1ce4:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1ce6:	2340      	movs	r3, #64	; 0x40
    1ce8:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1cea:	4281      	cmp	r1, r0
    1cec:	d202      	bcs.n	1cf4 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1cee:	0018      	movs	r0, r3
    1cf0:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1cf2:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1cf4:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1cf6:	1c63      	adds	r3, r4, #1
    1cf8:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1cfa:	4288      	cmp	r0, r1
    1cfc:	d9f9      	bls.n	1cf2 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1cfe:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1d00:	2cff      	cmp	r4, #255	; 0xff
    1d02:	d8f4      	bhi.n	1cee <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1d04:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1d06:	2300      	movs	r3, #0
    1d08:	e7f1      	b.n	1cee <_sercom_get_sync_baud_val+0xc>
	...

00001d0c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d0e:	b083      	sub	sp, #12
    1d10:	000f      	movs	r7, r1
    1d12:	0016      	movs	r6, r2
    1d14:	aa08      	add	r2, sp, #32
    1d16:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1d18:	0004      	movs	r4, r0
    1d1a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d1c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1d1e:	42bc      	cmp	r4, r7
    1d20:	d902      	bls.n	1d28 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1d22:	0010      	movs	r0, r2
    1d24:	b003      	add	sp, #12
    1d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1d28:	2b00      	cmp	r3, #0
    1d2a:	d114      	bne.n	1d56 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1d2c:	0002      	movs	r2, r0
    1d2e:	0008      	movs	r0, r1
    1d30:	2100      	movs	r1, #0
    1d32:	4c19      	ldr	r4, [pc, #100]	; (1d98 <_sercom_get_async_baud_val+0x8c>)
    1d34:	47a0      	blx	r4
    1d36:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1d38:	003a      	movs	r2, r7
    1d3a:	2300      	movs	r3, #0
    1d3c:	2000      	movs	r0, #0
    1d3e:	4c17      	ldr	r4, [pc, #92]	; (1d9c <_sercom_get_async_baud_val+0x90>)
    1d40:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1d42:	2200      	movs	r2, #0
    1d44:	2301      	movs	r3, #1
    1d46:	1a12      	subs	r2, r2, r0
    1d48:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1d4a:	0c12      	lsrs	r2, r2, #16
    1d4c:	041b      	lsls	r3, r3, #16
    1d4e:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1d50:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1d52:	2200      	movs	r2, #0
    1d54:	e7e5      	b.n	1d22 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1d56:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1d58:	2b01      	cmp	r3, #1
    1d5a:	d1f9      	bne.n	1d50 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1d5c:	000a      	movs	r2, r1
    1d5e:	2300      	movs	r3, #0
    1d60:	2100      	movs	r1, #0
    1d62:	4c0d      	ldr	r4, [pc, #52]	; (1d98 <_sercom_get_async_baud_val+0x8c>)
    1d64:	47a0      	blx	r4
    1d66:	0002      	movs	r2, r0
    1d68:	000b      	movs	r3, r1
    1d6a:	9200      	str	r2, [sp, #0]
    1d6c:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1d6e:	0038      	movs	r0, r7
    1d70:	2100      	movs	r1, #0
    1d72:	4c0a      	ldr	r4, [pc, #40]	; (1d9c <_sercom_get_async_baud_val+0x90>)
    1d74:	47a0      	blx	r4
    1d76:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1d78:	2380      	movs	r3, #128	; 0x80
    1d7a:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1d7c:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1d7e:	4298      	cmp	r0, r3
    1d80:	d8cf      	bhi.n	1d22 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1d82:	0f79      	lsrs	r1, r7, #29
    1d84:	00f8      	lsls	r0, r7, #3
    1d86:	9a00      	ldr	r2, [sp, #0]
    1d88:	9b01      	ldr	r3, [sp, #4]
    1d8a:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1d8c:	00ea      	lsls	r2, r5, #3
    1d8e:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1d90:	b2d2      	uxtb	r2, r2
    1d92:	0352      	lsls	r2, r2, #13
    1d94:	432a      	orrs	r2, r5
    1d96:	e7db      	b.n	1d50 <_sercom_get_async_baud_val+0x44>
    1d98:	00005f11 	.word	0x00005f11
    1d9c:	00001c29 	.word	0x00001c29

00001da0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1da0:	b510      	push	{r4, lr}
    1da2:	b082      	sub	sp, #8
    1da4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1da6:	4b0e      	ldr	r3, [pc, #56]	; (1de0 <sercom_set_gclk_generator+0x40>)
    1da8:	781b      	ldrb	r3, [r3, #0]
    1daa:	2b00      	cmp	r3, #0
    1dac:	d007      	beq.n	1dbe <sercom_set_gclk_generator+0x1e>
    1dae:	2900      	cmp	r1, #0
    1db0:	d105      	bne.n	1dbe <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1db2:	4b0b      	ldr	r3, [pc, #44]	; (1de0 <sercom_set_gclk_generator+0x40>)
    1db4:	785b      	ldrb	r3, [r3, #1]
    1db6:	4283      	cmp	r3, r0
    1db8:	d010      	beq.n	1ddc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1dba:	201d      	movs	r0, #29
    1dbc:	e00c      	b.n	1dd8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1dbe:	a901      	add	r1, sp, #4
    1dc0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1dc2:	2013      	movs	r0, #19
    1dc4:	4b07      	ldr	r3, [pc, #28]	; (1de4 <sercom_set_gclk_generator+0x44>)
    1dc6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1dc8:	2013      	movs	r0, #19
    1dca:	4b07      	ldr	r3, [pc, #28]	; (1de8 <sercom_set_gclk_generator+0x48>)
    1dcc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1dce:	4b04      	ldr	r3, [pc, #16]	; (1de0 <sercom_set_gclk_generator+0x40>)
    1dd0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1dd2:	2201      	movs	r2, #1
    1dd4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1dd6:	2000      	movs	r0, #0
}
    1dd8:	b002      	add	sp, #8
    1dda:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1ddc:	2000      	movs	r0, #0
    1dde:	e7fb      	b.n	1dd8 <sercom_set_gclk_generator+0x38>
    1de0:	200002b4 	.word	0x200002b4
    1de4:	000033c1 	.word	0x000033c1
    1de8:	00003335 	.word	0x00003335

00001dec <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1dec:	4b40      	ldr	r3, [pc, #256]	; (1ef0 <_sercom_get_default_pad+0x104>)
    1dee:	4298      	cmp	r0, r3
    1df0:	d031      	beq.n	1e56 <_sercom_get_default_pad+0x6a>
    1df2:	d90a      	bls.n	1e0a <_sercom_get_default_pad+0x1e>
    1df4:	4b3f      	ldr	r3, [pc, #252]	; (1ef4 <_sercom_get_default_pad+0x108>)
    1df6:	4298      	cmp	r0, r3
    1df8:	d04d      	beq.n	1e96 <_sercom_get_default_pad+0xaa>
    1dfa:	4b3f      	ldr	r3, [pc, #252]	; (1ef8 <_sercom_get_default_pad+0x10c>)
    1dfc:	4298      	cmp	r0, r3
    1dfe:	d05a      	beq.n	1eb6 <_sercom_get_default_pad+0xca>
    1e00:	4b3e      	ldr	r3, [pc, #248]	; (1efc <_sercom_get_default_pad+0x110>)
    1e02:	4298      	cmp	r0, r3
    1e04:	d037      	beq.n	1e76 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1e06:	2000      	movs	r0, #0
}
    1e08:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1e0a:	4b3d      	ldr	r3, [pc, #244]	; (1f00 <_sercom_get_default_pad+0x114>)
    1e0c:	4298      	cmp	r0, r3
    1e0e:	d00c      	beq.n	1e2a <_sercom_get_default_pad+0x3e>
    1e10:	4b3c      	ldr	r3, [pc, #240]	; (1f04 <_sercom_get_default_pad+0x118>)
    1e12:	4298      	cmp	r0, r3
    1e14:	d1f7      	bne.n	1e06 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e16:	2901      	cmp	r1, #1
    1e18:	d017      	beq.n	1e4a <_sercom_get_default_pad+0x5e>
    1e1a:	2900      	cmp	r1, #0
    1e1c:	d05d      	beq.n	1eda <_sercom_get_default_pad+0xee>
    1e1e:	2902      	cmp	r1, #2
    1e20:	d015      	beq.n	1e4e <_sercom_get_default_pad+0x62>
    1e22:	2903      	cmp	r1, #3
    1e24:	d015      	beq.n	1e52 <_sercom_get_default_pad+0x66>
	return 0;
    1e26:	2000      	movs	r0, #0
    1e28:	e7ee      	b.n	1e08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e2a:	2901      	cmp	r1, #1
    1e2c:	d007      	beq.n	1e3e <_sercom_get_default_pad+0x52>
    1e2e:	2900      	cmp	r1, #0
    1e30:	d051      	beq.n	1ed6 <_sercom_get_default_pad+0xea>
    1e32:	2902      	cmp	r1, #2
    1e34:	d005      	beq.n	1e42 <_sercom_get_default_pad+0x56>
    1e36:	2903      	cmp	r1, #3
    1e38:	d005      	beq.n	1e46 <_sercom_get_default_pad+0x5a>
	return 0;
    1e3a:	2000      	movs	r0, #0
    1e3c:	e7e4      	b.n	1e08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e3e:	4832      	ldr	r0, [pc, #200]	; (1f08 <_sercom_get_default_pad+0x11c>)
    1e40:	e7e2      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1e42:	4832      	ldr	r0, [pc, #200]	; (1f0c <_sercom_get_default_pad+0x120>)
    1e44:	e7e0      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1e46:	4832      	ldr	r0, [pc, #200]	; (1f10 <_sercom_get_default_pad+0x124>)
    1e48:	e7de      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1e4a:	4832      	ldr	r0, [pc, #200]	; (1f14 <_sercom_get_default_pad+0x128>)
    1e4c:	e7dc      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1e4e:	4832      	ldr	r0, [pc, #200]	; (1f18 <_sercom_get_default_pad+0x12c>)
    1e50:	e7da      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1e52:	4832      	ldr	r0, [pc, #200]	; (1f1c <_sercom_get_default_pad+0x130>)
    1e54:	e7d8      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1e56:	2901      	cmp	r1, #1
    1e58:	d007      	beq.n	1e6a <_sercom_get_default_pad+0x7e>
    1e5a:	2900      	cmp	r1, #0
    1e5c:	d03f      	beq.n	1ede <_sercom_get_default_pad+0xf2>
    1e5e:	2902      	cmp	r1, #2
    1e60:	d005      	beq.n	1e6e <_sercom_get_default_pad+0x82>
    1e62:	2903      	cmp	r1, #3
    1e64:	d005      	beq.n	1e72 <_sercom_get_default_pad+0x86>
	return 0;
    1e66:	2000      	movs	r0, #0
    1e68:	e7ce      	b.n	1e08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e6a:	482d      	ldr	r0, [pc, #180]	; (1f20 <_sercom_get_default_pad+0x134>)
    1e6c:	e7cc      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1e6e:	482d      	ldr	r0, [pc, #180]	; (1f24 <_sercom_get_default_pad+0x138>)
    1e70:	e7ca      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1e72:	482d      	ldr	r0, [pc, #180]	; (1f28 <_sercom_get_default_pad+0x13c>)
    1e74:	e7c8      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1e76:	2901      	cmp	r1, #1
    1e78:	d007      	beq.n	1e8a <_sercom_get_default_pad+0x9e>
    1e7a:	2900      	cmp	r1, #0
    1e7c:	d031      	beq.n	1ee2 <_sercom_get_default_pad+0xf6>
    1e7e:	2902      	cmp	r1, #2
    1e80:	d005      	beq.n	1e8e <_sercom_get_default_pad+0xa2>
    1e82:	2903      	cmp	r1, #3
    1e84:	d005      	beq.n	1e92 <_sercom_get_default_pad+0xa6>
	return 0;
    1e86:	2000      	movs	r0, #0
    1e88:	e7be      	b.n	1e08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1e8a:	4828      	ldr	r0, [pc, #160]	; (1f2c <_sercom_get_default_pad+0x140>)
    1e8c:	e7bc      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1e8e:	4828      	ldr	r0, [pc, #160]	; (1f30 <_sercom_get_default_pad+0x144>)
    1e90:	e7ba      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1e92:	4828      	ldr	r0, [pc, #160]	; (1f34 <_sercom_get_default_pad+0x148>)
    1e94:	e7b8      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1e96:	2901      	cmp	r1, #1
    1e98:	d007      	beq.n	1eaa <_sercom_get_default_pad+0xbe>
    1e9a:	2900      	cmp	r1, #0
    1e9c:	d023      	beq.n	1ee6 <_sercom_get_default_pad+0xfa>
    1e9e:	2902      	cmp	r1, #2
    1ea0:	d005      	beq.n	1eae <_sercom_get_default_pad+0xc2>
    1ea2:	2903      	cmp	r1, #3
    1ea4:	d005      	beq.n	1eb2 <_sercom_get_default_pad+0xc6>
	return 0;
    1ea6:	2000      	movs	r0, #0
    1ea8:	e7ae      	b.n	1e08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1eaa:	4823      	ldr	r0, [pc, #140]	; (1f38 <_sercom_get_default_pad+0x14c>)
    1eac:	e7ac      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1eae:	4823      	ldr	r0, [pc, #140]	; (1f3c <_sercom_get_default_pad+0x150>)
    1eb0:	e7aa      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1eb2:	4823      	ldr	r0, [pc, #140]	; (1f40 <_sercom_get_default_pad+0x154>)
    1eb4:	e7a8      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1eb6:	2901      	cmp	r1, #1
    1eb8:	d007      	beq.n	1eca <_sercom_get_default_pad+0xde>
    1eba:	2900      	cmp	r1, #0
    1ebc:	d015      	beq.n	1eea <_sercom_get_default_pad+0xfe>
    1ebe:	2902      	cmp	r1, #2
    1ec0:	d005      	beq.n	1ece <_sercom_get_default_pad+0xe2>
    1ec2:	2903      	cmp	r1, #3
    1ec4:	d005      	beq.n	1ed2 <_sercom_get_default_pad+0xe6>
	return 0;
    1ec6:	2000      	movs	r0, #0
    1ec8:	e79e      	b.n	1e08 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1eca:	481e      	ldr	r0, [pc, #120]	; (1f44 <_sercom_get_default_pad+0x158>)
    1ecc:	e79c      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1ece:	481e      	ldr	r0, [pc, #120]	; (1f48 <_sercom_get_default_pad+0x15c>)
    1ed0:	e79a      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1ed2:	481e      	ldr	r0, [pc, #120]	; (1f4c <_sercom_get_default_pad+0x160>)
    1ed4:	e798      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1ed6:	481e      	ldr	r0, [pc, #120]	; (1f50 <_sercom_get_default_pad+0x164>)
    1ed8:	e796      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1eda:	2003      	movs	r0, #3
    1edc:	e794      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1ede:	481d      	ldr	r0, [pc, #116]	; (1f54 <_sercom_get_default_pad+0x168>)
    1ee0:	e792      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1ee2:	481d      	ldr	r0, [pc, #116]	; (1f58 <_sercom_get_default_pad+0x16c>)
    1ee4:	e790      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1ee6:	481d      	ldr	r0, [pc, #116]	; (1f5c <_sercom_get_default_pad+0x170>)
    1ee8:	e78e      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1eea:	481d      	ldr	r0, [pc, #116]	; (1f60 <_sercom_get_default_pad+0x174>)
    1eec:	e78c      	b.n	1e08 <_sercom_get_default_pad+0x1c>
    1eee:	46c0      	nop			; (mov r8, r8)
    1ef0:	42001000 	.word	0x42001000
    1ef4:	42001800 	.word	0x42001800
    1ef8:	42001c00 	.word	0x42001c00
    1efc:	42001400 	.word	0x42001400
    1f00:	42000800 	.word	0x42000800
    1f04:	42000c00 	.word	0x42000c00
    1f08:	00050003 	.word	0x00050003
    1f0c:	00060003 	.word	0x00060003
    1f10:	00070003 	.word	0x00070003
    1f14:	00010003 	.word	0x00010003
    1f18:	001e0003 	.word	0x001e0003
    1f1c:	001f0003 	.word	0x001f0003
    1f20:	00090003 	.word	0x00090003
    1f24:	000a0003 	.word	0x000a0003
    1f28:	000b0003 	.word	0x000b0003
    1f2c:	00110003 	.word	0x00110003
    1f30:	00120003 	.word	0x00120003
    1f34:	00130003 	.word	0x00130003
    1f38:	000d0003 	.word	0x000d0003
    1f3c:	000e0003 	.word	0x000e0003
    1f40:	000f0003 	.word	0x000f0003
    1f44:	00170003 	.word	0x00170003
    1f48:	00180003 	.word	0x00180003
    1f4c:	00190003 	.word	0x00190003
    1f50:	00040003 	.word	0x00040003
    1f54:	00080003 	.word	0x00080003
    1f58:	00100003 	.word	0x00100003
    1f5c:	000c0003 	.word	0x000c0003
    1f60:	00160003 	.word	0x00160003

00001f64 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1f64:	b530      	push	{r4, r5, lr}
    1f66:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1f68:	4b0b      	ldr	r3, [pc, #44]	; (1f98 <_sercom_get_sercom_inst_index+0x34>)
    1f6a:	466a      	mov	r2, sp
    1f6c:	cb32      	ldmia	r3!, {r1, r4, r5}
    1f6e:	c232      	stmia	r2!, {r1, r4, r5}
    1f70:	cb32      	ldmia	r3!, {r1, r4, r5}
    1f72:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1f74:	9b00      	ldr	r3, [sp, #0]
    1f76:	4283      	cmp	r3, r0
    1f78:	d00b      	beq.n	1f92 <_sercom_get_sercom_inst_index+0x2e>
    1f7a:	2301      	movs	r3, #1
    1f7c:	009a      	lsls	r2, r3, #2
    1f7e:	4669      	mov	r1, sp
    1f80:	5852      	ldr	r2, [r2, r1]
    1f82:	4282      	cmp	r2, r0
    1f84:	d006      	beq.n	1f94 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f86:	3301      	adds	r3, #1
    1f88:	2b06      	cmp	r3, #6
    1f8a:	d1f7      	bne.n	1f7c <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1f8c:	2000      	movs	r0, #0
}
    1f8e:	b007      	add	sp, #28
    1f90:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1f92:	2300      	movs	r3, #0
			return i;
    1f94:	b2d8      	uxtb	r0, r3
    1f96:	e7fa      	b.n	1f8e <_sercom_get_sercom_inst_index+0x2a>
    1f98:	00006d2c 	.word	0x00006d2c

00001f9c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1f9c:	4770      	bx	lr
	...

00001fa0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1fa2:	4b0a      	ldr	r3, [pc, #40]	; (1fcc <_sercom_set_handler+0x2c>)
    1fa4:	781b      	ldrb	r3, [r3, #0]
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	d10c      	bne.n	1fc4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1faa:	4f09      	ldr	r7, [pc, #36]	; (1fd0 <_sercom_set_handler+0x30>)
    1fac:	4e09      	ldr	r6, [pc, #36]	; (1fd4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1fae:	4d0a      	ldr	r5, [pc, #40]	; (1fd8 <_sercom_set_handler+0x38>)
    1fb0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1fb2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1fb4:	195a      	adds	r2, r3, r5
    1fb6:	6014      	str	r4, [r2, #0]
    1fb8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1fba:	2b18      	cmp	r3, #24
    1fbc:	d1f9      	bne.n	1fb2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    1fbe:	2201      	movs	r2, #1
    1fc0:	4b02      	ldr	r3, [pc, #8]	; (1fcc <_sercom_set_handler+0x2c>)
    1fc2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1fc4:	0080      	lsls	r0, r0, #2
    1fc6:	4b02      	ldr	r3, [pc, #8]	; (1fd0 <_sercom_set_handler+0x30>)
    1fc8:	50c1      	str	r1, [r0, r3]
}
    1fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fcc:	200002b6 	.word	0x200002b6
    1fd0:	200002b8 	.word	0x200002b8
    1fd4:	00001f9d 	.word	0x00001f9d
    1fd8:	20000b74 	.word	0x20000b74

00001fdc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1fdc:	b500      	push	{lr}
    1fde:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1fe0:	2309      	movs	r3, #9
    1fe2:	466a      	mov	r2, sp
    1fe4:	7013      	strb	r3, [r2, #0]
    1fe6:	3301      	adds	r3, #1
    1fe8:	7053      	strb	r3, [r2, #1]
    1fea:	3301      	adds	r3, #1
    1fec:	7093      	strb	r3, [r2, #2]
    1fee:	3301      	adds	r3, #1
    1ff0:	70d3      	strb	r3, [r2, #3]
    1ff2:	3301      	adds	r3, #1
    1ff4:	7113      	strb	r3, [r2, #4]
    1ff6:	3301      	adds	r3, #1
    1ff8:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1ffa:	4b03      	ldr	r3, [pc, #12]	; (2008 <STACK_SIZE+0x8>)
    1ffc:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1ffe:	466b      	mov	r3, sp
    2000:	5618      	ldrsb	r0, [r3, r0]
}
    2002:	b003      	add	sp, #12
    2004:	bd00      	pop	{pc}
    2006:	46c0      	nop			; (mov r8, r8)
    2008:	00001f65 	.word	0x00001f65

0000200c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    200c:	b510      	push	{r4, lr}
    200e:	4b02      	ldr	r3, [pc, #8]	; (2018 <SERCOM0_Handler+0xc>)
    2010:	681b      	ldr	r3, [r3, #0]
    2012:	2000      	movs	r0, #0
    2014:	4798      	blx	r3
    2016:	bd10      	pop	{r4, pc}
    2018:	200002b8 	.word	0x200002b8

0000201c <SERCOM1_Handler>:
    201c:	b510      	push	{r4, lr}
    201e:	4b02      	ldr	r3, [pc, #8]	; (2028 <SERCOM1_Handler+0xc>)
    2020:	685b      	ldr	r3, [r3, #4]
    2022:	2001      	movs	r0, #1
    2024:	4798      	blx	r3
    2026:	bd10      	pop	{r4, pc}
    2028:	200002b8 	.word	0x200002b8

0000202c <SERCOM2_Handler>:
    202c:	b510      	push	{r4, lr}
    202e:	4b02      	ldr	r3, [pc, #8]	; (2038 <SERCOM2_Handler+0xc>)
    2030:	689b      	ldr	r3, [r3, #8]
    2032:	2002      	movs	r0, #2
    2034:	4798      	blx	r3
    2036:	bd10      	pop	{r4, pc}
    2038:	200002b8 	.word	0x200002b8

0000203c <SERCOM3_Handler>:
    203c:	b510      	push	{r4, lr}
    203e:	4b02      	ldr	r3, [pc, #8]	; (2048 <SERCOM3_Handler+0xc>)
    2040:	68db      	ldr	r3, [r3, #12]
    2042:	2003      	movs	r0, #3
    2044:	4798      	blx	r3
    2046:	bd10      	pop	{r4, pc}
    2048:	200002b8 	.word	0x200002b8

0000204c <SERCOM4_Handler>:
    204c:	b510      	push	{r4, lr}
    204e:	4b02      	ldr	r3, [pc, #8]	; (2058 <SERCOM4_Handler+0xc>)
    2050:	691b      	ldr	r3, [r3, #16]
    2052:	2004      	movs	r0, #4
    2054:	4798      	blx	r3
    2056:	bd10      	pop	{r4, pc}
    2058:	200002b8 	.word	0x200002b8

0000205c <SERCOM5_Handler>:
    205c:	b510      	push	{r4, lr}
    205e:	4b02      	ldr	r3, [pc, #8]	; (2068 <SERCOM5_Handler+0xc>)
    2060:	695b      	ldr	r3, [r3, #20]
    2062:	2005      	movs	r0, #5
    2064:	4798      	blx	r3
    2066:	bd10      	pop	{r4, pc}
    2068:	200002b8 	.word	0x200002b8

0000206c <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    206c:	b570      	push	{r4, r5, r6, lr}
    206e:	0005      	movs	r5, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2070:	6804      	ldr	r4, [r0, #0]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2072:	0020      	movs	r0, r4
    2074:	4b0e      	ldr	r3, [pc, #56]	; (20b0 <spi_reset+0x44>)
    2076:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2078:	231f      	movs	r3, #31
    207a:	4018      	ands	r0, r3
    207c:	3b1e      	subs	r3, #30
    207e:	4083      	lsls	r3, r0
    2080:	2280      	movs	r2, #128	; 0x80
    2082:	490c      	ldr	r1, [pc, #48]	; (20b4 <spi_reset+0x48>)
    2084:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2086:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2088:	69d3      	ldr	r3, [r2, #28]
#  endif

	while (spi_is_syncing(module)) {
    208a:	2b00      	cmp	r3, #0
    208c:	d1fc      	bne.n	2088 <spi_reset+0x1c>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    208e:	338f      	adds	r3, #143	; 0x8f
    2090:	7523      	strb	r3, [r4, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    2092:	7623      	strb	r3, [r4, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    2094:	6823      	ldr	r3, [r4, #0]
    2096:	2202      	movs	r2, #2
    2098:	4393      	bics	r3, r2
    209a:	6023      	str	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    209c:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    209e:	69d3      	ldr	r3, [r2, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    20a0:	2b00      	cmp	r3, #0
    20a2:	d1fc      	bne.n	209e <spi_reset+0x32>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    20a4:	6823      	ldr	r3, [r4, #0]
    20a6:	2201      	movs	r2, #1
    20a8:	4313      	orrs	r3, r2
    20aa:	6023      	str	r3, [r4, #0]
}
    20ac:	bd70      	pop	{r4, r5, r6, pc}
    20ae:	46c0      	nop			; (mov r8, r8)
    20b0:	00001fdd 	.word	0x00001fdd
    20b4:	e000e100 	.word	0xe000e100

000020b8 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    20b8:	b570      	push	{r4, r5, r6, lr}
    20ba:	b082      	sub	sp, #8
    20bc:	0005      	movs	r5, r0
    20be:	000c      	movs	r4, r1
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    20c0:	2200      	movs	r2, #0
    20c2:	466b      	mov	r3, sp
    20c4:	80da      	strh	r2, [r3, #6]

	SercomSpi *const spi_module = &(module->hw->SPI);
    20c6:	6806      	ldr	r6, [r0, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    20c8:	0030      	movs	r0, r6
    20ca:	4b24      	ldr	r3, [pc, #144]	; (215c <spi_set_baudrate+0xa4>)
    20cc:	4798      	blx	r3
    20ce:	231f      	movs	r3, #31
    20d0:	4018      	ands	r0, r3
    20d2:	3b1e      	subs	r3, #30
    20d4:	4083      	lsls	r3, r0
    20d6:	2280      	movs	r2, #128	; 0x80
    20d8:	4921      	ldr	r1, [pc, #132]	; (2160 <spi_set_baudrate+0xa8>)
    20da:	508b      	str	r3, [r1, r2]
	SercomSpi *const spi_module = &(module->hw->SPI);
    20dc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    20de:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    20e0:	2b00      	cmp	r3, #0
    20e2:	d1fc      	bne.n	20de <spi_set_baudrate+0x26>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    20e4:	338f      	adds	r3, #143	; 0x8f
    20e6:	7533      	strb	r3, [r6, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    20e8:	7633      	strb	r3, [r6, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    20ea:	6833      	ldr	r3, [r6, #0]
    20ec:	2202      	movs	r2, #2
    20ee:	4393      	bics	r3, r2
    20f0:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    20f2:	6828      	ldr	r0, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    20f4:	69c3      	ldr	r3, [r0, #28]

	/* Disable the module */
	spi_disable(module);

	while (spi_is_syncing(module)) {
    20f6:	2b00      	cmp	r3, #0
    20f8:	d1fc      	bne.n	20f4 <spi_set_baudrate+0x3c>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    20fa:	4b1a      	ldr	r3, [pc, #104]	; (2164 <spi_set_baudrate+0xac>)
    20fc:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    20fe:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2100:	b2c0      	uxtb	r0, r0
    2102:	4b19      	ldr	r3, [pc, #100]	; (2168 <spi_set_baudrate+0xb0>)
    2104:	4798      	blx	r3
    2106:	0001      	movs	r1, r0

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    2108:	466b      	mov	r3, sp
    210a:	1d9a      	adds	r2, r3, #6
    210c:	0020      	movs	r0, r4
    210e:	4b17      	ldr	r3, [pc, #92]	; (216c <spi_set_baudrate+0xb4>)
    2110:	4798      	blx	r3
    2112:	1e04      	subs	r4, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    2114:	d003      	beq.n	211e <spi_set_baudrate+0x66>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    2116:	2417      	movs	r4, #23
	while (spi_is_syncing(module)) {
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    2118:	0020      	movs	r0, r4
    211a:	b002      	add	sp, #8
    211c:	bd70      	pop	{r4, r5, r6, pc}
	spi_module->BAUD.reg = (uint8_t)baud;
    211e:	466b      	mov	r3, sp
    2120:	3306      	adds	r3, #6
    2122:	781b      	ldrb	r3, [r3, #0]
    2124:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2126:	682e      	ldr	r6, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2128:	69f3      	ldr	r3, [r6, #28]
	while (spi_is_syncing(module)) {
    212a:	2b00      	cmp	r3, #0
    212c:	d1fc      	bne.n	2128 <spi_set_baudrate+0x70>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    212e:	0030      	movs	r0, r6
    2130:	4b0a      	ldr	r3, [pc, #40]	; (215c <spi_set_baudrate+0xa4>)
    2132:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2134:	231f      	movs	r3, #31
    2136:	4018      	ands	r0, r3
    2138:	3b1e      	subs	r3, #30
    213a:	4083      	lsls	r3, r0
    213c:	4a08      	ldr	r2, [pc, #32]	; (2160 <spi_set_baudrate+0xa8>)
    213e:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2140:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2142:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2144:	2b00      	cmp	r3, #0
    2146:	d1fc      	bne.n	2142 <spi_set_baudrate+0x8a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2148:	6833      	ldr	r3, [r6, #0]
    214a:	2202      	movs	r2, #2
    214c:	4313      	orrs	r3, r2
    214e:	6033      	str	r3, [r6, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2150:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    2152:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    2154:	2b00      	cmp	r3, #0
    2156:	d1fc      	bne.n	2152 <spi_set_baudrate+0x9a>
    2158:	e7de      	b.n	2118 <spi_set_baudrate+0x60>
    215a:	46c0      	nop			; (mov r8, r8)
    215c:	00001fdd 	.word	0x00001fdd
    2160:	e000e100 	.word	0xe000e100
    2164:	00001f65 	.word	0x00001f65
    2168:	000033dd 	.word	0x000033dd
    216c:	00001ce3 	.word	0x00001ce3

00002170 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    2170:	b5f0      	push	{r4, r5, r6, r7, lr}
    2172:	b08b      	sub	sp, #44	; 0x2c
    2174:	0005      	movs	r5, r0
    2176:	000c      	movs	r4, r1
    2178:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    217a:	6029      	str	r1, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    217c:	680b      	ldr	r3, [r1, #0]
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    217e:	201c      	movs	r0, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    2180:	079b      	lsls	r3, r3, #30
    2182:	d501      	bpl.n	2188 <spi_init+0x18>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    2184:	b00b      	add	sp, #44	; 0x2c
    2186:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2188:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    218a:	3817      	subs	r0, #23
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    218c:	07db      	lsls	r3, r3, #31
    218e:	d4f9      	bmi.n	2184 <spi_init+0x14>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2190:	0008      	movs	r0, r1
    2192:	4b60      	ldr	r3, [pc, #384]	; (2314 <spi_init+0x1a4>)
    2194:	4798      	blx	r3
			PM->APBCMASK.reg |= mask;
    2196:	4a60      	ldr	r2, [pc, #384]	; (2318 <spi_init+0x1a8>)
    2198:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    219a:	1c87      	adds	r7, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    219c:	2301      	movs	r3, #1
    219e:	40bb      	lsls	r3, r7
    21a0:	430b      	orrs	r3, r1
    21a2:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    21a4:	a909      	add	r1, sp, #36	; 0x24
    21a6:	2724      	movs	r7, #36	; 0x24
    21a8:	5df3      	ldrb	r3, [r6, r7]
    21aa:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    21ac:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    21ae:	b2c3      	uxtb	r3, r0
    21b0:	9301      	str	r3, [sp, #4]
    21b2:	0018      	movs	r0, r3
    21b4:	4b59      	ldr	r3, [pc, #356]	; (231c <spi_init+0x1ac>)
    21b6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    21b8:	9801      	ldr	r0, [sp, #4]
    21ba:	4b59      	ldr	r3, [pc, #356]	; (2320 <spi_init+0x1b0>)
    21bc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    21be:	5df0      	ldrb	r0, [r6, r7]
    21c0:	2100      	movs	r1, #0
    21c2:	4b58      	ldr	r3, [pc, #352]	; (2324 <spi_init+0x1b4>)
    21c4:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    21c6:	7833      	ldrb	r3, [r6, #0]
    21c8:	2b01      	cmp	r3, #1
    21ca:	d038      	beq.n	223e <spi_init+0xce>
    21cc:	002b      	movs	r3, r5
    21ce:	330c      	adds	r3, #12
    21d0:	0029      	movs	r1, r5
    21d2:	3128      	adds	r1, #40	; 0x28
		module->callback[i]        = NULL;
    21d4:	2200      	movs	r2, #0
    21d6:	c304      	stmia	r3!, {r2}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    21d8:	428b      	cmp	r3, r1
    21da:	d1fc      	bne.n	21d6 <spi_init+0x66>
	module->tx_buffer_ptr              = NULL;
    21dc:	2300      	movs	r3, #0
    21de:	62eb      	str	r3, [r5, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    21e0:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    21e2:	2400      	movs	r4, #0
    21e4:	86ab      	strh	r3, [r5, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    21e6:	862b      	strh	r3, [r5, #48]	; 0x30
	module->registered_callback        = 0x00;
    21e8:	3336      	adds	r3, #54	; 0x36
    21ea:	54ec      	strb	r4, [r5, r3]
	module->enabled_callback           = 0x00;
    21ec:	3301      	adds	r3, #1
    21ee:	54ec      	strb	r4, [r5, r3]
	module->status                     = STATUS_OK;
    21f0:	3301      	adds	r3, #1
    21f2:	54ec      	strb	r4, [r5, r3]
	module->dir                        = SPI_DIRECTION_IDLE;
    21f4:	3b35      	subs	r3, #53	; 0x35
    21f6:	726b      	strb	r3, [r5, #9]
	module->locked                     = false;
    21f8:	712c      	strb	r4, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    21fa:	6828      	ldr	r0, [r5, #0]
    21fc:	4b45      	ldr	r3, [pc, #276]	; (2314 <spi_init+0x1a4>)
    21fe:	4798      	blx	r3
    2200:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    2202:	4949      	ldr	r1, [pc, #292]	; (2328 <spi_init+0x1b8>)
    2204:	4b49      	ldr	r3, [pc, #292]	; (232c <spi_init+0x1bc>)
    2206:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2208:	00bf      	lsls	r7, r7, #2
    220a:	4b49      	ldr	r3, [pc, #292]	; (2330 <spi_init+0x1c0>)
    220c:	50fd      	str	r5, [r7, r3]
	SercomSpi *const spi_module = &(module->hw->SPI);
    220e:	682f      	ldr	r7, [r5, #0]
    2210:	ab04      	add	r3, sp, #16
    2212:	2280      	movs	r2, #128	; 0x80
    2214:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2216:	705c      	strb	r4, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2218:	3a7f      	subs	r2, #127	; 0x7f
    221a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    221c:	70dc      	strb	r4, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    221e:	7833      	ldrb	r3, [r6, #0]
    2220:	2b00      	cmp	r3, #0
    2222:	d102      	bne.n	222a <spi_init+0xba>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2224:	2200      	movs	r2, #0
    2226:	ab04      	add	r3, sp, #16
    2228:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    222a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    222c:	9305      	str	r3, [sp, #20]
    222e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2230:	9306      	str	r3, [sp, #24]
    2232:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2234:	9307      	str	r3, [sp, #28]
    2236:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2238:	9308      	str	r3, [sp, #32]
    223a:	2400      	movs	r4, #0
    223c:	e00b      	b.n	2256 <spi_init+0xe6>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    223e:	6823      	ldr	r3, [r4, #0]
    2240:	220c      	movs	r2, #12
    2242:	4313      	orrs	r3, r2
    2244:	6023      	str	r3, [r4, #0]
    2246:	e7c1      	b.n	21cc <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2248:	0038      	movs	r0, r7
    224a:	4b3a      	ldr	r3, [pc, #232]	; (2334 <spi_init+0x1c4>)
    224c:	4798      	blx	r3
    224e:	e00a      	b.n	2266 <spi_init+0xf6>
    2250:	3401      	adds	r4, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2252:	2c04      	cmp	r4, #4
    2254:	d010      	beq.n	2278 <spi_init+0x108>
    2256:	b2e1      	uxtb	r1, r4
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2258:	00a3      	lsls	r3, r4, #2
    225a:	aa02      	add	r2, sp, #8
    225c:	200c      	movs	r0, #12
    225e:	1812      	adds	r2, r2, r0
    2260:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    2262:	2800      	cmp	r0, #0
    2264:	d0f0      	beq.n	2248 <spi_init+0xd8>
		if (current_pinmux != PINMUX_UNUSED) {
    2266:	1c43      	adds	r3, r0, #1
    2268:	d0f2      	beq.n	2250 <spi_init+0xe0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    226a:	a904      	add	r1, sp, #16
    226c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    226e:	0c00      	lsrs	r0, r0, #16
    2270:	b2c0      	uxtb	r0, r0
    2272:	4b31      	ldr	r3, [pc, #196]	; (2338 <spi_init+0x1c8>)
    2274:	4798      	blx	r3
    2276:	e7eb      	b.n	2250 <spi_init+0xe0>
	module->mode             = config->mode;
    2278:	7833      	ldrb	r3, [r6, #0]
    227a:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    227c:	7c33      	ldrb	r3, [r6, #16]
    227e:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    2280:	7cb3      	ldrb	r3, [r6, #18]
    2282:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    2284:	7d33      	ldrb	r3, [r6, #20]
    2286:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    2288:	2200      	movs	r2, #0
    228a:	ab02      	add	r3, sp, #8
    228c:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    228e:	7833      	ldrb	r3, [r6, #0]
    2290:	2b01      	cmp	r3, #1
    2292:	d028      	beq.n	22e6 <spi_init+0x176>
	ctrla |= config->transfer_mode;
    2294:	6873      	ldr	r3, [r6, #4]
    2296:	68b2      	ldr	r2, [r6, #8]
    2298:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    229a:	68f2      	ldr	r2, [r6, #12]
    229c:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    229e:	7c31      	ldrb	r1, [r6, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    22a0:	7c72      	ldrb	r2, [r6, #17]
    22a2:	2a00      	cmp	r2, #0
    22a4:	d103      	bne.n	22ae <spi_init+0x13e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    22a6:	4a25      	ldr	r2, [pc, #148]	; (233c <spi_init+0x1cc>)
    22a8:	7892      	ldrb	r2, [r2, #2]
    22aa:	0792      	lsls	r2, r2, #30
    22ac:	d501      	bpl.n	22b2 <spi_init+0x142>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    22ae:	2280      	movs	r2, #128	; 0x80
    22b0:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    22b2:	7cb2      	ldrb	r2, [r6, #18]
    22b4:	2a00      	cmp	r2, #0
    22b6:	d002      	beq.n	22be <spi_init+0x14e>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    22b8:	2280      	movs	r2, #128	; 0x80
    22ba:	0292      	lsls	r2, r2, #10
    22bc:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    22be:	7cf2      	ldrb	r2, [r6, #19]
    22c0:	2a00      	cmp	r2, #0
    22c2:	d002      	beq.n	22ca <spi_init+0x15a>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    22c4:	2280      	movs	r2, #128	; 0x80
    22c6:	0092      	lsls	r2, r2, #2
    22c8:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    22ca:	7d32      	ldrb	r2, [r6, #20]
    22cc:	2a00      	cmp	r2, #0
    22ce:	d002      	beq.n	22d6 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    22d0:	2280      	movs	r2, #128	; 0x80
    22d2:	0192      	lsls	r2, r2, #6
    22d4:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    22d6:	683a      	ldr	r2, [r7, #0]
    22d8:	4313      	orrs	r3, r2
    22da:	603b      	str	r3, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    22dc:	687b      	ldr	r3, [r7, #4]
    22de:	430b      	orrs	r3, r1
    22e0:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    22e2:	2000      	movs	r0, #0
    22e4:	e74e      	b.n	2184 <spi_init+0x14>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    22e6:	6828      	ldr	r0, [r5, #0]
    22e8:	4b0a      	ldr	r3, [pc, #40]	; (2314 <spi_init+0x1a4>)
    22ea:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    22ec:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    22ee:	b2c0      	uxtb	r0, r0
    22f0:	4b13      	ldr	r3, [pc, #76]	; (2340 <spi_init+0x1d0>)
    22f2:	4798      	blx	r3
    22f4:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    22f6:	ab02      	add	r3, sp, #8
    22f8:	1d9a      	adds	r2, r3, #6
    22fa:	69b0      	ldr	r0, [r6, #24]
    22fc:	4b11      	ldr	r3, [pc, #68]	; (2344 <spi_init+0x1d4>)
    22fe:	4798      	blx	r3
    2300:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    2302:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    2304:	2b00      	cmp	r3, #0
    2306:	d000      	beq.n	230a <spi_init+0x19a>
    2308:	e73c      	b.n	2184 <spi_init+0x14>
		spi_module->BAUD.reg = (uint8_t)baud;
    230a:	ab02      	add	r3, sp, #8
    230c:	3306      	adds	r3, #6
    230e:	781b      	ldrb	r3, [r3, #0]
    2310:	733b      	strb	r3, [r7, #12]
    2312:	e7bf      	b.n	2294 <spi_init+0x124>
    2314:	00001f65 	.word	0x00001f65
    2318:	40000400 	.word	0x40000400
    231c:	000033c1 	.word	0x000033c1
    2320:	00003335 	.word	0x00003335
    2324:	00001da1 	.word	0x00001da1
    2328:	000025dd 	.word	0x000025dd
    232c:	00001fa1 	.word	0x00001fa1
    2330:	20000b74 	.word	0x20000b74
    2334:	00001ded 	.word	0x00001ded
    2338:	000034b9 	.word	0x000034b9
    233c:	41002000 	.word	0x41002000
    2340:	000033dd 	.word	0x000033dd
    2344:	00001ce3 	.word	0x00001ce3

00002348 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    2348:	b5f0      	push	{r4, r5, r6, r7, lr}
    234a:	46d6      	mov	lr, sl
    234c:	4647      	mov	r7, r8
    234e:	b580      	push	{r7, lr}
    2350:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    2352:	2438      	movs	r4, #56	; 0x38
    2354:	5d05      	ldrb	r5, [r0, r4]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    2356:	3c33      	subs	r4, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    2358:	2d05      	cmp	r5, #5
    235a:	d002      	beq.n	2362 <spi_read_buffer_wait+0x1a>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    235c:	3412      	adds	r4, #18
	if (length == 0) {
    235e:	2a00      	cmp	r2, #0
    2360:	d105      	bne.n	236e <spi_read_buffer_wait+0x26>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    2362:	0020      	movs	r0, r4
    2364:	b003      	add	sp, #12
    2366:	bc0c      	pop	{r2, r3}
    2368:	4690      	mov	r8, r2
    236a:	469a      	mov	sl, r3
    236c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    236e:	79c4      	ldrb	r4, [r0, #7]
    2370:	2c00      	cmp	r4, #0
    2372:	d144      	bne.n	23fe <spi_read_buffer_wait+0xb6>
		return STATUS_ERR_DENIED;
    2374:	341c      	adds	r4, #28
    2376:	e7f4      	b.n	2362 <spi_read_buffer_wait+0x1a>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2378:	6805      	ldr	r5, [r0, #0]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    237a:	7e2c      	ldrb	r4, [r5, #24]
			while (!spi_is_ready_to_write(module)) {
    237c:	423c      	tst	r4, r7
    237e:	d0fc      	beq.n	237a <spi_read_buffer_wait+0x32>
    2380:	7e2c      	ldrb	r4, [r5, #24]
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2382:	423c      	tst	r4, r7
    2384:	d01a      	beq.n	23bc <spi_read_buffer_wait+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2386:	4644      	mov	r4, r8
    2388:	62ac      	str	r4, [r5, #40]	; 0x28
    238a:	e017      	b.n	23bc <spi_read_buffer_wait+0x74>
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    238c:	7984      	ldrb	r4, [r0, #6]
    238e:	2c01      	cmp	r4, #1
    2390:	d026      	beq.n	23e0 <spi_read_buffer_wait+0x98>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2392:	6aad      	ldr	r5, [r5, #40]	; 0x28
    2394:	b2ec      	uxtb	r4, r5
    2396:	46a4      	mov	ip, r4
		if (retval != STATUS_OK) {
    2398:	9c01      	ldr	r4, [sp, #4]
    239a:	2c00      	cmp	r4, #0
    239c:	d13a      	bne.n	2414 <spi_read_buffer_wait+0xcc>
		rx_data[rx_pos++] = received_data;
    239e:	1c75      	adds	r5, r6, #1
    23a0:	b2ad      	uxth	r5, r5
    23a2:	4664      	mov	r4, ip
    23a4:	558c      	strb	r4, [r1, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    23a6:	7984      	ldrb	r4, [r0, #6]
    23a8:	2c01      	cmp	r4, #1
    23aa:	d01e      	beq.n	23ea <spi_read_buffer_wait+0xa2>
		rx_data[rx_pos++] = received_data;
    23ac:	002e      	movs	r6, r5
	while (length--) {
    23ae:	3a01      	subs	r2, #1
    23b0:	b292      	uxth	r2, r2
    23b2:	4552      	cmp	r2, sl
    23b4:	d01f      	beq.n	23f6 <spi_read_buffer_wait+0xae>
		if (module->mode == SPI_MODE_MASTER) {
    23b6:	7944      	ldrb	r4, [r0, #5]
    23b8:	2c01      	cmp	r4, #1
    23ba:	d0dd      	beq.n	2378 <spi_read_buffer_wait+0x30>
	SercomSpi *const spi_module = &(module->hw->SPI);
    23bc:	6805      	ldr	r5, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    23be:	7e2c      	ldrb	r4, [r5, #24]
		while (!spi_is_ready_to_read(module)) {
    23c0:	421c      	tst	r4, r3
    23c2:	d0fc      	beq.n	23be <spi_read_buffer_wait+0x76>
    23c4:	7e2c      	ldrb	r4, [r5, #24]
	if (!spi_is_ready_to_read(module)) {
    23c6:	421c      	tst	r4, r3
    23c8:	d017      	beq.n	23fa <spi_read_buffer_wait+0xb2>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    23ca:	8b6c      	ldrh	r4, [r5, #26]
    23cc:	46a4      	mov	ip, r4
	enum status_code retval = STATUS_OK;
    23ce:	2400      	movs	r4, #0
    23d0:	9401      	str	r4, [sp, #4]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    23d2:	4664      	mov	r4, ip
    23d4:	421c      	tst	r4, r3
    23d6:	d0d9      	beq.n	238c <spi_read_buffer_wait+0x44>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    23d8:	836b      	strh	r3, [r5, #26]
		retval = STATUS_ERR_OVERFLOW;
    23da:	241e      	movs	r4, #30
    23dc:	9401      	str	r4, [sp, #4]
    23de:	e7d5      	b.n	238c <spi_read_buffer_wait+0x44>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    23e0:	6aac      	ldr	r4, [r5, #40]	; 0x28
    23e2:	05e4      	lsls	r4, r4, #23
    23e4:	0de4      	lsrs	r4, r4, #23
    23e6:	46a4      	mov	ip, r4
    23e8:	e7d6      	b.n	2398 <spi_read_buffer_wait+0x50>
			rx_data[rx_pos++] = (received_data >> 8);
    23ea:	3602      	adds	r6, #2
    23ec:	b2b6      	uxth	r6, r6
    23ee:	4664      	mov	r4, ip
    23f0:	0a24      	lsrs	r4, r4, #8
    23f2:	554c      	strb	r4, [r1, r5]
    23f4:	e7db      	b.n	23ae <spi_read_buffer_wait+0x66>
    23f6:	9c01      	ldr	r4, [sp, #4]
    23f8:	e7b3      	b.n	2362 <spi_read_buffer_wait+0x1a>
		return STATUS_ERR_IO;
    23fa:	2410      	movs	r4, #16
    23fc:	e7b1      	b.n	2362 <spi_read_buffer_wait+0x1a>
	while (length--) {
    23fe:	3a01      	subs	r2, #1
    2400:	b292      	uxth	r2, r2
    2402:	2600      	movs	r6, #0
			while (!spi_is_ready_to_write(module)) {
    2404:	2701      	movs	r7, #1
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2406:	05db      	lsls	r3, r3, #23
    2408:	0ddb      	lsrs	r3, r3, #23
    240a:	4698      	mov	r8, r3
		while (!spi_is_ready_to_read(module)) {
    240c:	2304      	movs	r3, #4
	while (length--) {
    240e:	4c02      	ldr	r4, [pc, #8]	; (2418 <spi_read_buffer_wait+0xd0>)
    2410:	46a2      	mov	sl, r4
    2412:	e7d0      	b.n	23b6 <spi_read_buffer_wait+0x6e>
    2414:	9c01      	ldr	r4, [sp, #4]
    2416:	e7a4      	b.n	2362 <spi_read_buffer_wait+0x1a>
    2418:	0000ffff 	.word	0x0000ffff

0000241c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    241c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    241e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    2420:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    2422:	2c01      	cmp	r4, #1
    2424:	d001      	beq.n	242a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    2426:	0018      	movs	r0, r3
    2428:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    242a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    242c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    242e:	2c00      	cmp	r4, #0
    2430:	d1f9      	bne.n	2426 <spi_select_slave+0xa>
		if (select) {
    2432:	2a00      	cmp	r2, #0
    2434:	d058      	beq.n	24e8 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    2436:	784b      	ldrb	r3, [r1, #1]
    2438:	2b00      	cmp	r3, #0
    243a:	d044      	beq.n	24c6 <spi_select_slave+0xaa>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    243c:	6803      	ldr	r3, [r0, #0]
    243e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    2440:	07db      	lsls	r3, r3, #31
    2442:	d410      	bmi.n	2466 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    2444:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2446:	09d1      	lsrs	r1, r2, #7
		return NULL;
    2448:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    244a:	2900      	cmp	r1, #0
    244c:	d104      	bne.n	2458 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    244e:	0953      	lsrs	r3, r2, #5
    2450:	01db      	lsls	r3, r3, #7
    2452:	492e      	ldr	r1, [pc, #184]	; (250c <spi_select_slave+0xf0>)
    2454:	468c      	mov	ip, r1
    2456:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2458:	211f      	movs	r1, #31
    245a:	4011      	ands	r1, r2
    245c:	2201      	movs	r2, #1
    245e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2460:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    2462:	2305      	movs	r3, #5
    2464:	e7df      	b.n	2426 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    2466:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2468:	09d4      	lsrs	r4, r2, #7
		return NULL;
    246a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    246c:	2c00      	cmp	r4, #0
    246e:	d104      	bne.n	247a <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    2470:	0953      	lsrs	r3, r2, #5
    2472:	01db      	lsls	r3, r3, #7
    2474:	4c25      	ldr	r4, [pc, #148]	; (250c <spi_select_slave+0xf0>)
    2476:	46a4      	mov	ip, r4
    2478:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    247a:	241f      	movs	r4, #31
    247c:	4014      	ands	r4, r2
    247e:	2201      	movs	r2, #1
    2480:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2482:	615a      	str	r2, [r3, #20]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2484:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2486:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2488:	07d2      	lsls	r2, r2, #31
    248a:	d501      	bpl.n	2490 <spi_select_slave+0x74>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    248c:	788a      	ldrb	r2, [r1, #2]
    248e:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    2490:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    2492:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    2494:	2a00      	cmp	r2, #0
    2496:	d1c6      	bne.n	2426 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2498:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    249a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    249c:	7e13      	ldrb	r3, [r2, #24]
    249e:	420b      	tst	r3, r1
    24a0:	d0fc      	beq.n	249c <spi_select_slave+0x80>
    24a2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    24a4:	2300      	movs	r3, #0
	if (!spi_is_ready_to_read(module)) {
    24a6:	0749      	lsls	r1, r1, #29
    24a8:	d5bd      	bpl.n	2426 <spi_select_slave+0xa>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    24aa:	8b53      	ldrh	r3, [r2, #26]
    24ac:	075b      	lsls	r3, r3, #29
    24ae:	d501      	bpl.n	24b4 <spi_select_slave+0x98>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    24b0:	2304      	movs	r3, #4
    24b2:	8353      	strh	r3, [r2, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    24b4:	7983      	ldrb	r3, [r0, #6]
    24b6:	2b01      	cmp	r3, #1
    24b8:	d002      	beq.n	24c0 <spi_select_slave+0xa4>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    24ba:	6a93      	ldr	r3, [r2, #40]	; 0x28
    24bc:	2300      	movs	r3, #0
    24be:	e7b2      	b.n	2426 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    24c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    24c2:	2300      	movs	r3, #0
    24c4:	e7af      	b.n	2426 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    24c6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    24c8:	09d1      	lsrs	r1, r2, #7
		return NULL;
    24ca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    24cc:	2900      	cmp	r1, #0
    24ce:	d104      	bne.n	24da <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    24d0:	0953      	lsrs	r3, r2, #5
    24d2:	01db      	lsls	r3, r3, #7
    24d4:	490d      	ldr	r1, [pc, #52]	; (250c <spi_select_slave+0xf0>)
    24d6:	468c      	mov	ip, r1
    24d8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    24da:	211f      	movs	r1, #31
    24dc:	4011      	ands	r1, r2
    24de:	2201      	movs	r2, #1
    24e0:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    24e2:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    24e4:	2300      	movs	r3, #0
    24e6:	e79e      	b.n	2426 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    24e8:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    24ea:	09d1      	lsrs	r1, r2, #7
		return NULL;
    24ec:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    24ee:	2900      	cmp	r1, #0
    24f0:	d104      	bne.n	24fc <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    24f2:	0953      	lsrs	r3, r2, #5
    24f4:	01db      	lsls	r3, r3, #7
    24f6:	4905      	ldr	r1, [pc, #20]	; (250c <spi_select_slave+0xf0>)
    24f8:	468c      	mov	ip, r1
    24fa:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    24fc:	211f      	movs	r1, #31
    24fe:	4011      	ands	r1, r2
    2500:	2201      	movs	r2, #1
    2502:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2504:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    2506:	2300      	movs	r3, #0
    2508:	e78d      	b.n	2426 <spi_select_slave+0xa>
    250a:	46c0      	nop			; (mov r8, r8)
    250c:	41004400 	.word	0x41004400

00002510 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    2510:	b5f0      	push	{r4, r5, r6, r7, lr}
    2512:	46de      	mov	lr, fp
    2514:	4657      	mov	r7, sl
    2516:	464e      	mov	r6, r9
    2518:	4645      	mov	r5, r8
    251a:	b5e0      	push	{r5, r6, r7, lr}
    251c:	b083      	sub	sp, #12
    251e:	468a      	mov	sl, r1
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    2520:	2338      	movs	r3, #56	; 0x38
    2522:	5cc4      	ldrb	r4, [r0, r3]
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    2524:	3b33      	subs	r3, #51	; 0x33
	if (module->status == STATUS_BUSY) {
    2526:	2c05      	cmp	r4, #5
    2528:	d002      	beq.n	2530 <spi_write_buffer_wait+0x20>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    252a:	3312      	adds	r3, #18
	if (length == 0) {
    252c:	2a00      	cmp	r2, #0
    252e:	d14b      	bne.n	25c8 <spi_write_buffer_wait+0xb8>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    2530:	0018      	movs	r0, r3
    2532:	b003      	add	sp, #12
    2534:	bc3c      	pop	{r2, r3, r4, r5}
    2536:	4690      	mov	r8, r2
    2538:	4699      	mov	r9, r3
    253a:	46a2      	mov	sl, r4
    253c:	46ab      	mov	fp, r5
    253e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_to_send |= (tx_data[tx_pos++] << 8);
    2540:	3702      	adds	r7, #2
    2542:	b2bf      	uxth	r7, r7
    2544:	4641      	mov	r1, r8
    2546:	4653      	mov	r3, sl
    2548:	5c59      	ldrb	r1, [r3, r1]
    254a:	0209      	lsls	r1, r1, #8
    254c:	465b      	mov	r3, fp
    254e:	430b      	orrs	r3, r1
    2550:	e018      	b.n	2584 <spi_write_buffer_wait+0x74>
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2552:	7983      	ldrb	r3, [r0, #6]
    2554:	2b01      	cmp	r3, #1
    2556:	d02a      	beq.n	25ae <spi_write_buffer_wait+0x9e>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2558:	6a93      	ldr	r3, [r2, #40]	; 0x28
	while (length--) {
    255a:	3e01      	subs	r6, #1
    255c:	b2b6      	uxth	r6, r6
    255e:	4566      	cmp	r6, ip
    2560:	d027      	beq.n	25b2 <spi_write_buffer_wait+0xa2>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2562:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2564:	7e13      	ldrb	r3, [r2, #24]
		while (!spi_is_ready_to_write(module)) {
    2566:	4223      	tst	r3, r4
    2568:	d0fc      	beq.n	2564 <spi_write_buffer_wait+0x54>
		uint16_t data_to_send = tx_data[tx_pos++];
    256a:	1c7b      	adds	r3, r7, #1
    256c:	b29b      	uxth	r3, r3
    256e:	4698      	mov	r8, r3
    2570:	4653      	mov	r3, sl
    2572:	5ddb      	ldrb	r3, [r3, r7]
    2574:	469b      	mov	fp, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2576:	7981      	ldrb	r1, [r0, #6]
    2578:	2901      	cmp	r1, #1
    257a:	d0e1      	beq.n	2540 <spi_write_buffer_wait+0x30>
		uint16_t data_to_send = tx_data[tx_pos++];
    257c:	4669      	mov	r1, sp
    257e:	80cb      	strh	r3, [r1, #6]
    2580:	88cb      	ldrh	r3, [r1, #6]
    2582:	4647      	mov	r7, r8
    2584:	7e11      	ldrb	r1, [r2, #24]
	if (!spi_is_ready_to_write(module)) {
    2586:	4221      	tst	r1, r4
    2588:	d002      	beq.n	2590 <spi_write_buffer_wait+0x80>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    258a:	05db      	lsls	r3, r3, #23
    258c:	0ddb      	lsrs	r3, r3, #23
    258e:	6293      	str	r3, [r2, #40]	; 0x28
		if (module->receiver_enabled) {
    2590:	79c3      	ldrb	r3, [r0, #7]
    2592:	2b00      	cmp	r3, #0
    2594:	d0e1      	beq.n	255a <spi_write_buffer_wait+0x4a>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2596:	6802      	ldr	r2, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2598:	7e13      	ldrb	r3, [r2, #24]
			while (!spi_is_ready_to_read(module)) {
    259a:	422b      	tst	r3, r5
    259c:	d0fc      	beq.n	2598 <spi_write_buffer_wait+0x88>
    259e:	7e13      	ldrb	r3, [r2, #24]
	if (!spi_is_ready_to_read(module)) {
    25a0:	422b      	tst	r3, r5
    25a2:	d0da      	beq.n	255a <spi_write_buffer_wait+0x4a>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    25a4:	8b53      	ldrh	r3, [r2, #26]
    25a6:	422b      	tst	r3, r5
    25a8:	d0d3      	beq.n	2552 <spi_write_buffer_wait+0x42>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    25aa:	8355      	strh	r5, [r2, #26]
    25ac:	e7d1      	b.n	2552 <spi_write_buffer_wait+0x42>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    25ae:	6a93      	ldr	r3, [r2, #40]	; 0x28
    25b0:	e7d3      	b.n	255a <spi_write_buffer_wait+0x4a>
	if (module->mode == SPI_MODE_MASTER) {
    25b2:	7942      	ldrb	r2, [r0, #5]
	return STATUS_OK;
    25b4:	2300      	movs	r3, #0
	if (module->mode == SPI_MODE_MASTER) {
    25b6:	2a01      	cmp	r2, #1
    25b8:	d1ba      	bne.n	2530 <spi_write_buffer_wait+0x20>
	SercomSpi *const spi_module = &(module->hw->SPI);
    25ba:	6801      	ldr	r1, [r0, #0]
		while (!spi_is_write_complete(module)) {
    25bc:	3201      	adds	r2, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    25be:	7e0b      	ldrb	r3, [r1, #24]
    25c0:	4213      	tst	r3, r2
    25c2:	d0fc      	beq.n	25be <spi_write_buffer_wait+0xae>
	return STATUS_OK;
    25c4:	2300      	movs	r3, #0
    25c6:	e7b3      	b.n	2530 <spi_write_buffer_wait+0x20>
	while (length--) {
    25c8:	3a01      	subs	r2, #1
    25ca:	b296      	uxth	r6, r2
    25cc:	2700      	movs	r7, #0
		while (!spi_is_ready_to_write(module)) {
    25ce:	2401      	movs	r4, #1
			while (!spi_is_ready_to_read(module)) {
    25d0:	2504      	movs	r5, #4
	while (length--) {
    25d2:	4b01      	ldr	r3, [pc, #4]	; (25d8 <spi_write_buffer_wait+0xc8>)
    25d4:	469c      	mov	ip, r3
    25d6:	e7c4      	b.n	2562 <spi_write_buffer_wait+0x52>
    25d8:	0000ffff 	.word	0x0000ffff

000025dc <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    25dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    25de:	0080      	lsls	r0, r0, #2
    25e0:	4b70      	ldr	r3, [pc, #448]	; (27a4 <_spi_interrupt_handler+0x1c8>)
    25e2:	58c4      	ldr	r4, [r0, r3]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    25e4:	6826      	ldr	r6, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    25e6:	2337      	movs	r3, #55	; 0x37
	uint8_t callback_mask =
    25e8:	5ce7      	ldrb	r7, [r4, r3]
    25ea:	2236      	movs	r2, #54	; 0x36
    25ec:	5ca2      	ldrb	r2, [r4, r2]
    25ee:	4017      	ands	r7, r2

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    25f0:	7e33      	ldrb	r3, [r6, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    25f2:	7db5      	ldrb	r5, [r6, #22]
    25f4:	401d      	ands	r5, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    25f6:	07eb      	lsls	r3, r5, #31
    25f8:	d502      	bpl.n	2600 <_spi_interrupt_handler+0x24>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    25fa:	7963      	ldrb	r3, [r4, #5]
    25fc:	2b01      	cmp	r3, #1
    25fe:	d01e      	beq.n	263e <_spi_interrupt_handler+0x62>
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    2600:	076b      	lsls	r3, r5, #29
    2602:	d511      	bpl.n	2628 <_spi_interrupt_handler+0x4c>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2604:	8b73      	ldrh	r3, [r6, #26]
    2606:	075b      	lsls	r3, r3, #29
    2608:	d55a      	bpl.n	26c0 <_spi_interrupt_handler+0xe4>
			if (module->dir != SPI_DIRECTION_WRITE) {
    260a:	7a63      	ldrb	r3, [r4, #9]
    260c:	2b01      	cmp	r3, #1
    260e:	d008      	beq.n	2622 <_spi_interrupt_handler+0x46>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    2610:	221e      	movs	r2, #30
    2612:	2338      	movs	r3, #56	; 0x38
    2614:	54e2      	strb	r2, [r4, r3]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    2616:	3b35      	subs	r3, #53	; 0x35
    2618:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    261a:	3302      	adds	r3, #2
    261c:	7533      	strb	r3, [r6, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    261e:	073b      	lsls	r3, r7, #28
    2620:	d44a      	bmi.n	26b8 <_spi_interrupt_handler+0xdc>
					(module->callback[SPI_CALLBACK_ERROR])(module);
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    2622:	6ab3      	ldr	r3, [r6, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2624:	2304      	movs	r3, #4
    2626:	8373      	strh	r3, [r6, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    2628:	07ab      	lsls	r3, r5, #30
    262a:	d503      	bpl.n	2634 <_spi_interrupt_handler+0x58>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    262c:	7963      	ldrb	r3, [r4, #5]
    262e:	2b01      	cmp	r3, #1
    2630:	d100      	bne.n	2634 <_spi_interrupt_handler+0x58>
    2632:	e097      	b.n	2764 <_spi_interrupt_handler+0x188>
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    2634:	b26d      	sxtb	r5, r5
    2636:	2d00      	cmp	r5, #0
    2638:	da00      	bge.n	263c <_spi_interrupt_handler+0x60>
    263a:	e0a9      	b.n	2790 <_spi_interrupt_handler+0x1b4>
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
		}
	}
#  endif
}
    263c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(module->dir == SPI_DIRECTION_READ)) {
    263e:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    2640:	2b00      	cmp	r3, #0
    2642:	d022      	beq.n	268a <_spi_interrupt_handler+0xae>
			(module->dir != SPI_DIRECTION_READ))
    2644:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    2646:	2b00      	cmp	r3, #0
    2648:	d0da      	beq.n	2600 <_spi_interrupt_handler+0x24>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    264a:	6821      	ldr	r1, [r4, #0]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    264c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    264e:	7813      	ldrb	r3, [r2, #0]
    2650:	b2db      	uxtb	r3, r3
	(module->tx_buffer_ptr)++;
    2652:	1c50      	adds	r0, r2, #1
    2654:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2656:	79a0      	ldrb	r0, [r4, #6]
    2658:	2801      	cmp	r0, #1
    265a:	d027      	beq.n	26ac <_spi_interrupt_handler+0xd0>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    265c:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    265e:	05db      	lsls	r3, r3, #23
    2660:	0ddb      	lsrs	r3, r3, #23
    2662:	628b      	str	r3, [r1, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    2664:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2666:	3b01      	subs	r3, #1
    2668:	b29b      	uxth	r3, r3
    266a:	86a3      	strh	r3, [r4, #52]	; 0x34
			if (module->remaining_tx_buffer_length == 0) {
    266c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    266e:	b29b      	uxth	r3, r3
    2670:	2b00      	cmp	r3, #0
    2672:	d1c5      	bne.n	2600 <_spi_interrupt_handler+0x24>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2674:	3301      	adds	r3, #1
    2676:	7533      	strb	r3, [r6, #20]
				if (module->dir == SPI_DIRECTION_WRITE &&
    2678:	7a63      	ldrb	r3, [r4, #9]
    267a:	2b01      	cmp	r3, #1
    267c:	d1c0      	bne.n	2600 <_spi_interrupt_handler+0x24>
    267e:	79e3      	ldrb	r3, [r4, #7]
    2680:	2b00      	cmp	r3, #0
    2682:	d1bd      	bne.n	2600 <_spi_interrupt_handler+0x24>
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2684:	3302      	adds	r3, #2
    2686:	75b3      	strb	r3, [r6, #22]
    2688:	e7ba      	b.n	2600 <_spi_interrupt_handler+0x24>
	spi_hw->DATA.reg = dummy_write;
    268a:	4b47      	ldr	r3, [pc, #284]	; (27a8 <_spi_interrupt_handler+0x1cc>)
    268c:	881b      	ldrh	r3, [r3, #0]
    268e:	62b3      	str	r3, [r6, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    2690:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2692:	3b01      	subs	r3, #1
    2694:	b29b      	uxth	r3, r3
    2696:	8663      	strh	r3, [r4, #50]	; 0x32
			if (module->remaining_dummy_buffer_length == 0) {
    2698:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    269a:	b29b      	uxth	r3, r3
    269c:	2b00      	cmp	r3, #0
    269e:	d101      	bne.n	26a4 <_spi_interrupt_handler+0xc8>
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    26a0:	3301      	adds	r3, #1
    26a2:	7533      	strb	r3, [r6, #20]
		if (0
    26a4:	7963      	ldrb	r3, [r4, #5]
    26a6:	2b01      	cmp	r3, #1
    26a8:	d0cc      	beq.n	2644 <_spi_interrupt_handler+0x68>
    26aa:	e7a9      	b.n	2600 <_spi_interrupt_handler+0x24>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    26ac:	7850      	ldrb	r0, [r2, #1]
    26ae:	0200      	lsls	r0, r0, #8
    26b0:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    26b2:	3202      	adds	r2, #2
    26b4:	62e2      	str	r2, [r4, #44]	; 0x2c
    26b6:	e7d2      	b.n	265e <_spi_interrupt_handler+0x82>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    26b8:	0020      	movs	r0, r4
    26ba:	69a3      	ldr	r3, [r4, #24]
    26bc:	4798      	blx	r3
    26be:	e7b0      	b.n	2622 <_spi_interrupt_handler+0x46>
			if (module->dir == SPI_DIRECTION_WRITE) {
    26c0:	7a63      	ldrb	r3, [r4, #9]
    26c2:	2b01      	cmp	r3, #1
    26c4:	d028      	beq.n	2718 <_spi_interrupt_handler+0x13c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    26c6:	6823      	ldr	r3, [r4, #0]
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    26c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26ca:	05db      	lsls	r3, r3, #23
    26cc:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    26ce:	b2da      	uxtb	r2, r3
    26d0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    26d2:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    26d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    26d6:	1c51      	adds	r1, r2, #1
    26d8:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    26da:	79a1      	ldrb	r1, [r4, #6]
    26dc:	2901      	cmp	r1, #1
    26de:	d034      	beq.n	274a <_spi_interrupt_handler+0x16e>
	module->remaining_rx_buffer_length--;
    26e0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    26e2:	3b01      	subs	r3, #1
    26e4:	b29b      	uxth	r3, r3
    26e6:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    26e8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    26ea:	b29b      	uxth	r3, r3
    26ec:	2b00      	cmp	r3, #0
    26ee:	d000      	beq.n	26f2 <_spi_interrupt_handler+0x116>
    26f0:	e79a      	b.n	2628 <_spi_interrupt_handler+0x4c>
					module->status = STATUS_OK;
    26f2:	2200      	movs	r2, #0
    26f4:	3338      	adds	r3, #56	; 0x38
    26f6:	54e2      	strb	r2, [r4, r3]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    26f8:	3b34      	subs	r3, #52	; 0x34
    26fa:	7533      	strb	r3, [r6, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    26fc:	7a63      	ldrb	r3, [r4, #9]
    26fe:	2b02      	cmp	r3, #2
    2700:	d029      	beq.n	2756 <_spi_interrupt_handler+0x17a>
					} else if (module->dir == SPI_DIRECTION_READ) {
    2702:	7a63      	ldrb	r3, [r4, #9]
    2704:	2b00      	cmp	r3, #0
    2706:	d000      	beq.n	270a <_spi_interrupt_handler+0x12e>
    2708:	e78e      	b.n	2628 <_spi_interrupt_handler+0x4c>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    270a:	07bb      	lsls	r3, r7, #30
    270c:	d400      	bmi.n	2710 <_spi_interrupt_handler+0x134>
    270e:	e78b      	b.n	2628 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    2710:	0020      	movs	r0, r4
    2712:	6923      	ldr	r3, [r4, #16]
    2714:	4798      	blx	r3
    2716:	e787      	b.n	2628 <_spi_interrupt_handler+0x4c>
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2718:	6823      	ldr	r3, [r4, #0]
	flush = spi_hw->DATA.reg;
    271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    271c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    271e:	3b01      	subs	r3, #1
    2720:	b29b      	uxth	r3, r3
    2722:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    2724:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2726:	b29b      	uxth	r3, r3
    2728:	2b00      	cmp	r3, #0
    272a:	d000      	beq.n	272e <_spi_interrupt_handler+0x152>
    272c:	e77c      	b.n	2628 <_spi_interrupt_handler+0x4c>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    272e:	3304      	adds	r3, #4
    2730:	7533      	strb	r3, [r6, #20]
					module->status = STATUS_OK;
    2732:	2200      	movs	r2, #0
    2734:	3334      	adds	r3, #52	; 0x34
    2736:	54e2      	strb	r2, [r4, r3]
					module->dir = SPI_DIRECTION_IDLE;
    2738:	3b35      	subs	r3, #53	; 0x35
    273a:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    273c:	07fb      	lsls	r3, r7, #31
    273e:	d400      	bmi.n	2742 <_spi_interrupt_handler+0x166>
    2740:	e772      	b.n	2628 <_spi_interrupt_handler+0x4c>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    2742:	0020      	movs	r0, r4
    2744:	68e3      	ldr	r3, [r4, #12]
    2746:	4798      	blx	r3
    2748:	e76e      	b.n	2628 <_spi_interrupt_handler+0x4c>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    274a:	0a1b      	lsrs	r3, r3, #8
    274c:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    274e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2750:	3301      	adds	r3, #1
    2752:	62a3      	str	r3, [r4, #40]	; 0x28
    2754:	e7c4      	b.n	26e0 <_spi_interrupt_handler+0x104>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    2756:	077b      	lsls	r3, r7, #29
    2758:	d400      	bmi.n	275c <_spi_interrupt_handler+0x180>
    275a:	e765      	b.n	2628 <_spi_interrupt_handler+0x4c>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    275c:	0020      	movs	r0, r4
    275e:	6963      	ldr	r3, [r4, #20]
    2760:	4798      	blx	r3
    2762:	e761      	b.n	2628 <_spi_interrupt_handler+0x4c>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2764:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    2766:	2b01      	cmp	r3, #1
    2768:	d000      	beq.n	276c <_spi_interrupt_handler+0x190>
    276a:	e763      	b.n	2634 <_spi_interrupt_handler+0x58>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    276c:	79e3      	ldrb	r3, [r4, #7]
    276e:	2b00      	cmp	r3, #0
    2770:	d000      	beq.n	2774 <_spi_interrupt_handler+0x198>
    2772:	e75f      	b.n	2634 <_spi_interrupt_handler+0x58>
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2774:	3302      	adds	r3, #2
    2776:	7533      	strb	r3, [r6, #20]
			module->dir = SPI_DIRECTION_IDLE;
    2778:	3301      	adds	r3, #1
    277a:	7263      	strb	r3, [r4, #9]
			module->status = STATUS_OK;
    277c:	2200      	movs	r2, #0
    277e:	3335      	adds	r3, #53	; 0x35
    2780:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    2782:	07fb      	lsls	r3, r7, #31
    2784:	d400      	bmi.n	2788 <_spi_interrupt_handler+0x1ac>
    2786:	e755      	b.n	2634 <_spi_interrupt_handler+0x58>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    2788:	0020      	movs	r0, r4
    278a:	68e3      	ldr	r3, [r4, #12]
    278c:	4798      	blx	r3
    278e:	e751      	b.n	2634 <_spi_interrupt_handler+0x58>
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2790:	2380      	movs	r3, #128	; 0x80
    2792:	7533      	strb	r3, [r6, #20]
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2794:	7633      	strb	r3, [r6, #24]
		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    2796:	067b      	lsls	r3, r7, #25
    2798:	d400      	bmi.n	279c <_spi_interrupt_handler+0x1c0>
    279a:	e74f      	b.n	263c <_spi_interrupt_handler+0x60>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    279c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    279e:	0020      	movs	r0, r4
    27a0:	4798      	blx	r3
}
    27a2:	e74b      	b.n	263c <_spi_interrupt_handler+0x60>
    27a4:	20000b74 	.word	0x20000b74
    27a8:	20000b8c 	.word	0x20000b8c

000027ac <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    27ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ae:	46de      	mov	lr, fp
    27b0:	4657      	mov	r7, sl
    27b2:	464e      	mov	r6, r9
    27b4:	4645      	mov	r5, r8
    27b6:	b5e0      	push	{r5, r6, r7, lr}
    27b8:	b091      	sub	sp, #68	; 0x44
    27ba:	0005      	movs	r5, r0
    27bc:	000c      	movs	r4, r1
    27be:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    27c0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    27c2:	0008      	movs	r0, r1
    27c4:	4bbc      	ldr	r3, [pc, #752]	; (2ab8 <usart_init+0x30c>)
    27c6:	4798      	blx	r3
    27c8:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    27ca:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    27cc:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    27ce:	07db      	lsls	r3, r3, #31
    27d0:	d506      	bpl.n	27e0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    27d2:	b011      	add	sp, #68	; 0x44
    27d4:	bc3c      	pop	{r2, r3, r4, r5}
    27d6:	4690      	mov	r8, r2
    27d8:	4699      	mov	r9, r3
    27da:	46a2      	mov	sl, r4
    27dc:	46ab      	mov	fp, r5
    27de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    27e0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
    27e2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    27e4:	079b      	lsls	r3, r3, #30
    27e6:	d4f4      	bmi.n	27d2 <usart_init+0x26>
    27e8:	49b4      	ldr	r1, [pc, #720]	; (2abc <usart_init+0x310>)
    27ea:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    27ec:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    27ee:	2301      	movs	r3, #1
    27f0:	40bb      	lsls	r3, r7
    27f2:	4303      	orrs	r3, r0
    27f4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    27f6:	a90f      	add	r1, sp, #60	; 0x3c
    27f8:	272d      	movs	r7, #45	; 0x2d
    27fa:	5df3      	ldrb	r3, [r6, r7]
    27fc:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    27fe:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2800:	b2d3      	uxtb	r3, r2
    2802:	9302      	str	r3, [sp, #8]
    2804:	0018      	movs	r0, r3
    2806:	4bae      	ldr	r3, [pc, #696]	; (2ac0 <usart_init+0x314>)
    2808:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    280a:	9802      	ldr	r0, [sp, #8]
    280c:	4bad      	ldr	r3, [pc, #692]	; (2ac4 <usart_init+0x318>)
    280e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2810:	5df0      	ldrb	r0, [r6, r7]
    2812:	2100      	movs	r1, #0
    2814:	4bac      	ldr	r3, [pc, #688]	; (2ac8 <usart_init+0x31c>)
    2816:	4798      	blx	r3
	module->character_size = config->character_size;
    2818:	7af3      	ldrb	r3, [r6, #11]
    281a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    281c:	2324      	movs	r3, #36	; 0x24
    281e:	5cf3      	ldrb	r3, [r6, r3]
    2820:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    2822:	2325      	movs	r3, #37	; 0x25
    2824:	5cf3      	ldrb	r3, [r6, r3]
    2826:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2828:	7ef3      	ldrb	r3, [r6, #27]
    282a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    282c:	7f33      	ldrb	r3, [r6, #28]
    282e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2830:	682b      	ldr	r3, [r5, #0]
    2832:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2834:	0018      	movs	r0, r3
    2836:	4ba0      	ldr	r3, [pc, #640]	; (2ab8 <usart_init+0x30c>)
    2838:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    283a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
    283c:	2200      	movs	r2, #0
    283e:	230e      	movs	r3, #14
    2840:	a906      	add	r1, sp, #24
    2842:	468c      	mov	ip, r1
    2844:	4463      	add	r3, ip
    2846:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2848:	8a32      	ldrh	r2, [r6, #16]
    284a:	9202      	str	r2, [sp, #8]
    284c:	2380      	movs	r3, #128	; 0x80
    284e:	01db      	lsls	r3, r3, #7
    2850:	429a      	cmp	r2, r3
    2852:	d100      	bne.n	2856 <usart_init+0xaa>
    2854:	e09e      	b.n	2994 <usart_init+0x1e8>
    2856:	d90f      	bls.n	2878 <usart_init+0xcc>
    2858:	23c0      	movs	r3, #192	; 0xc0
    285a:	01db      	lsls	r3, r3, #7
    285c:	9a02      	ldr	r2, [sp, #8]
    285e:	429a      	cmp	r2, r3
    2860:	d100      	bne.n	2864 <usart_init+0xb8>
    2862:	e092      	b.n	298a <usart_init+0x1de>
    2864:	2380      	movs	r3, #128	; 0x80
    2866:	021b      	lsls	r3, r3, #8
    2868:	429a      	cmp	r2, r3
    286a:	d000      	beq.n	286e <usart_init+0xc2>
    286c:	e11f      	b.n	2aae <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    286e:	2303      	movs	r3, #3
    2870:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2872:	2300      	movs	r3, #0
    2874:	9307      	str	r3, [sp, #28]
    2876:	e008      	b.n	288a <usart_init+0xde>
	switch (config->sample_rate) {
    2878:	2380      	movs	r3, #128	; 0x80
    287a:	019b      	lsls	r3, r3, #6
    287c:	429a      	cmp	r2, r3
    287e:	d000      	beq.n	2882 <usart_init+0xd6>
    2880:	e115      	b.n	2aae <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2882:	2310      	movs	r3, #16
    2884:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2886:	3b0f      	subs	r3, #15
    2888:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    288a:	6833      	ldr	r3, [r6, #0]
    288c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    288e:	68f3      	ldr	r3, [r6, #12]
    2890:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2892:	6973      	ldr	r3, [r6, #20]
    2894:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2896:	7e33      	ldrb	r3, [r6, #24]
    2898:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    289a:	2326      	movs	r3, #38	; 0x26
    289c:	5cf3      	ldrb	r3, [r6, r3]
    289e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    28a0:	6873      	ldr	r3, [r6, #4]
    28a2:	4699      	mov	r9, r3
	switch (transfer_mode)
    28a4:	2b00      	cmp	r3, #0
    28a6:	d100      	bne.n	28aa <usart_init+0xfe>
    28a8:	e0a0      	b.n	29ec <usart_init+0x240>
    28aa:	2380      	movs	r3, #128	; 0x80
    28ac:	055b      	lsls	r3, r3, #21
    28ae:	4599      	cmp	r9, r3
    28b0:	d100      	bne.n	28b4 <usart_init+0x108>
    28b2:	e084      	b.n	29be <usart_init+0x212>
	if(config->encoding_format_enable) {
    28b4:	7e73      	ldrb	r3, [r6, #25]
    28b6:	2b00      	cmp	r3, #0
    28b8:	d002      	beq.n	28c0 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    28ba:	7eb3      	ldrb	r3, [r6, #26]
    28bc:	4642      	mov	r2, r8
    28be:	7393      	strb	r3, [r2, #14]
	SercomUsart *const usart_hw = &(module->hw->USART);
    28c0:	682a      	ldr	r2, [r5, #0]
    28c2:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
    28c4:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    28c6:	2b00      	cmp	r3, #0
    28c8:	d1fc      	bne.n	28c4 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
    28ca:	330e      	adds	r3, #14
    28cc:	aa06      	add	r2, sp, #24
    28ce:	4694      	mov	ip, r2
    28d0:	4463      	add	r3, ip
    28d2:	881b      	ldrh	r3, [r3, #0]
    28d4:	4642      	mov	r2, r8
    28d6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    28d8:	9b05      	ldr	r3, [sp, #20]
    28da:	9a03      	ldr	r2, [sp, #12]
    28dc:	4313      	orrs	r3, r2
    28de:	9a04      	ldr	r2, [sp, #16]
    28e0:	4313      	orrs	r3, r2
    28e2:	464a      	mov	r2, r9
    28e4:	4313      	orrs	r3, r2
    28e6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    28e8:	465b      	mov	r3, fp
    28ea:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    28ec:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    28ee:	4653      	mov	r3, sl
    28f0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    28f2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    28f4:	2327      	movs	r3, #39	; 0x27
    28f6:	5cf3      	ldrb	r3, [r6, r3]
    28f8:	2b00      	cmp	r3, #0
    28fa:	d101      	bne.n	2900 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    28fc:	3304      	adds	r3, #4
    28fe:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2900:	7e73      	ldrb	r3, [r6, #25]
    2902:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2904:	7f32      	ldrb	r2, [r6, #28]
    2906:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2908:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    290a:	7f72      	ldrb	r2, [r6, #29]
    290c:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    290e:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2910:	2224      	movs	r2, #36	; 0x24
    2912:	5cb2      	ldrb	r2, [r6, r2]
    2914:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2916:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2918:	2225      	movs	r2, #37	; 0x25
    291a:	5cb2      	ldrb	r2, [r6, r2]
    291c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    291e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2920:	7ab1      	ldrb	r1, [r6, #10]
    2922:	7af2      	ldrb	r2, [r6, #11]
    2924:	4311      	orrs	r1, r2
    2926:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2928:	8933      	ldrh	r3, [r6, #8]
    292a:	2bff      	cmp	r3, #255	; 0xff
    292c:	d100      	bne.n	2930 <usart_init+0x184>
    292e:	e081      	b.n	2a34 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2930:	2280      	movs	r2, #128	; 0x80
    2932:	0452      	lsls	r2, r2, #17
    2934:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    2936:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    2938:	232c      	movs	r3, #44	; 0x2c
    293a:	5cf3      	ldrb	r3, [r6, r3]
    293c:	2b00      	cmp	r3, #0
    293e:	d103      	bne.n	2948 <usart_init+0x19c>
    2940:	4b62      	ldr	r3, [pc, #392]	; (2acc <usart_init+0x320>)
    2942:	789b      	ldrb	r3, [r3, #2]
    2944:	079b      	lsls	r3, r3, #30
    2946:	d501      	bpl.n	294c <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    2948:	2380      	movs	r3, #128	; 0x80
    294a:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    294c:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    294e:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2950:	2b00      	cmp	r3, #0
    2952:	d1fc      	bne.n	294e <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
    2954:	4643      	mov	r3, r8
    2956:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2958:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    295a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    295c:	2b00      	cmp	r3, #0
    295e:	d1fc      	bne.n	295a <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
    2960:	4643      	mov	r3, r8
    2962:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2964:	ab0e      	add	r3, sp, #56	; 0x38
    2966:	2280      	movs	r2, #128	; 0x80
    2968:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    296a:	2200      	movs	r2, #0
    296c:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    296e:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2970:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2972:	6b33      	ldr	r3, [r6, #48]	; 0x30
    2974:	930a      	str	r3, [sp, #40]	; 0x28
    2976:	6b73      	ldr	r3, [r6, #52]	; 0x34
    2978:	930b      	str	r3, [sp, #44]	; 0x2c
    297a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    297c:	930c      	str	r3, [sp, #48]	; 0x30
    297e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2980:	9302      	str	r3, [sp, #8]
    2982:	930d      	str	r3, [sp, #52]	; 0x34
    2984:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2986:	ae0a      	add	r6, sp, #40	; 0x28
    2988:	e063      	b.n	2a52 <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    298a:	2308      	movs	r3, #8
    298c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    298e:	3b07      	subs	r3, #7
    2990:	9307      	str	r3, [sp, #28]
    2992:	e77a      	b.n	288a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
    2994:	6833      	ldr	r3, [r6, #0]
    2996:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    2998:	68f3      	ldr	r3, [r6, #12]
    299a:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    299c:	6973      	ldr	r3, [r6, #20]
    299e:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    29a0:	7e33      	ldrb	r3, [r6, #24]
    29a2:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    29a4:	2326      	movs	r3, #38	; 0x26
    29a6:	5cf3      	ldrb	r3, [r6, r3]
    29a8:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    29aa:	6873      	ldr	r3, [r6, #4]
    29ac:	4699      	mov	r9, r3
	switch (transfer_mode)
    29ae:	2b00      	cmp	r3, #0
    29b0:	d018      	beq.n	29e4 <usart_init+0x238>
    29b2:	2380      	movs	r3, #128	; 0x80
    29b4:	055b      	lsls	r3, r3, #21
    29b6:	4599      	cmp	r9, r3
    29b8:	d001      	beq.n	29be <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
    29ba:	2000      	movs	r0, #0
    29bc:	e025      	b.n	2a0a <usart_init+0x25e>
			if (!config->use_external_clock) {
    29be:	2327      	movs	r3, #39	; 0x27
    29c0:	5cf3      	ldrb	r3, [r6, r3]
    29c2:	2b00      	cmp	r3, #0
    29c4:	d000      	beq.n	29c8 <usart_init+0x21c>
    29c6:	e775      	b.n	28b4 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    29c8:	6a33      	ldr	r3, [r6, #32]
    29ca:	001f      	movs	r7, r3
    29cc:	b2c0      	uxtb	r0, r0
    29ce:	4b40      	ldr	r3, [pc, #256]	; (2ad0 <usart_init+0x324>)
    29d0:	4798      	blx	r3
    29d2:	0001      	movs	r1, r0
    29d4:	220e      	movs	r2, #14
    29d6:	ab06      	add	r3, sp, #24
    29d8:	469c      	mov	ip, r3
    29da:	4462      	add	r2, ip
    29dc:	0038      	movs	r0, r7
    29de:	4b3d      	ldr	r3, [pc, #244]	; (2ad4 <usart_init+0x328>)
    29e0:	4798      	blx	r3
    29e2:	e012      	b.n	2a0a <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    29e4:	2308      	movs	r3, #8
    29e6:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    29e8:	2300      	movs	r3, #0
    29ea:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    29ec:	2327      	movs	r3, #39	; 0x27
    29ee:	5cf3      	ldrb	r3, [r6, r3]
    29f0:	2b00      	cmp	r3, #0
    29f2:	d00e      	beq.n	2a12 <usart_init+0x266>
				status_code =
    29f4:	9b06      	ldr	r3, [sp, #24]
    29f6:	9300      	str	r3, [sp, #0]
    29f8:	9b07      	ldr	r3, [sp, #28]
    29fa:	220e      	movs	r2, #14
    29fc:	a906      	add	r1, sp, #24
    29fe:	468c      	mov	ip, r1
    2a00:	4462      	add	r2, ip
    2a02:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2a04:	6a30      	ldr	r0, [r6, #32]
    2a06:	4f34      	ldr	r7, [pc, #208]	; (2ad8 <usart_init+0x32c>)
    2a08:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2a0a:	2800      	cmp	r0, #0
    2a0c:	d000      	beq.n	2a10 <usart_init+0x264>
    2a0e:	e6e0      	b.n	27d2 <usart_init+0x26>
    2a10:	e750      	b.n	28b4 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
    2a12:	6a33      	ldr	r3, [r6, #32]
    2a14:	001f      	movs	r7, r3
    2a16:	b2c0      	uxtb	r0, r0
    2a18:	4b2d      	ldr	r3, [pc, #180]	; (2ad0 <usart_init+0x324>)
    2a1a:	4798      	blx	r3
    2a1c:	0001      	movs	r1, r0
				status_code =
    2a1e:	9b06      	ldr	r3, [sp, #24]
    2a20:	9300      	str	r3, [sp, #0]
    2a22:	9b07      	ldr	r3, [sp, #28]
    2a24:	220e      	movs	r2, #14
    2a26:	a806      	add	r0, sp, #24
    2a28:	4684      	mov	ip, r0
    2a2a:	4462      	add	r2, ip
    2a2c:	0038      	movs	r0, r7
    2a2e:	4f2a      	ldr	r7, [pc, #168]	; (2ad8 <usart_init+0x32c>)
    2a30:	47b8      	blx	r7
    2a32:	e7ea      	b.n	2a0a <usart_init+0x25e>
		if(config->lin_slave_enable) {
    2a34:	7ef3      	ldrb	r3, [r6, #27]
    2a36:	2b00      	cmp	r3, #0
    2a38:	d100      	bne.n	2a3c <usart_init+0x290>
    2a3a:	e77d      	b.n	2938 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2a3c:	2380      	movs	r3, #128	; 0x80
    2a3e:	04db      	lsls	r3, r3, #19
    2a40:	431f      	orrs	r7, r3
    2a42:	e779      	b.n	2938 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2a44:	0020      	movs	r0, r4
    2a46:	4b25      	ldr	r3, [pc, #148]	; (2adc <usart_init+0x330>)
    2a48:	4798      	blx	r3
    2a4a:	e007      	b.n	2a5c <usart_init+0x2b0>
    2a4c:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2a4e:	2f04      	cmp	r7, #4
    2a50:	d00d      	beq.n	2a6e <usart_init+0x2c2>
    2a52:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2a54:	00bb      	lsls	r3, r7, #2
    2a56:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2a58:	2800      	cmp	r0, #0
    2a5a:	d0f3      	beq.n	2a44 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
    2a5c:	1c43      	adds	r3, r0, #1
    2a5e:	d0f5      	beq.n	2a4c <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    2a60:	a90e      	add	r1, sp, #56	; 0x38
    2a62:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2a64:	0c00      	lsrs	r0, r0, #16
    2a66:	b2c0      	uxtb	r0, r0
    2a68:	4b1d      	ldr	r3, [pc, #116]	; (2ae0 <usart_init+0x334>)
    2a6a:	4798      	blx	r3
    2a6c:	e7ee      	b.n	2a4c <usart_init+0x2a0>
		module->callback[i]            = NULL;
    2a6e:	2300      	movs	r3, #0
    2a70:	60eb      	str	r3, [r5, #12]
    2a72:	612b      	str	r3, [r5, #16]
    2a74:	616b      	str	r3, [r5, #20]
    2a76:	61ab      	str	r3, [r5, #24]
    2a78:	61eb      	str	r3, [r5, #28]
    2a7a:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2a7c:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    2a7e:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    2a80:	2200      	movs	r2, #0
    2a82:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2a84:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2a86:	3330      	adds	r3, #48	; 0x30
    2a88:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2a8a:	3301      	adds	r3, #1
    2a8c:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    2a8e:	3301      	adds	r3, #1
    2a90:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    2a92:	3301      	adds	r3, #1
    2a94:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2a96:	6828      	ldr	r0, [r5, #0]
    2a98:	4b07      	ldr	r3, [pc, #28]	; (2ab8 <usart_init+0x30c>)
    2a9a:	4798      	blx	r3
    2a9c:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    2a9e:	4911      	ldr	r1, [pc, #68]	; (2ae4 <usart_init+0x338>)
    2aa0:	4b11      	ldr	r3, [pc, #68]	; (2ae8 <usart_init+0x33c>)
    2aa2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    2aa4:	00a4      	lsls	r4, r4, #2
    2aa6:	4b11      	ldr	r3, [pc, #68]	; (2aec <usart_init+0x340>)
    2aa8:	50e5      	str	r5, [r4, r3]
	return status_code;
    2aaa:	2000      	movs	r0, #0
    2aac:	e691      	b.n	27d2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2aae:	2310      	movs	r3, #16
    2ab0:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    2ab2:	2300      	movs	r3, #0
    2ab4:	9307      	str	r3, [sp, #28]
    2ab6:	e6e8      	b.n	288a <usart_init+0xde>
    2ab8:	00001f65 	.word	0x00001f65
    2abc:	40000400 	.word	0x40000400
    2ac0:	000033c1 	.word	0x000033c1
    2ac4:	00003335 	.word	0x00003335
    2ac8:	00001da1 	.word	0x00001da1
    2acc:	41002000 	.word	0x41002000
    2ad0:	000033dd 	.word	0x000033dd
    2ad4:	00001ce3 	.word	0x00001ce3
    2ad8:	00001d0d 	.word	0x00001d0d
    2adc:	00001ded 	.word	0x00001ded
    2ae0:	000034b9 	.word	0x000034b9
    2ae4:	00002bf1 	.word	0x00002bf1
    2ae8:	00001fa1 	.word	0x00001fa1
    2aec:	20000b74 	.word	0x20000b74

00002af0 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2af2:	0006      	movs	r6, r0
    2af4:	000c      	movs	r4, r1
    2af6:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2af8:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2afa:	4b0a      	ldr	r3, [pc, #40]	; (2b24 <_usart_write_buffer+0x34>)
    2afc:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    2afe:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
    2b00:	b29b      	uxth	r3, r3
    2b02:	2b00      	cmp	r3, #0
    2b04:	d003      	beq.n	2b0e <_usart_write_buffer+0x1e>
	cpu_irq_leave_critical();
    2b06:	4b08      	ldr	r3, [pc, #32]	; (2b28 <_usart_write_buffer+0x38>)
    2b08:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2b0a:	2005      	movs	r0, #5

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;

	return STATUS_OK;
}
    2b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_tx_buffer_length = length;
    2b0e:	85f5      	strh	r5, [r6, #46]	; 0x2e
    2b10:	4b05      	ldr	r3, [pc, #20]	; (2b28 <_usart_write_buffer+0x38>)
    2b12:	4798      	blx	r3
	module->tx_buffer_ptr              = tx_data;
    2b14:	62b4      	str	r4, [r6, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    2b16:	2205      	movs	r2, #5
    2b18:	2333      	movs	r3, #51	; 0x33
    2b1a:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    2b1c:	3b32      	subs	r3, #50	; 0x32
    2b1e:	75bb      	strb	r3, [r7, #22]
	return STATUS_OK;
    2b20:	2000      	movs	r0, #0
    2b22:	e7f3      	b.n	2b0c <_usart_write_buffer+0x1c>
    2b24:	000019bd 	.word	0x000019bd
    2b28:	000019fd 	.word	0x000019fd

00002b2c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b2e:	0004      	movs	r4, r0
    2b30:	000d      	movs	r5, r1
    2b32:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2b34:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    2b36:	4b0f      	ldr	r3, [pc, #60]	; (2b74 <_usart_read_buffer+0x48>)
    2b38:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    2b3a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    2b3c:	b29b      	uxth	r3, r3
    2b3e:	2b00      	cmp	r3, #0
    2b40:	d003      	beq.n	2b4a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    2b42:	4b0d      	ldr	r3, [pc, #52]	; (2b78 <_usart_read_buffer+0x4c>)
    2b44:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    2b46:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    2b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    2b4a:	85a6      	strh	r6, [r4, #44]	; 0x2c
    2b4c:	4b0a      	ldr	r3, [pc, #40]	; (2b78 <_usart_read_buffer+0x4c>)
    2b4e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    2b50:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    2b52:	2205      	movs	r2, #5
    2b54:	2332      	movs	r3, #50	; 0x32
    2b56:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    2b58:	3b2e      	subs	r3, #46	; 0x2e
    2b5a:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
    2b5c:	7a23      	ldrb	r3, [r4, #8]
    2b5e:	2b00      	cmp	r3, #0
    2b60:	d001      	beq.n	2b66 <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    2b62:	2320      	movs	r3, #32
    2b64:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
    2b66:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
    2b68:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
    2b6a:	2b00      	cmp	r3, #0
    2b6c:	d0ec      	beq.n	2b48 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    2b6e:	2308      	movs	r3, #8
    2b70:	75bb      	strb	r3, [r7, #22]
    2b72:	e7e9      	b.n	2b48 <_usart_read_buffer+0x1c>
    2b74:	000019bd 	.word	0x000019bd
    2b78:	000019fd 	.word	0x000019fd

00002b7c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2b7c:	1c93      	adds	r3, r2, #2
    2b7e:	009b      	lsls	r3, r3, #2
    2b80:	18c3      	adds	r3, r0, r3
    2b82:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    2b84:	2130      	movs	r1, #48	; 0x30
    2b86:	2301      	movs	r3, #1
    2b88:	4093      	lsls	r3, r2
    2b8a:	001a      	movs	r2, r3
    2b8c:	5c43      	ldrb	r3, [r0, r1]
    2b8e:	4313      	orrs	r3, r2
    2b90:	5443      	strb	r3, [r0, r1]
}
    2b92:	4770      	bx	lr

00002b94 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    2b94:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2b96:	2317      	movs	r3, #23
	if (length == 0) {
    2b98:	2a00      	cmp	r2, #0
    2b9a:	d101      	bne.n	2ba0 <usart_write_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
}
    2b9c:	0018      	movs	r0, r3
    2b9e:	bd10      	pop	{r4, pc}
	if (!(module->transmitter_enabled)) {
    2ba0:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    2ba2:	3305      	adds	r3, #5
	if (!(module->transmitter_enabled)) {
    2ba4:	2c00      	cmp	r4, #0
    2ba6:	d0f9      	beq.n	2b9c <usart_write_buffer_job+0x8>
	return _usart_write_buffer(module, tx_data, length);
    2ba8:	4b01      	ldr	r3, [pc, #4]	; (2bb0 <usart_write_buffer_job+0x1c>)
    2baa:	4798      	blx	r3
    2bac:	0003      	movs	r3, r0
    2bae:	e7f5      	b.n	2b9c <usart_write_buffer_job+0x8>
    2bb0:	00002af1 	.word	0x00002af1

00002bb4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2bb4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2bb6:	2317      	movs	r3, #23
	if (length == 0) {
    2bb8:	2a00      	cmp	r2, #0
    2bba:	d101      	bne.n	2bc0 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    2bbc:	0018      	movs	r0, r3
    2bbe:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    2bc0:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    2bc2:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    2bc4:	2c00      	cmp	r4, #0
    2bc6:	d0f9      	beq.n	2bbc <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    2bc8:	4b01      	ldr	r3, [pc, #4]	; (2bd0 <usart_read_buffer_job+0x1c>)
    2bca:	4798      	blx	r3
    2bcc:	0003      	movs	r3, r0
    2bce:	e7f5      	b.n	2bbc <usart_read_buffer_job+0x8>
    2bd0:	00002b2d 	.word	0x00002b2d

00002bd4 <usart_get_job_status>:
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    2bd4:	2900      	cmp	r1, #0
    2bd6:	d003      	beq.n	2be0 <usart_get_job_status+0xc>
    2bd8:	2901      	cmp	r1, #1
    2bda:	d005      	beq.n	2be8 <usart_get_job_status+0x14>
	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
			break;

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    2bdc:	2017      	movs	r0, #23
    2bde:	e002      	b.n	2be6 <usart_get_job_status+0x12>
			status_code = module->rx_status;
    2be0:	2332      	movs	r3, #50	; 0x32
    2be2:	5cc0      	ldrb	r0, [r0, r3]
    2be4:	b2c0      	uxtb	r0, r0
			break;
	}

	return status_code;
}
    2be6:	4770      	bx	lr
			status_code = module->tx_status;
    2be8:	2333      	movs	r3, #51	; 0x33
    2bea:	5cc0      	ldrb	r0, [r0, r3]
    2bec:	b2c0      	uxtb	r0, r0
			break;
    2bee:	e7fa      	b.n	2be6 <usart_get_job_status+0x12>

00002bf0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2bf2:	0080      	lsls	r0, r0, #2
    2bf4:	4b62      	ldr	r3, [pc, #392]	; (2d80 <_usart_interrupt_handler+0x190>)
    2bf6:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2bf8:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2bfa:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2bfc:	2b00      	cmp	r3, #0
    2bfe:	d1fc      	bne.n	2bfa <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2c00:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2c02:	7da6      	ldrb	r6, [r4, #22]
    2c04:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2c06:	2330      	movs	r3, #48	; 0x30
    2c08:	5ceb      	ldrb	r3, [r5, r3]
    2c0a:	2231      	movs	r2, #49	; 0x31
    2c0c:	5caf      	ldrb	r7, [r5, r2]
    2c0e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2c10:	07f3      	lsls	r3, r6, #31
    2c12:	d522      	bpl.n	2c5a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2c14:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2c16:	b29b      	uxth	r3, r3
    2c18:	2b00      	cmp	r3, #0
    2c1a:	d01c      	beq.n	2c56 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2c1c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2c1e:	7813      	ldrb	r3, [r2, #0]
    2c20:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2c22:	1c51      	adds	r1, r2, #1
    2c24:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2c26:	7969      	ldrb	r1, [r5, #5]
    2c28:	2901      	cmp	r1, #1
    2c2a:	d00e      	beq.n	2c4a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2c2c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2c2e:	05db      	lsls	r3, r3, #23
    2c30:	0ddb      	lsrs	r3, r3, #23
    2c32:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2c34:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2c36:	3b01      	subs	r3, #1
    2c38:	b29b      	uxth	r3, r3
    2c3a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2c3c:	2b00      	cmp	r3, #0
    2c3e:	d10c      	bne.n	2c5a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2c40:	3301      	adds	r3, #1
    2c42:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2c44:	3301      	adds	r3, #1
    2c46:	75a3      	strb	r3, [r4, #22]
    2c48:	e007      	b.n	2c5a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2c4a:	7851      	ldrb	r1, [r2, #1]
    2c4c:	0209      	lsls	r1, r1, #8
    2c4e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2c50:	3202      	adds	r2, #2
    2c52:	62aa      	str	r2, [r5, #40]	; 0x28
    2c54:	e7eb      	b.n	2c2e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2c56:	2301      	movs	r3, #1
    2c58:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2c5a:	07b3      	lsls	r3, r6, #30
    2c5c:	d506      	bpl.n	2c6c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2c5e:	2302      	movs	r3, #2
    2c60:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2c62:	2200      	movs	r2, #0
    2c64:	3331      	adds	r3, #49	; 0x31
    2c66:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2c68:	07fb      	lsls	r3, r7, #31
    2c6a:	d41a      	bmi.n	2ca2 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2c6c:	0773      	lsls	r3, r6, #29
    2c6e:	d565      	bpl.n	2d3c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2c70:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2c72:	b29b      	uxth	r3, r3
    2c74:	2b00      	cmp	r3, #0
    2c76:	d05f      	beq.n	2d38 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2c78:	8b63      	ldrh	r3, [r4, #26]
    2c7a:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2c7c:	071a      	lsls	r2, r3, #28
    2c7e:	d414      	bmi.n	2caa <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2c80:	223f      	movs	r2, #63	; 0x3f
    2c82:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2c84:	2b00      	cmp	r3, #0
    2c86:	d034      	beq.n	2cf2 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2c88:	079a      	lsls	r2, r3, #30
    2c8a:	d511      	bpl.n	2cb0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2c8c:	221a      	movs	r2, #26
    2c8e:	2332      	movs	r3, #50	; 0x32
    2c90:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2c92:	3b30      	subs	r3, #48	; 0x30
    2c94:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2c96:	077b      	lsls	r3, r7, #29
    2c98:	d550      	bpl.n	2d3c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2c9a:	0028      	movs	r0, r5
    2c9c:	696b      	ldr	r3, [r5, #20]
    2c9e:	4798      	blx	r3
    2ca0:	e04c      	b.n	2d3c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2ca2:	0028      	movs	r0, r5
    2ca4:	68eb      	ldr	r3, [r5, #12]
    2ca6:	4798      	blx	r3
    2ca8:	e7e0      	b.n	2c6c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2caa:	2237      	movs	r2, #55	; 0x37
    2cac:	4013      	ands	r3, r2
    2cae:	e7e9      	b.n	2c84 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2cb0:	075a      	lsls	r2, r3, #29
    2cb2:	d505      	bpl.n	2cc0 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2cb4:	221e      	movs	r2, #30
    2cb6:	2332      	movs	r3, #50	; 0x32
    2cb8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2cba:	3b2e      	subs	r3, #46	; 0x2e
    2cbc:	8363      	strh	r3, [r4, #26]
    2cbe:	e7ea      	b.n	2c96 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2cc0:	07da      	lsls	r2, r3, #31
    2cc2:	d505      	bpl.n	2cd0 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2cc4:	2213      	movs	r2, #19
    2cc6:	2332      	movs	r3, #50	; 0x32
    2cc8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2cca:	3b31      	subs	r3, #49	; 0x31
    2ccc:	8363      	strh	r3, [r4, #26]
    2cce:	e7e2      	b.n	2c96 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2cd0:	06da      	lsls	r2, r3, #27
    2cd2:	d505      	bpl.n	2ce0 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2cd4:	2242      	movs	r2, #66	; 0x42
    2cd6:	2332      	movs	r3, #50	; 0x32
    2cd8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2cda:	3b22      	subs	r3, #34	; 0x22
    2cdc:	8363      	strh	r3, [r4, #26]
    2cde:	e7da      	b.n	2c96 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2ce0:	2220      	movs	r2, #32
    2ce2:	421a      	tst	r2, r3
    2ce4:	d0d7      	beq.n	2c96 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2ce6:	3221      	adds	r2, #33	; 0x21
    2ce8:	2332      	movs	r3, #50	; 0x32
    2cea:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2cec:	3b12      	subs	r3, #18
    2cee:	8363      	strh	r3, [r4, #26]
    2cf0:	e7d1      	b.n	2c96 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2cf2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2cf4:	05db      	lsls	r3, r3, #23
    2cf6:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2cf8:	b2da      	uxtb	r2, r3
    2cfa:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2cfc:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2cfe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2d00:	1c51      	adds	r1, r2, #1
    2d02:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2d04:	7969      	ldrb	r1, [r5, #5]
    2d06:	2901      	cmp	r1, #1
    2d08:	d010      	beq.n	2d2c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2d0a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2d0c:	3b01      	subs	r3, #1
    2d0e:	b29b      	uxth	r3, r3
    2d10:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2d12:	2b00      	cmp	r3, #0
    2d14:	d112      	bne.n	2d3c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2d16:	3304      	adds	r3, #4
    2d18:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2d1a:	2200      	movs	r2, #0
    2d1c:	332e      	adds	r3, #46	; 0x2e
    2d1e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2d20:	07bb      	lsls	r3, r7, #30
    2d22:	d50b      	bpl.n	2d3c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2d24:	0028      	movs	r0, r5
    2d26:	692b      	ldr	r3, [r5, #16]
    2d28:	4798      	blx	r3
    2d2a:	e007      	b.n	2d3c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2d2c:	0a1b      	lsrs	r3, r3, #8
    2d2e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2d30:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2d32:	3301      	adds	r3, #1
    2d34:	626b      	str	r3, [r5, #36]	; 0x24
    2d36:	e7e8      	b.n	2d0a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2d38:	2304      	movs	r3, #4
    2d3a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2d3c:	06f3      	lsls	r3, r6, #27
    2d3e:	d504      	bpl.n	2d4a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2d40:	2310      	movs	r3, #16
    2d42:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2d44:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2d46:	06fb      	lsls	r3, r7, #27
    2d48:	d40e      	bmi.n	2d68 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2d4a:	06b3      	lsls	r3, r6, #26
    2d4c:	d504      	bpl.n	2d58 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2d4e:	2320      	movs	r3, #32
    2d50:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2d52:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2d54:	073b      	lsls	r3, r7, #28
    2d56:	d40b      	bmi.n	2d70 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2d58:	0733      	lsls	r3, r6, #28
    2d5a:	d504      	bpl.n	2d66 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2d5c:	2308      	movs	r3, #8
    2d5e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2d60:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2d62:	06bb      	lsls	r3, r7, #26
    2d64:	d408      	bmi.n	2d78 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2d68:	0028      	movs	r0, r5
    2d6a:	69eb      	ldr	r3, [r5, #28]
    2d6c:	4798      	blx	r3
    2d6e:	e7ec      	b.n	2d4a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2d70:	0028      	movs	r0, r5
    2d72:	69ab      	ldr	r3, [r5, #24]
    2d74:	4798      	blx	r3
    2d76:	e7ef      	b.n	2d58 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2d78:	6a2b      	ldr	r3, [r5, #32]
    2d7a:	0028      	movs	r0, r5
    2d7c:	4798      	blx	r3
}
    2d7e:	e7f2      	b.n	2d66 <_usart_interrupt_handler+0x176>
    2d80:	20000b74 	.word	0x20000b74

00002d84 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2d84:	b510      	push	{r4, lr}
	switch (clock_source) {
    2d86:	2808      	cmp	r0, #8
    2d88:	d803      	bhi.n	2d92 <system_clock_source_get_hz+0xe>
    2d8a:	0080      	lsls	r0, r0, #2
    2d8c:	4b1c      	ldr	r3, [pc, #112]	; (2e00 <system_clock_source_get_hz+0x7c>)
    2d8e:	581b      	ldr	r3, [r3, r0]
    2d90:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    2d92:	2000      	movs	r0, #0
    2d94:	e032      	b.n	2dfc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2d96:	4b1b      	ldr	r3, [pc, #108]	; (2e04 <system_clock_source_get_hz+0x80>)
    2d98:	6918      	ldr	r0, [r3, #16]
    2d9a:	e02f      	b.n	2dfc <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    2d9c:	4b1a      	ldr	r3, [pc, #104]	; (2e08 <system_clock_source_get_hz+0x84>)
    2d9e:	6a1b      	ldr	r3, [r3, #32]
    2da0:	059b      	lsls	r3, r3, #22
    2da2:	0f9b      	lsrs	r3, r3, #30
    2da4:	4819      	ldr	r0, [pc, #100]	; (2e0c <system_clock_source_get_hz+0x88>)
    2da6:	40d8      	lsrs	r0, r3
    2da8:	e028      	b.n	2dfc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2daa:	4b16      	ldr	r3, [pc, #88]	; (2e04 <system_clock_source_get_hz+0x80>)
    2dac:	6958      	ldr	r0, [r3, #20]
    2dae:	e025      	b.n	2dfc <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2db0:	4b14      	ldr	r3, [pc, #80]	; (2e04 <system_clock_source_get_hz+0x80>)
    2db2:	681b      	ldr	r3, [r3, #0]
			return 0;
    2db4:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    2db6:	079b      	lsls	r3, r3, #30
    2db8:	d520      	bpl.n	2dfc <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2dba:	4913      	ldr	r1, [pc, #76]	; (2e08 <system_clock_source_get_hz+0x84>)
    2dbc:	2210      	movs	r2, #16
    2dbe:	68cb      	ldr	r3, [r1, #12]
    2dc0:	421a      	tst	r2, r3
    2dc2:	d0fc      	beq.n	2dbe <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    2dc4:	4b0f      	ldr	r3, [pc, #60]	; (2e04 <system_clock_source_get_hz+0x80>)
    2dc6:	681a      	ldr	r2, [r3, #0]
    2dc8:	2324      	movs	r3, #36	; 0x24
    2dca:	4013      	ands	r3, r2
    2dcc:	2b04      	cmp	r3, #4
    2dce:	d001      	beq.n	2dd4 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    2dd0:	480f      	ldr	r0, [pc, #60]	; (2e10 <system_clock_source_get_hz+0x8c>)
    2dd2:	e013      	b.n	2dfc <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2dd4:	2000      	movs	r0, #0
    2dd6:	4b0f      	ldr	r3, [pc, #60]	; (2e14 <system_clock_source_get_hz+0x90>)
    2dd8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2dda:	4b0a      	ldr	r3, [pc, #40]	; (2e04 <system_clock_source_get_hz+0x80>)
    2ddc:	689b      	ldr	r3, [r3, #8]
    2dde:	041b      	lsls	r3, r3, #16
    2de0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    2de2:	4358      	muls	r0, r3
    2de4:	e00a      	b.n	2dfc <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2de6:	2350      	movs	r3, #80	; 0x50
    2de8:	4a07      	ldr	r2, [pc, #28]	; (2e08 <system_clock_source_get_hz+0x84>)
    2dea:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2dec:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    2dee:	075b      	lsls	r3, r3, #29
    2df0:	d504      	bpl.n	2dfc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2df2:	4b04      	ldr	r3, [pc, #16]	; (2e04 <system_clock_source_get_hz+0x80>)
    2df4:	68d8      	ldr	r0, [r3, #12]
    2df6:	e001      	b.n	2dfc <system_clock_source_get_hz+0x78>
		return 32768UL;
    2df8:	2080      	movs	r0, #128	; 0x80
    2dfa:	0200      	lsls	r0, r0, #8
	}
}
    2dfc:	bd10      	pop	{r4, pc}
    2dfe:	46c0      	nop			; (mov r8, r8)
    2e00:	00006d44 	.word	0x00006d44
    2e04:	200002d0 	.word	0x200002d0
    2e08:	40000800 	.word	0x40000800
    2e0c:	007a1200 	.word	0x007a1200
    2e10:	02dc6c00 	.word	0x02dc6c00
    2e14:	000033dd 	.word	0x000033dd

00002e18 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    2e18:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    2e1a:	490c      	ldr	r1, [pc, #48]	; (2e4c <system_clock_source_osc8m_set_config+0x34>)
    2e1c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    2e1e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    2e20:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    2e22:	7840      	ldrb	r0, [r0, #1]
    2e24:	2201      	movs	r2, #1
    2e26:	4010      	ands	r0, r2
    2e28:	0180      	lsls	r0, r0, #6
    2e2a:	2640      	movs	r6, #64	; 0x40
    2e2c:	43b3      	bics	r3, r6
    2e2e:	4303      	orrs	r3, r0
    2e30:	402a      	ands	r2, r5
    2e32:	01d2      	lsls	r2, r2, #7
    2e34:	2080      	movs	r0, #128	; 0x80
    2e36:	4383      	bics	r3, r0
    2e38:	4313      	orrs	r3, r2
    2e3a:	2203      	movs	r2, #3
    2e3c:	4022      	ands	r2, r4
    2e3e:	0212      	lsls	r2, r2, #8
    2e40:	4803      	ldr	r0, [pc, #12]	; (2e50 <system_clock_source_osc8m_set_config+0x38>)
    2e42:	4003      	ands	r3, r0
    2e44:	4313      	orrs	r3, r2
    2e46:	620b      	str	r3, [r1, #32]
}
    2e48:	bd70      	pop	{r4, r5, r6, pc}
    2e4a:	46c0      	nop			; (mov r8, r8)
    2e4c:	40000800 	.word	0x40000800
    2e50:	fffffcff 	.word	0xfffffcff

00002e54 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2e54:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e56:	46de      	mov	lr, fp
    2e58:	4657      	mov	r7, sl
    2e5a:	464e      	mov	r6, r9
    2e5c:	4645      	mov	r5, r8
    2e5e:	b5e0      	push	{r5, r6, r7, lr}
    2e60:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    2e62:	4b26      	ldr	r3, [pc, #152]	; (2efc <system_clock_source_xosc32k_set_config+0xa8>)
    2e64:	469b      	mov	fp, r3
    2e66:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2e68:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2e6a:	7800      	ldrb	r0, [r0, #0]
    2e6c:	4242      	negs	r2, r0
    2e6e:	4142      	adcs	r2, r0
    2e70:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    2e72:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    2e74:	78ca      	ldrb	r2, [r1, #3]
    2e76:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    2e78:	790a      	ldrb	r2, [r1, #4]
    2e7a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    2e7c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2e7e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    2e80:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2e82:	688a      	ldr	r2, [r1, #8]
    2e84:	491e      	ldr	r1, [pc, #120]	; (2f00 <system_clock_source_xosc32k_set_config+0xac>)
    2e86:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    2e88:	2101      	movs	r1, #1
    2e8a:	464a      	mov	r2, r9
    2e8c:	0092      	lsls	r2, r2, #2
    2e8e:	4691      	mov	r9, r2
    2e90:	2204      	movs	r2, #4
    2e92:	4393      	bics	r3, r2
    2e94:	464a      	mov	r2, r9
    2e96:	4313      	orrs	r3, r2
    2e98:	4642      	mov	r2, r8
    2e9a:	400a      	ands	r2, r1
    2e9c:	00d2      	lsls	r2, r2, #3
    2e9e:	4690      	mov	r8, r2
    2ea0:	2208      	movs	r2, #8
    2ea2:	4393      	bics	r3, r2
    2ea4:	4642      	mov	r2, r8
    2ea6:	4313      	orrs	r3, r2
    2ea8:	4662      	mov	r2, ip
    2eaa:	400a      	ands	r2, r1
    2eac:	0112      	lsls	r2, r2, #4
    2eae:	4694      	mov	ip, r2
    2eb0:	2210      	movs	r2, #16
    2eb2:	4393      	bics	r3, r2
    2eb4:	4662      	mov	r2, ip
    2eb6:	4313      	orrs	r3, r2
    2eb8:	4008      	ands	r0, r1
    2eba:	0140      	lsls	r0, r0, #5
    2ebc:	2220      	movs	r2, #32
    2ebe:	4393      	bics	r3, r2
    2ec0:	4303      	orrs	r3, r0
    2ec2:	400f      	ands	r7, r1
    2ec4:	01bf      	lsls	r7, r7, #6
    2ec6:	2040      	movs	r0, #64	; 0x40
    2ec8:	4383      	bics	r3, r0
    2eca:	433b      	orrs	r3, r7
    2ecc:	400e      	ands	r6, r1
    2ece:	01f6      	lsls	r6, r6, #7
    2ed0:	3040      	adds	r0, #64	; 0x40
    2ed2:	4383      	bics	r3, r0
    2ed4:	4333      	orrs	r3, r6
    2ed6:	3879      	subs	r0, #121	; 0x79
    2ed8:	4005      	ands	r5, r0
    2eda:	022d      	lsls	r5, r5, #8
    2edc:	4809      	ldr	r0, [pc, #36]	; (2f04 <system_clock_source_xosc32k_set_config+0xb0>)
    2ede:	4003      	ands	r3, r0
    2ee0:	432b      	orrs	r3, r5
    2ee2:	4021      	ands	r1, r4
    2ee4:	0309      	lsls	r1, r1, #12
    2ee6:	4808      	ldr	r0, [pc, #32]	; (2f08 <system_clock_source_xosc32k_set_config+0xb4>)
    2ee8:	4003      	ands	r3, r0
    2eea:	430b      	orrs	r3, r1
    2eec:	465a      	mov	r2, fp
    2eee:	8293      	strh	r3, [r2, #20]
}
    2ef0:	bc3c      	pop	{r2, r3, r4, r5}
    2ef2:	4690      	mov	r8, r2
    2ef4:	4699      	mov	r9, r3
    2ef6:	46a2      	mov	sl, r4
    2ef8:	46ab      	mov	fp, r5
    2efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2efc:	40000800 	.word	0x40000800
    2f00:	200002d0 	.word	0x200002d0
    2f04:	fffff8ff 	.word	0xfffff8ff
    2f08:	ffffefff 	.word	0xffffefff

00002f0c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2f0c:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2f0e:	7a03      	ldrb	r3, [r0, #8]
    2f10:	069b      	lsls	r3, r3, #26
    2f12:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    2f14:	8942      	ldrh	r2, [r0, #10]
    2f16:	0592      	lsls	r2, r2, #22
    2f18:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2f1a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2f1c:	4918      	ldr	r1, [pc, #96]	; (2f80 <system_clock_source_dfll_set_config+0x74>)
    2f1e:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2f20:	7983      	ldrb	r3, [r0, #6]
    2f22:	79c2      	ldrb	r2, [r0, #7]
    2f24:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2f26:	8842      	ldrh	r2, [r0, #2]
    2f28:	8884      	ldrh	r4, [r0, #4]
    2f2a:	4322      	orrs	r2, r4
    2f2c:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    2f2e:	7842      	ldrb	r2, [r0, #1]
    2f30:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2f32:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2f34:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2f36:	7803      	ldrb	r3, [r0, #0]
    2f38:	2b04      	cmp	r3, #4
    2f3a:	d011      	beq.n	2f60 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2f3c:	2b20      	cmp	r3, #32
    2f3e:	d10e      	bne.n	2f5e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2f40:	7b03      	ldrb	r3, [r0, #12]
    2f42:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2f44:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2f46:	4313      	orrs	r3, r2
    2f48:	89c2      	ldrh	r2, [r0, #14]
    2f4a:	0412      	lsls	r2, r2, #16
    2f4c:	490d      	ldr	r1, [pc, #52]	; (2f84 <system_clock_source_dfll_set_config+0x78>)
    2f4e:	400a      	ands	r2, r1
    2f50:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2f52:	4a0b      	ldr	r2, [pc, #44]	; (2f80 <system_clock_source_dfll_set_config+0x74>)
    2f54:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2f56:	6811      	ldr	r1, [r2, #0]
    2f58:	4b0b      	ldr	r3, [pc, #44]	; (2f88 <system_clock_source_dfll_set_config+0x7c>)
    2f5a:	430b      	orrs	r3, r1
    2f5c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    2f5e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2f60:	7b03      	ldrb	r3, [r0, #12]
    2f62:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    2f64:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2f66:	4313      	orrs	r3, r2
    2f68:	89c2      	ldrh	r2, [r0, #14]
    2f6a:	0412      	lsls	r2, r2, #16
    2f6c:	4905      	ldr	r1, [pc, #20]	; (2f84 <system_clock_source_dfll_set_config+0x78>)
    2f6e:	400a      	ands	r2, r1
    2f70:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2f72:	4a03      	ldr	r2, [pc, #12]	; (2f80 <system_clock_source_dfll_set_config+0x74>)
    2f74:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2f76:	6813      	ldr	r3, [r2, #0]
    2f78:	2104      	movs	r1, #4
    2f7a:	430b      	orrs	r3, r1
    2f7c:	6013      	str	r3, [r2, #0]
    2f7e:	e7ee      	b.n	2f5e <system_clock_source_dfll_set_config+0x52>
    2f80:	200002d0 	.word	0x200002d0
    2f84:	03ff0000 	.word	0x03ff0000
    2f88:	00000424 	.word	0x00000424

00002f8c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2f8c:	2808      	cmp	r0, #8
    2f8e:	d803      	bhi.n	2f98 <system_clock_source_enable+0xc>
    2f90:	0080      	lsls	r0, r0, #2
    2f92:	4b25      	ldr	r3, [pc, #148]	; (3028 <system_clock_source_enable+0x9c>)
    2f94:	581b      	ldr	r3, [r3, r0]
    2f96:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2f98:	2017      	movs	r0, #23
    2f9a:	e044      	b.n	3026 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    2f9c:	4a23      	ldr	r2, [pc, #140]	; (302c <system_clock_source_enable+0xa0>)
    2f9e:	6a13      	ldr	r3, [r2, #32]
    2fa0:	2102      	movs	r1, #2
    2fa2:	430b      	orrs	r3, r1
    2fa4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    2fa6:	2000      	movs	r0, #0
    2fa8:	e03d      	b.n	3026 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    2faa:	4a20      	ldr	r2, [pc, #128]	; (302c <system_clock_source_enable+0xa0>)
    2fac:	6993      	ldr	r3, [r2, #24]
    2fae:	2102      	movs	r1, #2
    2fb0:	430b      	orrs	r3, r1
    2fb2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2fb4:	2000      	movs	r0, #0
		break;
    2fb6:	e036      	b.n	3026 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    2fb8:	4a1c      	ldr	r2, [pc, #112]	; (302c <system_clock_source_enable+0xa0>)
    2fba:	8a13      	ldrh	r3, [r2, #16]
    2fbc:	2102      	movs	r1, #2
    2fbe:	430b      	orrs	r3, r1
    2fc0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2fc2:	2000      	movs	r0, #0
		break;
    2fc4:	e02f      	b.n	3026 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    2fc6:	4a19      	ldr	r2, [pc, #100]	; (302c <system_clock_source_enable+0xa0>)
    2fc8:	8a93      	ldrh	r3, [r2, #20]
    2fca:	2102      	movs	r1, #2
    2fcc:	430b      	orrs	r3, r1
    2fce:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    2fd0:	2000      	movs	r0, #0
		break;
    2fd2:	e028      	b.n	3026 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    2fd4:	4916      	ldr	r1, [pc, #88]	; (3030 <system_clock_source_enable+0xa4>)
    2fd6:	680b      	ldr	r3, [r1, #0]
    2fd8:	2202      	movs	r2, #2
    2fda:	4313      	orrs	r3, r2
    2fdc:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    2fde:	4b13      	ldr	r3, [pc, #76]	; (302c <system_clock_source_enable+0xa0>)
    2fe0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2fe2:	0019      	movs	r1, r3
    2fe4:	320e      	adds	r2, #14
    2fe6:	68cb      	ldr	r3, [r1, #12]
    2fe8:	421a      	tst	r2, r3
    2fea:	d0fc      	beq.n	2fe6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2fec:	4a10      	ldr	r2, [pc, #64]	; (3030 <system_clock_source_enable+0xa4>)
    2fee:	6891      	ldr	r1, [r2, #8]
    2ff0:	4b0e      	ldr	r3, [pc, #56]	; (302c <system_clock_source_enable+0xa0>)
    2ff2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2ff4:	6852      	ldr	r2, [r2, #4]
    2ff6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    2ff8:	2200      	movs	r2, #0
    2ffa:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    2ffc:	0019      	movs	r1, r3
    2ffe:	3210      	adds	r2, #16
    3000:	68cb      	ldr	r3, [r1, #12]
    3002:	421a      	tst	r2, r3
    3004:	d0fc      	beq.n	3000 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3006:	4b0a      	ldr	r3, [pc, #40]	; (3030 <system_clock_source_enable+0xa4>)
    3008:	681b      	ldr	r3, [r3, #0]
    300a:	b29b      	uxth	r3, r3
    300c:	4a07      	ldr	r2, [pc, #28]	; (302c <system_clock_source_enable+0xa0>)
    300e:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    3010:	2000      	movs	r0, #0
    3012:	e008      	b.n	3026 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    3014:	4905      	ldr	r1, [pc, #20]	; (302c <system_clock_source_enable+0xa0>)
    3016:	2244      	movs	r2, #68	; 0x44
    3018:	5c8b      	ldrb	r3, [r1, r2]
    301a:	2002      	movs	r0, #2
    301c:	4303      	orrs	r3, r0
    301e:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    3020:	2000      	movs	r0, #0
		break;
    3022:	e000      	b.n	3026 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    3024:	2000      	movs	r0, #0
}
    3026:	4770      	bx	lr
    3028:	00006d68 	.word	0x00006d68
    302c:	40000800 	.word	0x40000800
    3030:	200002d0 	.word	0x200002d0

00003034 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    3034:	b5f0      	push	{r4, r5, r6, r7, lr}
    3036:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    3038:	22c2      	movs	r2, #194	; 0xc2
    303a:	00d2      	lsls	r2, r2, #3
    303c:	4b45      	ldr	r3, [pc, #276]	; (3154 <system_clock_init+0x120>)
    303e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    3040:	4a45      	ldr	r2, [pc, #276]	; (3158 <system_clock_init+0x124>)
    3042:	6853      	ldr	r3, [r2, #4]
    3044:	211e      	movs	r1, #30
    3046:	438b      	bics	r3, r1
    3048:	391a      	subs	r1, #26
    304a:	430b      	orrs	r3, r1
    304c:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    304e:	2202      	movs	r2, #2
    3050:	ab01      	add	r3, sp, #4
    3052:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    3054:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    3056:	4d41      	ldr	r5, [pc, #260]	; (315c <system_clock_init+0x128>)
    3058:	b2e0      	uxtb	r0, r4
    305a:	a901      	add	r1, sp, #4
    305c:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    305e:	3401      	adds	r4, #1
    3060:	2c25      	cmp	r4, #37	; 0x25
    3062:	d1f9      	bne.n	3058 <system_clock_init+0x24>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    3064:	a80a      	add	r0, sp, #40	; 0x28
    3066:	2300      	movs	r3, #0
    3068:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    306a:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    306c:	2280      	movs	r2, #128	; 0x80
    306e:	0212      	lsls	r2, r2, #8
    3070:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    3072:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    3074:	2201      	movs	r2, #1
    3076:	7102      	strb	r2, [r0, #4]
	config->write_once          = false;
    3078:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    307a:	2106      	movs	r1, #6
    307c:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    307e:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    3080:	7302      	strb	r2, [r0, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    3082:	4b37      	ldr	r3, [pc, #220]	; (3160 <system_clock_init+0x12c>)
    3084:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    3086:	2005      	movs	r0, #5
    3088:	4b36      	ldr	r3, [pc, #216]	; (3164 <system_clock_init+0x130>)
    308a:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    308c:	4931      	ldr	r1, [pc, #196]	; (3154 <system_clock_init+0x120>)
    308e:	2202      	movs	r2, #2
    3090:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    3092:	421a      	tst	r2, r3
    3094:	d0fc      	beq.n	3090 <system_clock_init+0x5c>
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    3096:	ab05      	add	r3, sp, #20
    3098:	2100      	movs	r1, #0
    309a:	2200      	movs	r2, #0
    309c:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    309e:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    30a0:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    30a2:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    30a4:	313f      	adds	r1, #63	; 0x3f
    30a6:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    30a8:	393b      	subs	r1, #59	; 0x3b
    30aa:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    30ac:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    30ae:	4b2e      	ldr	r3, [pc, #184]	; (3168 <system_clock_init+0x134>)
    30b0:	681b      	ldr	r3, [r3, #0]
    30b2:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    30b4:	2b3f      	cmp	r3, #63	; 0x3f
    30b6:	d04b      	beq.n	3150 <system_clock_init+0x11c>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    30b8:	a805      	add	r0, sp, #20
    30ba:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    30bc:	23b7      	movs	r3, #183	; 0xb7
    30be:	00db      	lsls	r3, r3, #3
    30c0:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    30c2:	2303      	movs	r3, #3
    30c4:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    30c6:	331c      	adds	r3, #28
    30c8:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    30ca:	4b28      	ldr	r3, [pc, #160]	; (316c <system_clock_init+0x138>)
    30cc:	4798      	blx	r3
	config->on_demand       = true;
    30ce:	a804      	add	r0, sp, #16
    30d0:	2501      	movs	r5, #1
    30d2:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    30d4:	2600      	movs	r6, #0
    30d6:	7006      	strb	r6, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    30d8:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    30da:	4b25      	ldr	r3, [pc, #148]	; (3170 <system_clock_init+0x13c>)
    30dc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    30de:	2006      	movs	r0, #6
    30e0:	4f20      	ldr	r7, [pc, #128]	; (3164 <system_clock_init+0x130>)
    30e2:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    30e4:	4b23      	ldr	r3, [pc, #140]	; (3174 <system_clock_init+0x140>)
    30e6:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    30e8:	ac01      	add	r4, sp, #4
    30ea:	9502      	str	r5, [sp, #8]
	config->high_when_disabled = false;
    30ec:	7066      	strb	r6, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    30ee:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    30f0:	7266      	strb	r6, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    30f2:	2305      	movs	r3, #5
    30f4:	7023      	strb	r3, [r4, #0]
    30f6:	0021      	movs	r1, r4
    30f8:	2001      	movs	r0, #1
    30fa:	4b1f      	ldr	r3, [pc, #124]	; (3178 <system_clock_init+0x144>)
    30fc:	4798      	blx	r3
    30fe:	2001      	movs	r0, #1
    3100:	4b1e      	ldr	r3, [pc, #120]	; (317c <system_clock_init+0x148>)
    3102:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    3104:	7025      	strb	r5, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    3106:	0021      	movs	r1, r4
    3108:	2000      	movs	r0, #0
    310a:	4b14      	ldr	r3, [pc, #80]	; (315c <system_clock_init+0x128>)
    310c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    310e:	2000      	movs	r0, #0
    3110:	4b1b      	ldr	r3, [pc, #108]	; (3180 <system_clock_init+0x14c>)
    3112:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    3114:	2007      	movs	r0, #7
    3116:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    3118:	490e      	ldr	r1, [pc, #56]	; (3154 <system_clock_init+0x120>)
    311a:	22d0      	movs	r2, #208	; 0xd0
    311c:	68cb      	ldr	r3, [r1, #12]
    311e:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    3120:	2bd0      	cmp	r3, #208	; 0xd0
    3122:	d1fb      	bne.n	311c <system_clock_init+0xe8>
	PM->CPUSEL.reg = (uint32_t)divider;
    3124:	4a17      	ldr	r2, [pc, #92]	; (3184 <system_clock_init+0x150>)
    3126:	2300      	movs	r3, #0
    3128:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    312a:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    312c:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    312e:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    3130:	a901      	add	r1, sp, #4
    3132:	2201      	movs	r2, #1
    3134:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    3136:	704b      	strb	r3, [r1, #1]
	config->output_enable      = false;
    3138:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    313a:	3307      	adds	r3, #7
    313c:	700b      	strb	r3, [r1, #0]
    313e:	720a      	strb	r2, [r1, #8]
    3140:	2000      	movs	r0, #0
    3142:	4b0d      	ldr	r3, [pc, #52]	; (3178 <system_clock_init+0x144>)
    3144:	4798      	blx	r3
    3146:	2000      	movs	r0, #0
    3148:	4b0c      	ldr	r3, [pc, #48]	; (317c <system_clock_init+0x148>)
    314a:	4798      	blx	r3
#endif
}
    314c:	b00f      	add	sp, #60	; 0x3c
    314e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    3150:	3b20      	subs	r3, #32
    3152:	e7b1      	b.n	30b8 <system_clock_init+0x84>
    3154:	40000800 	.word	0x40000800
    3158:	41004000 	.word	0x41004000
    315c:	000033c1 	.word	0x000033c1
    3160:	00002e55 	.word	0x00002e55
    3164:	00002f8d 	.word	0x00002f8d
    3168:	00806024 	.word	0x00806024
    316c:	00002f0d 	.word	0x00002f0d
    3170:	00002e19 	.word	0x00002e19
    3174:	00003189 	.word	0x00003189
    3178:	000031ad 	.word	0x000031ad
    317c:	00003265 	.word	0x00003265
    3180:	00003335 	.word	0x00003335
    3184:	40000400 	.word	0x40000400

00003188 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    3188:	4a06      	ldr	r2, [pc, #24]	; (31a4 <system_gclk_init+0x1c>)
    318a:	6993      	ldr	r3, [r2, #24]
    318c:	2108      	movs	r1, #8
    318e:	430b      	orrs	r3, r1
    3190:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    3192:	2201      	movs	r2, #1
    3194:	4b04      	ldr	r3, [pc, #16]	; (31a8 <system_gclk_init+0x20>)
    3196:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    3198:	0019      	movs	r1, r3
    319a:	780b      	ldrb	r3, [r1, #0]
    319c:	4213      	tst	r3, r2
    319e:	d1fc      	bne.n	319a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    31a0:	4770      	bx	lr
    31a2:	46c0      	nop			; (mov r8, r8)
    31a4:	40000400 	.word	0x40000400
    31a8:	40000c00 	.word	0x40000c00

000031ac <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    31ac:	b570      	push	{r4, r5, r6, lr}
    31ae:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    31b0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    31b2:	780d      	ldrb	r5, [r1, #0]
    31b4:	022d      	lsls	r5, r5, #8
    31b6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    31b8:	784b      	ldrb	r3, [r1, #1]
    31ba:	2b00      	cmp	r3, #0
    31bc:	d002      	beq.n	31c4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    31be:	2380      	movs	r3, #128	; 0x80
    31c0:	02db      	lsls	r3, r3, #11
    31c2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    31c4:	7a4b      	ldrb	r3, [r1, #9]
    31c6:	2b00      	cmp	r3, #0
    31c8:	d002      	beq.n	31d0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    31ca:	2380      	movs	r3, #128	; 0x80
    31cc:	031b      	lsls	r3, r3, #12
    31ce:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    31d0:	6848      	ldr	r0, [r1, #4]
    31d2:	2801      	cmp	r0, #1
    31d4:	d910      	bls.n	31f8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    31d6:	1e43      	subs	r3, r0, #1
    31d8:	4218      	tst	r0, r3
    31da:	d134      	bne.n	3246 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    31dc:	2802      	cmp	r0, #2
    31de:	d930      	bls.n	3242 <system_gclk_gen_set_config+0x96>
    31e0:	2302      	movs	r3, #2
    31e2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    31e4:	3201      	adds	r2, #1
						mask <<= 1) {
    31e6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    31e8:	4298      	cmp	r0, r3
    31ea:	d8fb      	bhi.n	31e4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    31ec:	0212      	lsls	r2, r2, #8
    31ee:	4332      	orrs	r2, r6
    31f0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    31f2:	2380      	movs	r3, #128	; 0x80
    31f4:	035b      	lsls	r3, r3, #13
    31f6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    31f8:	7a0b      	ldrb	r3, [r1, #8]
    31fa:	2b00      	cmp	r3, #0
    31fc:	d002      	beq.n	3204 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    31fe:	2380      	movs	r3, #128	; 0x80
    3200:	039b      	lsls	r3, r3, #14
    3202:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3204:	4a13      	ldr	r2, [pc, #76]	; (3254 <system_gclk_gen_set_config+0xa8>)
    3206:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    3208:	b25b      	sxtb	r3, r3
    320a:	2b00      	cmp	r3, #0
    320c:	dbfb      	blt.n	3206 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    320e:	4b12      	ldr	r3, [pc, #72]	; (3258 <system_gclk_gen_set_config+0xac>)
    3210:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    3212:	4b12      	ldr	r3, [pc, #72]	; (325c <system_gclk_gen_set_config+0xb0>)
    3214:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3216:	4a0f      	ldr	r2, [pc, #60]	; (3254 <system_gclk_gen_set_config+0xa8>)
    3218:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    321a:	b25b      	sxtb	r3, r3
    321c:	2b00      	cmp	r3, #0
    321e:	dbfb      	blt.n	3218 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    3220:	4b0c      	ldr	r3, [pc, #48]	; (3254 <system_gclk_gen_set_config+0xa8>)
    3222:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3224:	001a      	movs	r2, r3
    3226:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    3228:	b25b      	sxtb	r3, r3
    322a:	2b00      	cmp	r3, #0
    322c:	dbfb      	blt.n	3226 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    322e:	4a09      	ldr	r2, [pc, #36]	; (3254 <system_gclk_gen_set_config+0xa8>)
    3230:	6853      	ldr	r3, [r2, #4]
    3232:	2180      	movs	r1, #128	; 0x80
    3234:	0249      	lsls	r1, r1, #9
    3236:	400b      	ands	r3, r1
    3238:	431d      	orrs	r5, r3
    323a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    323c:	4b08      	ldr	r3, [pc, #32]	; (3260 <system_gclk_gen_set_config+0xb4>)
    323e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3240:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    3242:	2200      	movs	r2, #0
    3244:	e7d2      	b.n	31ec <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    3246:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    3248:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    324a:	2380      	movs	r3, #128	; 0x80
    324c:	029b      	lsls	r3, r3, #10
    324e:	431d      	orrs	r5, r3
    3250:	e7d2      	b.n	31f8 <system_gclk_gen_set_config+0x4c>
    3252:	46c0      	nop			; (mov r8, r8)
    3254:	40000c00 	.word	0x40000c00
    3258:	000019bd 	.word	0x000019bd
    325c:	40000c08 	.word	0x40000c08
    3260:	000019fd 	.word	0x000019fd

00003264 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    3264:	b510      	push	{r4, lr}
    3266:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    3268:	4a0b      	ldr	r2, [pc, #44]	; (3298 <system_gclk_gen_enable+0x34>)
    326a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    326c:	b25b      	sxtb	r3, r3
    326e:	2b00      	cmp	r3, #0
    3270:	dbfb      	blt.n	326a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    3272:	4b0a      	ldr	r3, [pc, #40]	; (329c <system_gclk_gen_enable+0x38>)
    3274:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    3276:	4b0a      	ldr	r3, [pc, #40]	; (32a0 <system_gclk_gen_enable+0x3c>)
    3278:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    327a:	4a07      	ldr	r2, [pc, #28]	; (3298 <system_gclk_gen_enable+0x34>)
    327c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    327e:	b25b      	sxtb	r3, r3
    3280:	2b00      	cmp	r3, #0
    3282:	dbfb      	blt.n	327c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    3284:	4a04      	ldr	r2, [pc, #16]	; (3298 <system_gclk_gen_enable+0x34>)
    3286:	6851      	ldr	r1, [r2, #4]
    3288:	2380      	movs	r3, #128	; 0x80
    328a:	025b      	lsls	r3, r3, #9
    328c:	430b      	orrs	r3, r1
    328e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    3290:	4b04      	ldr	r3, [pc, #16]	; (32a4 <system_gclk_gen_enable+0x40>)
    3292:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3294:	bd10      	pop	{r4, pc}
    3296:	46c0      	nop			; (mov r8, r8)
    3298:	40000c00 	.word	0x40000c00
    329c:	000019bd 	.word	0x000019bd
    32a0:	40000c04 	.word	0x40000c04
    32a4:	000019fd 	.word	0x000019fd

000032a8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    32a8:	b570      	push	{r4, r5, r6, lr}
    32aa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    32ac:	4a1a      	ldr	r2, [pc, #104]	; (3318 <system_gclk_gen_get_hz+0x70>)
    32ae:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    32b0:	b25b      	sxtb	r3, r3
    32b2:	2b00      	cmp	r3, #0
    32b4:	dbfb      	blt.n	32ae <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    32b6:	4b19      	ldr	r3, [pc, #100]	; (331c <system_gclk_gen_get_hz+0x74>)
    32b8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    32ba:	4b19      	ldr	r3, [pc, #100]	; (3320 <system_gclk_gen_get_hz+0x78>)
    32bc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    32be:	4a16      	ldr	r2, [pc, #88]	; (3318 <system_gclk_gen_get_hz+0x70>)
    32c0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    32c2:	b25b      	sxtb	r3, r3
    32c4:	2b00      	cmp	r3, #0
    32c6:	dbfb      	blt.n	32c0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    32c8:	4e13      	ldr	r6, [pc, #76]	; (3318 <system_gclk_gen_get_hz+0x70>)
    32ca:	6870      	ldr	r0, [r6, #4]
    32cc:	04c0      	lsls	r0, r0, #19
    32ce:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    32d0:	4b14      	ldr	r3, [pc, #80]	; (3324 <system_gclk_gen_get_hz+0x7c>)
    32d2:	4798      	blx	r3
    32d4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    32d6:	4b12      	ldr	r3, [pc, #72]	; (3320 <system_gclk_gen_get_hz+0x78>)
    32d8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    32da:	6876      	ldr	r6, [r6, #4]
    32dc:	02f6      	lsls	r6, r6, #11
    32de:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    32e0:	4b11      	ldr	r3, [pc, #68]	; (3328 <system_gclk_gen_get_hz+0x80>)
    32e2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    32e4:	4a0c      	ldr	r2, [pc, #48]	; (3318 <system_gclk_gen_get_hz+0x70>)
    32e6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    32e8:	b25b      	sxtb	r3, r3
    32ea:	2b00      	cmp	r3, #0
    32ec:	dbfb      	blt.n	32e6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    32ee:	4b0a      	ldr	r3, [pc, #40]	; (3318 <system_gclk_gen_get_hz+0x70>)
    32f0:	689c      	ldr	r4, [r3, #8]
    32f2:	0224      	lsls	r4, r4, #8
    32f4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    32f6:	4b0d      	ldr	r3, [pc, #52]	; (332c <system_gclk_gen_get_hz+0x84>)
    32f8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    32fa:	2e00      	cmp	r6, #0
    32fc:	d107      	bne.n	330e <system_gclk_gen_get_hz+0x66>
    32fe:	2c01      	cmp	r4, #1
    3300:	d907      	bls.n	3312 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    3302:	0021      	movs	r1, r4
    3304:	0028      	movs	r0, r5
    3306:	4b0a      	ldr	r3, [pc, #40]	; (3330 <system_gclk_gen_get_hz+0x88>)
    3308:	4798      	blx	r3
    330a:	0005      	movs	r5, r0
    330c:	e001      	b.n	3312 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    330e:	3401      	adds	r4, #1
    3310:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    3312:	0028      	movs	r0, r5
    3314:	bd70      	pop	{r4, r5, r6, pc}
    3316:	46c0      	nop			; (mov r8, r8)
    3318:	40000c00 	.word	0x40000c00
    331c:	000019bd 	.word	0x000019bd
    3320:	40000c04 	.word	0x40000c04
    3324:	00002d85 	.word	0x00002d85
    3328:	40000c08 	.word	0x40000c08
    332c:	000019fd 	.word	0x000019fd
    3330:	00005be5 	.word	0x00005be5

00003334 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    3334:	b510      	push	{r4, lr}
    3336:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3338:	4b06      	ldr	r3, [pc, #24]	; (3354 <system_gclk_chan_enable+0x20>)
    333a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    333c:	4b06      	ldr	r3, [pc, #24]	; (3358 <system_gclk_chan_enable+0x24>)
    333e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    3340:	4a06      	ldr	r2, [pc, #24]	; (335c <system_gclk_chan_enable+0x28>)
    3342:	8853      	ldrh	r3, [r2, #2]
    3344:	2180      	movs	r1, #128	; 0x80
    3346:	01c9      	lsls	r1, r1, #7
    3348:	430b      	orrs	r3, r1
    334a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    334c:	4b04      	ldr	r3, [pc, #16]	; (3360 <system_gclk_chan_enable+0x2c>)
    334e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    3350:	bd10      	pop	{r4, pc}
    3352:	46c0      	nop			; (mov r8, r8)
    3354:	000019bd 	.word	0x000019bd
    3358:	40000c02 	.word	0x40000c02
    335c:	40000c00 	.word	0x40000c00
    3360:	000019fd 	.word	0x000019fd

00003364 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    3364:	b510      	push	{r4, lr}
    3366:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3368:	4b0f      	ldr	r3, [pc, #60]	; (33a8 <system_gclk_chan_disable+0x44>)
    336a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    336c:	4b0f      	ldr	r3, [pc, #60]	; (33ac <system_gclk_chan_disable+0x48>)
    336e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    3370:	4a0f      	ldr	r2, [pc, #60]	; (33b0 <system_gclk_chan_disable+0x4c>)
    3372:	8853      	ldrh	r3, [r2, #2]
    3374:	051b      	lsls	r3, r3, #20
    3376:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    3378:	8853      	ldrh	r3, [r2, #2]
    337a:	490e      	ldr	r1, [pc, #56]	; (33b4 <system_gclk_chan_disable+0x50>)
    337c:	400b      	ands	r3, r1
    337e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    3380:	8853      	ldrh	r3, [r2, #2]
    3382:	490d      	ldr	r1, [pc, #52]	; (33b8 <system_gclk_chan_disable+0x54>)
    3384:	400b      	ands	r3, r1
    3386:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    3388:	0011      	movs	r1, r2
    338a:	2280      	movs	r2, #128	; 0x80
    338c:	01d2      	lsls	r2, r2, #7
    338e:	884b      	ldrh	r3, [r1, #2]
    3390:	4213      	tst	r3, r2
    3392:	d1fc      	bne.n	338e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    3394:	4906      	ldr	r1, [pc, #24]	; (33b0 <system_gclk_chan_disable+0x4c>)
    3396:	884a      	ldrh	r2, [r1, #2]
    3398:	0203      	lsls	r3, r0, #8
    339a:	4806      	ldr	r0, [pc, #24]	; (33b4 <system_gclk_chan_disable+0x50>)
    339c:	4002      	ands	r2, r0
    339e:	4313      	orrs	r3, r2
    33a0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    33a2:	4b06      	ldr	r3, [pc, #24]	; (33bc <system_gclk_chan_disable+0x58>)
    33a4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    33a6:	bd10      	pop	{r4, pc}
    33a8:	000019bd 	.word	0x000019bd
    33ac:	40000c02 	.word	0x40000c02
    33b0:	40000c00 	.word	0x40000c00
    33b4:	fffff0ff 	.word	0xfffff0ff
    33b8:	ffffbfff 	.word	0xffffbfff
    33bc:	000019fd 	.word	0x000019fd

000033c0 <system_gclk_chan_set_config>:
{
    33c0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    33c2:	780c      	ldrb	r4, [r1, #0]
    33c4:	0224      	lsls	r4, r4, #8
    33c6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    33c8:	4b02      	ldr	r3, [pc, #8]	; (33d4 <system_gclk_chan_set_config+0x14>)
    33ca:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    33cc:	b2a4      	uxth	r4, r4
    33ce:	4b02      	ldr	r3, [pc, #8]	; (33d8 <system_gclk_chan_set_config+0x18>)
    33d0:	805c      	strh	r4, [r3, #2]
}
    33d2:	bd10      	pop	{r4, pc}
    33d4:	00003365 	.word	0x00003365
    33d8:	40000c00 	.word	0x40000c00

000033dc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    33dc:	b510      	push	{r4, lr}
    33de:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    33e0:	4b06      	ldr	r3, [pc, #24]	; (33fc <system_gclk_chan_get_hz+0x20>)
    33e2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    33e4:	4b06      	ldr	r3, [pc, #24]	; (3400 <system_gclk_chan_get_hz+0x24>)
    33e6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    33e8:	4b06      	ldr	r3, [pc, #24]	; (3404 <system_gclk_chan_get_hz+0x28>)
    33ea:	885c      	ldrh	r4, [r3, #2]
    33ec:	0524      	lsls	r4, r4, #20
    33ee:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    33f0:	4b05      	ldr	r3, [pc, #20]	; (3408 <system_gclk_chan_get_hz+0x2c>)
    33f2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    33f4:	0020      	movs	r0, r4
    33f6:	4b05      	ldr	r3, [pc, #20]	; (340c <system_gclk_chan_get_hz+0x30>)
    33f8:	4798      	blx	r3
}
    33fa:	bd10      	pop	{r4, pc}
    33fc:	000019bd 	.word	0x000019bd
    3400:	40000c02 	.word	0x40000c02
    3404:	40000c00 	.word	0x40000c00
    3408:	000019fd 	.word	0x000019fd
    340c:	000032a9 	.word	0x000032a9

00003410 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3410:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3412:	78d3      	ldrb	r3, [r2, #3]
    3414:	2b00      	cmp	r3, #0
    3416:	d135      	bne.n	3484 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3418:	7813      	ldrb	r3, [r2, #0]
    341a:	2b80      	cmp	r3, #128	; 0x80
    341c:	d029      	beq.n	3472 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    341e:	061b      	lsls	r3, r3, #24
    3420:	2480      	movs	r4, #128	; 0x80
    3422:	0264      	lsls	r4, r4, #9
    3424:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3426:	7854      	ldrb	r4, [r2, #1]
    3428:	2502      	movs	r5, #2
    342a:	43ac      	bics	r4, r5
    342c:	d106      	bne.n	343c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    342e:	7894      	ldrb	r4, [r2, #2]
    3430:	2c00      	cmp	r4, #0
    3432:	d120      	bne.n	3476 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    3434:	2480      	movs	r4, #128	; 0x80
    3436:	02a4      	lsls	r4, r4, #10
    3438:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    343a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    343c:	7854      	ldrb	r4, [r2, #1]
    343e:	3c01      	subs	r4, #1
    3440:	2c01      	cmp	r4, #1
    3442:	d91c      	bls.n	347e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3444:	040d      	lsls	r5, r1, #16
    3446:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3448:	24a0      	movs	r4, #160	; 0xa0
    344a:	05e4      	lsls	r4, r4, #23
    344c:	432c      	orrs	r4, r5
    344e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3450:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3452:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3454:	24d0      	movs	r4, #208	; 0xd0
    3456:	0624      	lsls	r4, r4, #24
    3458:	432c      	orrs	r4, r5
    345a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    345c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    345e:	78d4      	ldrb	r4, [r2, #3]
    3460:	2c00      	cmp	r4, #0
    3462:	d122      	bne.n	34aa <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    3464:	035b      	lsls	r3, r3, #13
    3466:	d51c      	bpl.n	34a2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    3468:	7893      	ldrb	r3, [r2, #2]
    346a:	2b01      	cmp	r3, #1
    346c:	d01e      	beq.n	34ac <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    346e:	6141      	str	r1, [r0, #20]
    3470:	e017      	b.n	34a2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    3472:	2300      	movs	r3, #0
    3474:	e7d7      	b.n	3426 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    3476:	24c0      	movs	r4, #192	; 0xc0
    3478:	02e4      	lsls	r4, r4, #11
    347a:	4323      	orrs	r3, r4
    347c:	e7dd      	b.n	343a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    347e:	4c0d      	ldr	r4, [pc, #52]	; (34b4 <_system_pinmux_config+0xa4>)
    3480:	4023      	ands	r3, r4
    3482:	e7df      	b.n	3444 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    3484:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3486:	040c      	lsls	r4, r1, #16
    3488:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    348a:	23a0      	movs	r3, #160	; 0xa0
    348c:	05db      	lsls	r3, r3, #23
    348e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3490:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3492:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3494:	23d0      	movs	r3, #208	; 0xd0
    3496:	061b      	lsls	r3, r3, #24
    3498:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    349a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    349c:	78d3      	ldrb	r3, [r2, #3]
    349e:	2b00      	cmp	r3, #0
    34a0:	d103      	bne.n	34aa <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    34a2:	7853      	ldrb	r3, [r2, #1]
    34a4:	3b01      	subs	r3, #1
    34a6:	2b01      	cmp	r3, #1
    34a8:	d902      	bls.n	34b0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    34aa:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    34ac:	6181      	str	r1, [r0, #24]
    34ae:	e7f8      	b.n	34a2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    34b0:	6081      	str	r1, [r0, #8]
}
    34b2:	e7fa      	b.n	34aa <_system_pinmux_config+0x9a>
    34b4:	fffbffff 	.word	0xfffbffff

000034b8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    34b8:	b510      	push	{r4, lr}
    34ba:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    34bc:	09c1      	lsrs	r1, r0, #7
		return NULL;
    34be:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    34c0:	2900      	cmp	r1, #0
    34c2:	d104      	bne.n	34ce <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    34c4:	0943      	lsrs	r3, r0, #5
    34c6:	01db      	lsls	r3, r3, #7
    34c8:	4905      	ldr	r1, [pc, #20]	; (34e0 <system_pinmux_pin_set_config+0x28>)
    34ca:	468c      	mov	ip, r1
    34cc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    34ce:	241f      	movs	r4, #31
    34d0:	4020      	ands	r0, r4
    34d2:	2101      	movs	r1, #1
    34d4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    34d6:	0018      	movs	r0, r3
    34d8:	4b02      	ldr	r3, [pc, #8]	; (34e4 <system_pinmux_pin_set_config+0x2c>)
    34da:	4798      	blx	r3
}
    34dc:	bd10      	pop	{r4, pc}
    34de:	46c0      	nop			; (mov r8, r8)
    34e0:	41004400 	.word	0x41004400
    34e4:	00003411 	.word	0x00003411

000034e8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    34e8:	4770      	bx	lr
	...

000034ec <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    34ec:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    34ee:	4b05      	ldr	r3, [pc, #20]	; (3504 <system_init+0x18>)
    34f0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    34f2:	4b05      	ldr	r3, [pc, #20]	; (3508 <system_init+0x1c>)
    34f4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    34f6:	4b05      	ldr	r3, [pc, #20]	; (350c <system_init+0x20>)
    34f8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    34fa:	4b05      	ldr	r3, [pc, #20]	; (3510 <system_init+0x24>)
    34fc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    34fe:	4b05      	ldr	r3, [pc, #20]	; (3514 <system_init+0x28>)
    3500:	4798      	blx	r3
}
    3502:	bd10      	pop	{r4, pc}
    3504:	00003035 	.word	0x00003035
    3508:	00000115 	.word	0x00000115
    350c:	000034e9 	.word	0x000034e9
    3510:	000034e9 	.word	0x000034e9
    3514:	000034e9 	.word	0x000034e9

00003518 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3518:	e7fe      	b.n	3518 <Dummy_Handler>
	...

0000351c <Reset_Handler>:
{
    351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    351e:	4a2a      	ldr	r2, [pc, #168]	; (35c8 <Reset_Handler+0xac>)
    3520:	4b2a      	ldr	r3, [pc, #168]	; (35cc <Reset_Handler+0xb0>)
    3522:	429a      	cmp	r2, r3
    3524:	d011      	beq.n	354a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    3526:	001a      	movs	r2, r3
    3528:	4b29      	ldr	r3, [pc, #164]	; (35d0 <Reset_Handler+0xb4>)
    352a:	429a      	cmp	r2, r3
    352c:	d20d      	bcs.n	354a <Reset_Handler+0x2e>
    352e:	4a29      	ldr	r2, [pc, #164]	; (35d4 <Reset_Handler+0xb8>)
    3530:	3303      	adds	r3, #3
    3532:	1a9b      	subs	r3, r3, r2
    3534:	089b      	lsrs	r3, r3, #2
    3536:	3301      	adds	r3, #1
    3538:	009b      	lsls	r3, r3, #2
    353a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    353c:	4823      	ldr	r0, [pc, #140]	; (35cc <Reset_Handler+0xb0>)
    353e:	4922      	ldr	r1, [pc, #136]	; (35c8 <Reset_Handler+0xac>)
    3540:	588c      	ldr	r4, [r1, r2]
    3542:	5084      	str	r4, [r0, r2]
    3544:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    3546:	429a      	cmp	r2, r3
    3548:	d1fa      	bne.n	3540 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    354a:	4a23      	ldr	r2, [pc, #140]	; (35d8 <Reset_Handler+0xbc>)
    354c:	4b23      	ldr	r3, [pc, #140]	; (35dc <Reset_Handler+0xc0>)
    354e:	429a      	cmp	r2, r3
    3550:	d20a      	bcs.n	3568 <Reset_Handler+0x4c>
    3552:	43d3      	mvns	r3, r2
    3554:	4921      	ldr	r1, [pc, #132]	; (35dc <Reset_Handler+0xc0>)
    3556:	185b      	adds	r3, r3, r1
    3558:	2103      	movs	r1, #3
    355a:	438b      	bics	r3, r1
    355c:	3304      	adds	r3, #4
    355e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    3560:	2100      	movs	r1, #0
    3562:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3564:	4293      	cmp	r3, r2
    3566:	d1fc      	bne.n	3562 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3568:	4a1d      	ldr	r2, [pc, #116]	; (35e0 <Reset_Handler+0xc4>)
    356a:	21ff      	movs	r1, #255	; 0xff
    356c:	4b1d      	ldr	r3, [pc, #116]	; (35e4 <Reset_Handler+0xc8>)
    356e:	438b      	bics	r3, r1
    3570:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    3572:	39fd      	subs	r1, #253	; 0xfd
    3574:	2390      	movs	r3, #144	; 0x90
    3576:	005b      	lsls	r3, r3, #1
    3578:	4a1b      	ldr	r2, [pc, #108]	; (35e8 <Reset_Handler+0xcc>)
    357a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    357c:	4a1b      	ldr	r2, [pc, #108]	; (35ec <Reset_Handler+0xd0>)
    357e:	78d3      	ldrb	r3, [r2, #3]
    3580:	2503      	movs	r5, #3
    3582:	43ab      	bics	r3, r5
    3584:	2402      	movs	r4, #2
    3586:	4323      	orrs	r3, r4
    3588:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    358a:	78d3      	ldrb	r3, [r2, #3]
    358c:	270c      	movs	r7, #12
    358e:	43bb      	bics	r3, r7
    3590:	2608      	movs	r6, #8
    3592:	4333      	orrs	r3, r6
    3594:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    3596:	4b16      	ldr	r3, [pc, #88]	; (35f0 <Reset_Handler+0xd4>)
    3598:	7b98      	ldrb	r0, [r3, #14]
    359a:	2230      	movs	r2, #48	; 0x30
    359c:	4390      	bics	r0, r2
    359e:	2220      	movs	r2, #32
    35a0:	4310      	orrs	r0, r2
    35a2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    35a4:	7b99      	ldrb	r1, [r3, #14]
    35a6:	43b9      	bics	r1, r7
    35a8:	4331      	orrs	r1, r6
    35aa:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    35ac:	7b9a      	ldrb	r2, [r3, #14]
    35ae:	43aa      	bics	r2, r5
    35b0:	4322      	orrs	r2, r4
    35b2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    35b4:	4a0f      	ldr	r2, [pc, #60]	; (35f4 <Reset_Handler+0xd8>)
    35b6:	6853      	ldr	r3, [r2, #4]
    35b8:	2180      	movs	r1, #128	; 0x80
    35ba:	430b      	orrs	r3, r1
    35bc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    35be:	4b0e      	ldr	r3, [pc, #56]	; (35f8 <Reset_Handler+0xdc>)
    35c0:	4798      	blx	r3
        main();
    35c2:	4b0e      	ldr	r3, [pc, #56]	; (35fc <Reset_Handler+0xe0>)
    35c4:	4798      	blx	r3
    35c6:	e7fe      	b.n	35c6 <Reset_Handler+0xaa>
    35c8:	000076d0 	.word	0x000076d0
    35cc:	20000000 	.word	0x20000000
    35d0:	20000204 	.word	0x20000204
    35d4:	20000004 	.word	0x20000004
    35d8:	20000204 	.word	0x20000204
    35dc:	20000eac 	.word	0x20000eac
    35e0:	e000ed00 	.word	0xe000ed00
    35e4:	00000000 	.word	0x00000000
    35e8:	41007000 	.word	0x41007000
    35ec:	41005000 	.word	0x41005000
    35f0:	41004800 	.word	0x41004800
    35f4:	41004000 	.word	0x41004000
    35f8:	00006145 	.word	0x00006145
    35fc:	00005a75 	.word	0x00005a75

00003600 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3600:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3602:	4a06      	ldr	r2, [pc, #24]	; (361c <_sbrk+0x1c>)
    3604:	6812      	ldr	r2, [r2, #0]
    3606:	2a00      	cmp	r2, #0
    3608:	d004      	beq.n	3614 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    360a:	4a04      	ldr	r2, [pc, #16]	; (361c <_sbrk+0x1c>)
    360c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    360e:	18c3      	adds	r3, r0, r3
    3610:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3612:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3614:	4902      	ldr	r1, [pc, #8]	; (3620 <_sbrk+0x20>)
    3616:	4a01      	ldr	r2, [pc, #4]	; (361c <_sbrk+0x1c>)
    3618:	6011      	str	r1, [r2, #0]
    361a:	e7f6      	b.n	360a <_sbrk+0xa>
    361c:	200002e8 	.word	0x200002e8
    3620:	20002eb0 	.word	0x20002eb0

00003624 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    3624:	b530      	push	{r4, r5, lr}
    3626:	b087      	sub	sp, #28
    3628:	0004      	movs	r4, r0
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    362a:	aa01      	add	r2, sp, #4
    362c:	23a0      	movs	r3, #160	; 0xa0
    362e:	011b      	lsls	r3, r3, #4
    3630:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
    3632:	2300      	movs	r3, #0
    3634:	7093      	strb	r3, [r2, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    3636:	70d3      	strb	r3, [r2, #3]
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
    3638:	21fa      	movs	r1, #250	; 0xfa
    363a:	00c9      	lsls	r1, r1, #3
    363c:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.clock_24h     = true;
    363e:	2101      	movs	r1, #1
    3640:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    3642:	2004      	movs	r0, #4
    3644:	7210      	strb	r0, [r2, #8]
    3646:	7253      	strb	r3, [r2, #9]
    3648:	7293      	strb	r3, [r2, #10]
    364a:	72d3      	strb	r3, [r2, #11]
    364c:	7311      	strb	r1, [r2, #12]
    364e:	7351      	strb	r1, [r2, #13]
    3650:	4b14      	ldr	r3, [pc, #80]	; (36a4 <disk_initialize+0x80>)
    3652:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    3654:	2306      	movs	r3, #6
    3656:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    3658:	4d13      	ldr	r5, [pc, #76]	; (36a8 <disk_initialize+0x84>)
    365a:	4914      	ldr	r1, [pc, #80]	; (36ac <disk_initialize+0x88>)
    365c:	0028      	movs	r0, r5
    365e:	4b14      	ldr	r3, [pc, #80]	; (36b0 <disk_initialize+0x8c>)
    3660:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    3662:	0028      	movs	r0, r5
    3664:	4b13      	ldr	r3, [pc, #76]	; (36b4 <disk_initialize+0x90>)
    3666:	4798      	blx	r3
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    3668:	2001      	movs	r0, #1
	if (drv > MAX_LUN) {
    366a:	2c01      	cmp	r4, #1
    366c:	d901      	bls.n	3672 <disk_initialize+0x4e>
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
    366e:	b007      	add	sp, #28
    3670:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
    3672:	0020      	movs	r0, r4
    3674:	4b10      	ldr	r3, [pc, #64]	; (36b8 <disk_initialize+0x94>)
    3676:	4798      	blx	r3
    3678:	0003      	movs	r3, r0
		if (CTRL_BUSY != mem_status) {
    367a:	2803      	cmp	r0, #3
    367c:	d106      	bne.n	368c <disk_initialize+0x68>
		mem_status = mem_test_unit_ready(drv);
    367e:	0020      	movs	r0, r4
    3680:	4b0d      	ldr	r3, [pc, #52]	; (36b8 <disk_initialize+0x94>)
    3682:	4798      	blx	r3
    3684:	0003      	movs	r3, r0
		return STA_NOINIT;
    3686:	2001      	movs	r0, #1
		if (CTRL_BUSY != mem_status) {
    3688:	2b03      	cmp	r3, #3
    368a:	d0f0      	beq.n	366e <disk_initialize+0x4a>
	if (mem_status != CTRL_GOOD) {
    368c:	2b00      	cmp	r3, #0
    368e:	d106      	bne.n	369e <disk_initialize+0x7a>
	if (mem_wr_protect(drv)) {
    3690:	0020      	movs	r0, r4
    3692:	4b0a      	ldr	r3, [pc, #40]	; (36bc <disk_initialize+0x98>)
    3694:	4798      	blx	r3
	return 0;
    3696:	1e43      	subs	r3, r0, #1
    3698:	4198      	sbcs	r0, r3
    369a:	0080      	lsls	r0, r0, #2
    369c:	e7e7      	b.n	366e <disk_initialize+0x4a>
		return STA_NOINIT;
    369e:	2001      	movs	r0, #1
    36a0:	e7e5      	b.n	366e <disk_initialize+0x4a>
    36a2:	46c0      	nop			; (mov r8, r8)
    36a4:	000007de 	.word	0x000007de
    36a8:	20000b90 	.word	0x20000b90
    36ac:	40001400 	.word	0x40001400
    36b0:	00001b95 	.word	0x00001b95
    36b4:	00001a51 	.word	0x00001a51
    36b8:	00001929 	.word	0x00001929
    36bc:	00001965 	.word	0x00001965

000036c0 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    36c0:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
    36c2:	4b05      	ldr	r3, [pc, #20]	; (36d8 <disk_status+0x18>)
    36c4:	4798      	blx	r3
    36c6:	1e03      	subs	r3, r0, #0
    36c8:	d004      	beq.n	36d4 <disk_status+0x14>
	case CTRL_GOOD:
		return 0;
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    36ca:	2003      	movs	r0, #3
	switch (mem_test_unit_ready(drv)) {
    36cc:	2b02      	cmp	r3, #2
    36ce:	d000      	beq.n	36d2 <disk_status+0x12>
	default:
		return STA_NOINIT;
    36d0:	3802      	subs	r0, #2
	}
}
    36d2:	bd10      	pop	{r4, pc}
		return 0;
    36d4:	2000      	movs	r0, #0
    36d6:	e7fc      	b.n	36d2 <disk_status+0x12>
    36d8:	00001929 	.word	0x00001929

000036dc <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    36dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    36de:	46de      	mov	lr, fp
    36e0:	464f      	mov	r7, r9
    36e2:	4646      	mov	r6, r8
    36e4:	b5c0      	push	{r6, r7, lr}
    36e6:	b084      	sub	sp, #16
    36e8:	9001      	str	r0, [sp, #4]
    36ea:	000d      	movs	r5, r1
    36ec:	0014      	movs	r4, r2
    36ee:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    36f0:	4b18      	ldr	r3, [pc, #96]	; (3754 <disk_read+0x78>)
    36f2:	4798      	blx	r3
    36f4:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    36f6:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    36f8:	2e00      	cmp	r6, #0
    36fa:	d105      	bne.n	3708 <disk_read+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    36fc:	b004      	add	sp, #16
    36fe:	bc1c      	pop	{r2, r3, r4}
    3700:	4690      	mov	r8, r2
    3702:	4699      	mov	r9, r3
    3704:	46a3      	mov	fp, r4
    3706:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    3708:	a903      	add	r1, sp, #12
    370a:	9801      	ldr	r0, [sp, #4]
    370c:	4b12      	ldr	r3, [pc, #72]	; (3758 <disk_read+0x7c>)
    370e:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    3710:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    3712:	0032      	movs	r2, r6
    3714:	437a      	muls	r2, r7
    3716:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    3718:	9b03      	ldr	r3, [sp, #12]
    371a:	3301      	adds	r3, #1
    371c:	4373      	muls	r3, r6
		return RES_PARERR;
    371e:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    3720:	429a      	cmp	r2, r3
    3722:	d8eb      	bhi.n	36fc <disk_read+0x20>
	for (i = 0; i < count; i++) {
    3724:	2f00      	cmp	r7, #0
    3726:	d011      	beq.n	374c <disk_read+0x70>
    3728:	0273      	lsls	r3, r6, #9
    372a:	4698      	mov	r8, r3
    372c:	1c7b      	adds	r3, r7, #1
    372e:	469b      	mov	fp, r3
    3730:	2701      	movs	r7, #1
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    3732:	4e0a      	ldr	r6, [pc, #40]	; (375c <disk_read+0x80>)
    3734:	002a      	movs	r2, r5
    3736:	0021      	movs	r1, r4
    3738:	9801      	ldr	r0, [sp, #4]
    373a:	47b0      	blx	r6
    373c:	2800      	cmp	r0, #0
    373e:	d107      	bne.n	3750 <disk_read+0x74>
    3740:	3701      	adds	r7, #1
    3742:	444c      	add	r4, r9
    3744:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    3746:	455f      	cmp	r7, fp
    3748:	d1f4      	bne.n	3734 <disk_read+0x58>
    374a:	e7d7      	b.n	36fc <disk_read+0x20>
	return RES_OK;
    374c:	2000      	movs	r0, #0
    374e:	e7d5      	b.n	36fc <disk_read+0x20>
			return RES_ERROR;
    3750:	2001      	movs	r0, #1
    3752:	e7d3      	b.n	36fc <disk_read+0x20>
    3754:	0000195d 	.word	0x0000195d
    3758:	00001941 	.word	0x00001941
    375c:	0000197d 	.word	0x0000197d

00003760 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    3760:	b5f0      	push	{r4, r5, r6, r7, lr}
    3762:	46de      	mov	lr, fp
    3764:	464f      	mov	r7, r9
    3766:	4646      	mov	r6, r8
    3768:	b5c0      	push	{r6, r7, lr}
    376a:	b084      	sub	sp, #16
    376c:	9001      	str	r0, [sp, #4]
    376e:	000d      	movs	r5, r1
    3770:	0014      	movs	r4, r2
    3772:	001f      	movs	r7, r3
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    3774:	4b18      	ldr	r3, [pc, #96]	; (37d8 <disk_write+0x78>)
    3776:	4798      	blx	r3
    3778:	0006      	movs	r6, r0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
		return RES_ERROR;
    377a:	2001      	movs	r0, #1
	if (uc_sector_size == 0) {
    377c:	2e00      	cmp	r6, #0
    377e:	d105      	bne.n	378c <disk_write+0x2c>
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
    3780:	b004      	add	sp, #16
    3782:	bc1c      	pop	{r2, r3, r4}
    3784:	4690      	mov	r8, r2
    3786:	4699      	mov	r9, r3
    3788:	46a3      	mov	fp, r4
    378a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
    378c:	a903      	add	r1, sp, #12
    378e:	9801      	ldr	r0, [sp, #4]
    3790:	4b12      	ldr	r3, [pc, #72]	; (37dc <disk_write+0x7c>)
    3792:	4798      	blx	r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    3794:	46b1      	mov	r9, r6
	if ((sector + count * uc_sector_size) >
    3796:	0032      	movs	r2, r6
    3798:	437a      	muls	r2, r7
    379a:	1912      	adds	r2, r2, r4
			(ul_last_sector_num + 1) * uc_sector_size) {
    379c:	9b03      	ldr	r3, [sp, #12]
    379e:	3301      	adds	r3, #1
    37a0:	4373      	muls	r3, r6
		return RES_PARERR;
    37a2:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
    37a4:	429a      	cmp	r2, r3
    37a6:	d8eb      	bhi.n	3780 <disk_write+0x20>
	for (i = 0; i < count; i++) {
    37a8:	2f00      	cmp	r7, #0
    37aa:	d011      	beq.n	37d0 <disk_write+0x70>
    37ac:	0273      	lsls	r3, r6, #9
    37ae:	4698      	mov	r8, r3
    37b0:	1c7b      	adds	r3, r7, #1
    37b2:	469b      	mov	fp, r3
    37b4:	2701      	movs	r7, #1
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    37b6:	4e0a      	ldr	r6, [pc, #40]	; (37e0 <disk_write+0x80>)
    37b8:	002a      	movs	r2, r5
    37ba:	0021      	movs	r1, r4
    37bc:	9801      	ldr	r0, [sp, #4]
    37be:	47b0      	blx	r6
    37c0:	2800      	cmp	r0, #0
    37c2:	d107      	bne.n	37d4 <disk_write+0x74>
    37c4:	3701      	adds	r7, #1
    37c6:	444c      	add	r4, r9
    37c8:	4445      	add	r5, r8
	for (i = 0; i < count; i++) {
    37ca:	455f      	cmp	r7, fp
    37cc:	d1f4      	bne.n	37b8 <disk_write+0x58>
    37ce:	e7d7      	b.n	3780 <disk_write+0x20>
	return RES_OK;
    37d0:	2000      	movs	r0, #0
    37d2:	e7d5      	b.n	3780 <disk_write+0x20>
			return RES_ERROR;
    37d4:	2001      	movs	r0, #1
    37d6:	e7d3      	b.n	3780 <disk_write+0x20>
    37d8:	0000195d 	.word	0x0000195d
    37dc:	00001941 	.word	0x00001941
    37e0:	0000199d 	.word	0x0000199d

000037e4 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    37e4:	b510      	push	{r4, lr}
    37e6:	b082      	sub	sp, #8
    37e8:	0014      	movs	r4, r2
	DRESULT res = RES_PARERR;

	switch (ctrl) {
    37ea:	2901      	cmp	r1, #1
    37ec:	d00b      	beq.n	3806 <disk_ioctl+0x22>
    37ee:	2900      	cmp	r1, #0
    37f0:	d020      	beq.n	3834 <disk_ioctl+0x50>
    37f2:	2902      	cmp	r1, #2
    37f4:	d00f      	beq.n	3816 <disk_ioctl+0x32>
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
    37f6:	2004      	movs	r0, #4
	switch (ctrl) {
    37f8:	2903      	cmp	r1, #3
    37fa:	d102      	bne.n	3802 <disk_ioctl+0x1e>
		*(DWORD *)buff = 1;
    37fc:	2301      	movs	r3, #1
    37fe:	6013      	str	r3, [r2, #0]
		res = RES_OK;
    3800:	2000      	movs	r0, #0
	}

	return res;
}
    3802:	b002      	add	sp, #8
    3804:	bd10      	pop	{r4, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
    3806:	a901      	add	r1, sp, #4
    3808:	4b0e      	ldr	r3, [pc, #56]	; (3844 <disk_ioctl+0x60>)
    380a:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
    380c:	9b01      	ldr	r3, [sp, #4]
    380e:	3301      	adds	r3, #1
    3810:	6023      	str	r3, [r4, #0]
		res = RES_OK;
    3812:	2000      	movs	r0, #0
	break;
    3814:	e7f5      	b.n	3802 <disk_ioctl+0x1e>
		uint8_t uc_sector_size = mem_sector_size(drv);
    3816:	4b0c      	ldr	r3, [pc, #48]	; (3848 <disk_ioctl+0x64>)
    3818:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
    381a:	1e43      	subs	r3, r0, #1
    381c:	b2db      	uxtb	r3, r3
    381e:	2b01      	cmp	r3, #1
    3820:	d904      	bls.n	382c <disk_ioctl+0x48>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3822:	1f03      	subs	r3, r0, #4
    3824:	22fb      	movs	r2, #251	; 0xfb
			return RES_ERROR;
    3826:	2001      	movs	r0, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
    3828:	4213      	tst	r3, r2
    382a:	d1ea      	bne.n	3802 <disk_ioctl+0x1e>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    382c:	2300      	movs	r3, #0
    382e:	7023      	strb	r3, [r4, #0]
		res = RES_OK;
    3830:	2000      	movs	r0, #0
	break;
    3832:	e7e6      	b.n	3802 <disk_ioctl+0x1e>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    3834:	4b05      	ldr	r3, [pc, #20]	; (384c <disk_ioctl+0x68>)
    3836:	4798      	blx	r3
    3838:	2800      	cmp	r0, #0
    383a:	d001      	beq.n	3840 <disk_ioctl+0x5c>
			res = RES_NOTRDY;
    383c:	2003      	movs	r0, #3
    383e:	e7e0      	b.n	3802 <disk_ioctl+0x1e>
			res = RES_OK;
    3840:	2000      	movs	r0, #0
    3842:	e7de      	b.n	3802 <disk_ioctl+0x1e>
    3844:	00001941 	.word	0x00001941
    3848:	0000195d 	.word	0x0000195d
    384c:	00001929 	.word	0x00001929

00003850 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    3850:	b500      	push	{lr}
    3852:	b083      	sub	sp, #12
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    3854:	4669      	mov	r1, sp
    3856:	480f      	ldr	r0, [pc, #60]	; (3894 <get_fattime+0x44>)
    3858:	4b0f      	ldr	r3, [pc, #60]	; (3898 <get_fattime+0x48>)
    385a:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
    385c:	466b      	mov	r3, sp
    385e:	7958      	ldrb	r0, [r3, #5]
    3860:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
    3862:	791b      	ldrb	r3, [r3, #4]
    3864:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
    3866:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
    3868:	466b      	mov	r3, sp
    386a:	789b      	ldrb	r3, [r3, #2]
    386c:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
    386e:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
    3870:	466b      	mov	r3, sp
    3872:	785b      	ldrb	r3, [r3, #1]
    3874:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
    3876:	4318      	orrs	r0, r3
    3878:	466b      	mov	r3, sp
    387a:	781b      	ldrb	r3, [r3, #0]
    387c:	085b      	lsrs	r3, r3, #1
    387e:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
    3880:	466b      	mov	r3, sp
    3882:	88db      	ldrh	r3, [r3, #6]
    3884:	4a05      	ldr	r2, [pc, #20]	; (389c <get_fattime+0x4c>)
    3886:	4694      	mov	ip, r2
    3888:	4463      	add	r3, ip
    388a:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
    388c:	4318      	orrs	r0, r3

	return ul_time;
}
    388e:	b003      	add	sp, #12
    3890:	bd00      	pop	{pc}
    3892:	46c0      	nop			; (mov r8, r8)
    3894:	20000b90 	.word	0x20000b90
    3898:	00001b1d 	.word	0x00001b1d
    389c:	fffff844 	.word	0xfffff844

000038a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    38a0:	b510      	push	{r4, lr}
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    38a2:	2a00      	cmp	r2, #0
    38a4:	d005      	beq.n	38b2 <mem_cpy+0x12>
    38a6:	2300      	movs	r3, #0
		*d++ = *s++;
    38a8:	5ccc      	ldrb	r4, [r1, r3]
    38aa:	54c4      	strb	r4, [r0, r3]
    38ac:	3301      	adds	r3, #1
	while (cnt--)
    38ae:	4293      	cmp	r3, r2
    38b0:	d1fa      	bne.n	38a8 <mem_cpy+0x8>
}
    38b2:	bd10      	pop	{r4, pc}

000038b4 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    38b4:	2a00      	cmp	r2, #0
    38b6:	d005      	beq.n	38c4 <mem_set+0x10>
    38b8:	0003      	movs	r3, r0
    38ba:	1882      	adds	r2, r0, r2
		*d++ = (BYTE)val;
    38bc:	7019      	strb	r1, [r3, #0]
    38be:	3301      	adds	r3, #1
	while (cnt--)
    38c0:	4293      	cmp	r3, r2
    38c2:	d1fb      	bne.n	38bc <mem_set+0x8>
}
    38c4:	4770      	bx	lr

000038c6 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    38c6:	0002      	movs	r2, r0
	clst -= 2;
    38c8:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    38ca:	6983      	ldr	r3, [r0, #24]
    38cc:	3b02      	subs	r3, #2
    38ce:	2000      	movs	r0, #0
    38d0:	4299      	cmp	r1, r3
    38d2:	d203      	bcs.n	38dc <clust2sect+0x16>
	return clst * fs->csize + fs->database;
    38d4:	7890      	ldrb	r0, [r2, #2]
    38d6:	4341      	muls	r1, r0
    38d8:	6a90      	ldr	r0, [r2, #40]	; 0x28
    38da:	1808      	adds	r0, r1, r0
}
    38dc:	4770      	bx	lr

000038de <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    38de:	0002      	movs	r2, r0
    38e0:	0001      	movs	r1, r0
    38e2:	310b      	adds	r1, #11
	BYTE sum = 0;
    38e4:	2000      	movs	r0, #0
	UINT n = 11;

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    38e6:	0843      	lsrs	r3, r0, #1
    38e8:	01c0      	lsls	r0, r0, #7
    38ea:	4303      	orrs	r3, r0
    38ec:	7810      	ldrb	r0, [r2, #0]
    38ee:	1818      	adds	r0, r3, r0
    38f0:	b2c0      	uxtb	r0, r0
    38f2:	3201      	adds	r2, #1
    38f4:	428a      	cmp	r2, r1
    38f6:	d1f6      	bne.n	38e6 <sum_sfn+0x8>
	return sum;
}
    38f8:	4770      	bx	lr
	...

000038fc <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    38fc:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
    38fe:	2800      	cmp	r0, #0
    3900:	d010      	beq.n	3924 <validate+0x28>
    3902:	7802      	ldrb	r2, [r0, #0]
		return FR_INVALID_OBJECT;
    3904:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
    3906:	2a00      	cmp	r2, #0
    3908:	d101      	bne.n	390e <validate+0x12>

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
    390a:	0018      	movs	r0, r3
    390c:	bd10      	pop	{r4, pc}
	if (!fs || !fs->fs_type || fs->id != id)
    390e:	88c2      	ldrh	r2, [r0, #6]
    3910:	428a      	cmp	r2, r1
    3912:	d1fa      	bne.n	390a <validate+0xe>
	if (disk_status(fs->drv) & STA_NOINIT)
    3914:	7840      	ldrb	r0, [r0, #1]
    3916:	4b04      	ldr	r3, [pc, #16]	; (3928 <validate+0x2c>)
    3918:	4798      	blx	r3
		return FR_NOT_READY;
    391a:	2303      	movs	r3, #3
	return FR_OK;
    391c:	07c0      	lsls	r0, r0, #31
    391e:	17c0      	asrs	r0, r0, #31
    3920:	4003      	ands	r3, r0
    3922:	e7f2      	b.n	390a <validate+0xe>
		return FR_INVALID_OBJECT;
    3924:	2309      	movs	r3, #9
    3926:	e7f0      	b.n	390a <validate+0xe>
    3928:	000036c1 	.word	0x000036c1

0000392c <check_fs>:
{
    392c:	b570      	push	{r4, r5, r6, lr}
    392e:	0004      	movs	r4, r0
    3930:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3932:	0001      	movs	r1, r0
    3934:	3130      	adds	r1, #48	; 0x30
    3936:	7840      	ldrb	r0, [r0, #1]
    3938:	2301      	movs	r3, #1
    393a:	4d1f      	ldr	r5, [pc, #124]	; (39b8 <check_fs+0x8c>)
    393c:	47a8      	blx	r5
		return 3;
    393e:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    3940:	2800      	cmp	r0, #0
    3942:	d001      	beq.n	3948 <check_fs+0x1c>
}
    3944:	0018      	movs	r0, r3
    3946:	bd70      	pop	{r4, r5, r6, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    3948:	4b1c      	ldr	r3, [pc, #112]	; (39bc <check_fs+0x90>)
    394a:	5ce3      	ldrb	r3, [r4, r3]
    394c:	021b      	lsls	r3, r3, #8
    394e:	4a1c      	ldr	r2, [pc, #112]	; (39c0 <check_fs+0x94>)
    3950:	5ca2      	ldrb	r2, [r4, r2]
    3952:	431a      	orrs	r2, r3
    3954:	491b      	ldr	r1, [pc, #108]	; (39c4 <check_fs+0x98>)
    3956:	b212      	sxth	r2, r2
		return 2;
    3958:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    395a:	428a      	cmp	r2, r1
    395c:	d1f2      	bne.n	3944 <check_fs+0x18>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    395e:	3367      	adds	r3, #103	; 0x67
    3960:	5ce3      	ldrb	r3, [r4, r3]
    3962:	061b      	lsls	r3, r3, #24
    3964:	2268      	movs	r2, #104	; 0x68
    3966:	5ca2      	ldrb	r2, [r4, r2]
    3968:	0412      	lsls	r2, r2, #16
    396a:	4313      	orrs	r3, r2
    396c:	2266      	movs	r2, #102	; 0x66
    396e:	5ca2      	ldrb	r2, [r4, r2]
    3970:	4313      	orrs	r3, r2
    3972:	2267      	movs	r2, #103	; 0x67
    3974:	5ca2      	ldrb	r2, [r4, r2]
    3976:	0212      	lsls	r2, r2, #8
    3978:	4313      	orrs	r3, r2
    397a:	021b      	lsls	r3, r3, #8
    397c:	0a1b      	lsrs	r3, r3, #8
    397e:	4a12      	ldr	r2, [pc, #72]	; (39c8 <check_fs+0x9c>)
    3980:	4293      	cmp	r3, r2
    3982:	d016      	beq.n	39b2 <check_fs+0x86>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    3984:	2385      	movs	r3, #133	; 0x85
    3986:	5ce3      	ldrb	r3, [r4, r3]
    3988:	061b      	lsls	r3, r3, #24
    398a:	2284      	movs	r2, #132	; 0x84
    398c:	5ca2      	ldrb	r2, [r4, r2]
    398e:	0412      	lsls	r2, r2, #16
    3990:	4313      	orrs	r3, r2
    3992:	2282      	movs	r2, #130	; 0x82
    3994:	5ca2      	ldrb	r2, [r4, r2]
    3996:	4313      	orrs	r3, r2
    3998:	2283      	movs	r2, #131	; 0x83
    399a:	5ca2      	ldrb	r2, [r4, r2]
    399c:	0212      	lsls	r2, r2, #8
    399e:	4313      	orrs	r3, r2
    39a0:	021b      	lsls	r3, r3, #8
    39a2:	0a1b      	lsrs	r3, r3, #8
    39a4:	4a09      	ldr	r2, [pc, #36]	; (39cc <check_fs+0xa0>)
    39a6:	4694      	mov	ip, r2
    39a8:	4463      	add	r3, ip
    39aa:	1e58      	subs	r0, r3, #1
    39ac:	4183      	sbcs	r3, r0
		return 3;
    39ae:	b2db      	uxtb	r3, r3
    39b0:	e7c8      	b.n	3944 <check_fs+0x18>
		return 0;
    39b2:	2300      	movs	r3, #0
    39b4:	e7c6      	b.n	3944 <check_fs+0x18>
    39b6:	46c0      	nop			; (mov r8, r8)
    39b8:	000036dd 	.word	0x000036dd
    39bc:	0000022f 	.word	0x0000022f
    39c0:	0000022e 	.word	0x0000022e
    39c4:	ffffaa55 	.word	0xffffaa55
    39c8:	00544146 	.word	0x00544146
    39cc:	ffabbeba 	.word	0xffabbeba

000039d0 <chk_mounted>:
{
    39d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    39d2:	46d6      	mov	lr, sl
    39d4:	464f      	mov	r7, r9
    39d6:	4646      	mov	r6, r8
    39d8:	b5c0      	push	{r6, r7, lr}
    39da:	0015      	movs	r5, r2
	const TCHAR *p = *path;
    39dc:	6803      	ldr	r3, [r0, #0]
	vol = p[0] - '0';					/* Is there a drive number? */
    39de:	781c      	ldrb	r4, [r3, #0]
    39e0:	3c30      	subs	r4, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    39e2:	2c09      	cmp	r4, #9
    39e4:	d80e      	bhi.n	3a04 <chk_mounted+0x34>
    39e6:	785a      	ldrb	r2, [r3, #1]
    39e8:	2a3a      	cmp	r2, #58	; 0x3a
    39ea:	d001      	beq.n	39f0 <chk_mounted+0x20>
    39ec:	2400      	movs	r4, #0
    39ee:	e00a      	b.n	3a06 <chk_mounted+0x36>
		p += 2; *path = p;				/* Return pointer to the path name */
    39f0:	3302      	adds	r3, #2
    39f2:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    39f4:	200b      	movs	r0, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    39f6:	2c07      	cmp	r4, #7
    39f8:	d905      	bls.n	3a06 <chk_mounted+0x36>
}
    39fa:	bc1c      	pop	{r2, r3, r4}
    39fc:	4690      	mov	r8, r2
    39fe:	4699      	mov	r9, r3
    3a00:	46a2      	mov	sl, r4
    3a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a04:	2400      	movs	r4, #0
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    3a06:	00a3      	lsls	r3, r4, #2
    3a08:	4ac5      	ldr	r2, [pc, #788]	; (3d20 <chk_mounted+0x350>)
    3a0a:	589e      	ldr	r6, [r3, r2]
    3a0c:	600e      	str	r6, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3a0e:	2e00      	cmp	r6, #0
    3a10:	d100      	bne.n	3a14 <chk_mounted+0x44>
    3a12:	e0e8      	b.n	3be6 <chk_mounted+0x216>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    3a14:	7833      	ldrb	r3, [r6, #0]
    3a16:	2b00      	cmp	r3, #0
    3a18:	d00d      	beq.n	3a36 <chk_mounted+0x66>
		stat = disk_status(fs->drv);
    3a1a:	7870      	ldrb	r0, [r6, #1]
    3a1c:	4bc1      	ldr	r3, [pc, #772]	; (3d24 <chk_mounted+0x354>)
    3a1e:	4798      	blx	r3
    3a20:	0003      	movs	r3, r0
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    3a22:	07c2      	lsls	r2, r0, #31
    3a24:	d407      	bmi.n	3a36 <chk_mounted+0x66>
			return FR_OK;				/* The file system object is valid */
    3a26:	2000      	movs	r0, #0
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    3a28:	2d00      	cmp	r5, #0
    3a2a:	d0e6      	beq.n	39fa <chk_mounted+0x2a>
    3a2c:	075b      	lsls	r3, r3, #29
    3a2e:	d400      	bmi.n	3a32 <chk_mounted+0x62>
    3a30:	e0db      	b.n	3bea <chk_mounted+0x21a>
				return FR_WRITE_PROTECTED;
    3a32:	300a      	adds	r0, #10
    3a34:	e7e1      	b.n	39fa <chk_mounted+0x2a>
	fs->fs_type = 0;					/* Clear the file system object */
    3a36:	2300      	movs	r3, #0
    3a38:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    3a3a:	b2e0      	uxtb	r0, r4
    3a3c:	7070      	strb	r0, [r6, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    3a3e:	4bba      	ldr	r3, [pc, #744]	; (3d28 <chk_mounted+0x358>)
    3a40:	4798      	blx	r3
    3a42:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    3a44:	2003      	movs	r0, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    3a46:	07da      	lsls	r2, r3, #31
    3a48:	d4d7      	bmi.n	39fa <chk_mounted+0x2a>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3a4a:	2d00      	cmp	r5, #0
    3a4c:	d002      	beq.n	3a54 <chk_mounted+0x84>
		return FR_WRITE_PROTECTED;
    3a4e:	3007      	adds	r0, #7
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    3a50:	075b      	lsls	r3, r3, #29
    3a52:	d4d2      	bmi.n	39fa <chk_mounted+0x2a>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    3a54:	2100      	movs	r1, #0
    3a56:	0030      	movs	r0, r6
    3a58:	4bb4      	ldr	r3, [pc, #720]	; (3d2c <chk_mounted+0x35c>)
    3a5a:	4798      	blx	r3
    3a5c:	0003      	movs	r3, r0
    3a5e:	2400      	movs	r4, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    3a60:	2801      	cmp	r0, #1
    3a62:	d100      	bne.n	3a66 <chk_mounted+0x96>
    3a64:	e09a      	b.n	3b9c <chk_mounted+0x1cc>
	if (fmt == 3) return FR_DISK_ERR;
    3a66:	2b03      	cmp	r3, #3
    3a68:	d100      	bne.n	3a6c <chk_mounted+0x9c>
    3a6a:	e0c0      	b.n	3bee <chk_mounted+0x21e>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    3a6c:	200d      	movs	r0, #13
    3a6e:	2b00      	cmp	r3, #0
    3a70:	d1c3      	bne.n	39fa <chk_mounted+0x2a>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    3a72:	333c      	adds	r3, #60	; 0x3c
    3a74:	5cf2      	ldrb	r2, [r6, r3]
    3a76:	0212      	lsls	r2, r2, #8
    3a78:	3b01      	subs	r3, #1
    3a7a:	5cf3      	ldrb	r3, [r6, r3]
    3a7c:	4313      	orrs	r3, r2
    3a7e:	2280      	movs	r2, #128	; 0x80
    3a80:	0092      	lsls	r2, r2, #2
    3a82:	b21b      	sxth	r3, r3
    3a84:	4293      	cmp	r3, r2
    3a86:	d1b8      	bne.n	39fa <chk_mounted+0x2a>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    3a88:	2347      	movs	r3, #71	; 0x47
    3a8a:	5cf3      	ldrb	r3, [r6, r3]
    3a8c:	021b      	lsls	r3, r3, #8
    3a8e:	3abb      	subs	r2, #187	; 0xbb
    3a90:	3aff      	subs	r2, #255	; 0xff
    3a92:	5cb5      	ldrb	r5, [r6, r2]
    3a94:	431d      	orrs	r5, r3
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    3a96:	d10d      	bne.n	3ab4 <chk_mounted+0xe4>
    3a98:	2357      	movs	r3, #87	; 0x57
    3a9a:	5cf5      	ldrb	r5, [r6, r3]
    3a9c:	062d      	lsls	r5, r5, #24
    3a9e:	3b01      	subs	r3, #1
    3aa0:	5cf3      	ldrb	r3, [r6, r3]
    3aa2:	041b      	lsls	r3, r3, #16
    3aa4:	431d      	orrs	r5, r3
    3aa6:	2354      	movs	r3, #84	; 0x54
    3aa8:	5cf3      	ldrb	r3, [r6, r3]
    3aaa:	431d      	orrs	r5, r3
    3aac:	2355      	movs	r3, #85	; 0x55
    3aae:	5cf3      	ldrb	r3, [r6, r3]
    3ab0:	021b      	lsls	r3, r3, #8
    3ab2:	431d      	orrs	r5, r3
	fs->fsize = fasize;
    3ab4:	61f5      	str	r5, [r6, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    3ab6:	2340      	movs	r3, #64	; 0x40
    3ab8:	5cf2      	ldrb	r2, [r6, r3]
    3aba:	70f2      	strb	r2, [r6, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    3abc:	1e53      	subs	r3, r2, #1
    3abe:	200d      	movs	r0, #13
    3ac0:	2b01      	cmp	r3, #1
    3ac2:	d89a      	bhi.n	39fa <chk_mounted+0x2a>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    3ac4:	233d      	movs	r3, #61	; 0x3d
    3ac6:	5cf1      	ldrb	r1, [r6, r3]
    3ac8:	70b1      	strb	r1, [r6, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    3aca:	2900      	cmp	r1, #0
    3acc:	d095      	beq.n	39fa <chk_mounted+0x2a>
    3ace:	1e4b      	subs	r3, r1, #1
    3ad0:	4219      	tst	r1, r3
    3ad2:	d192      	bne.n	39fa <chk_mounted+0x2a>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    3ad4:	2342      	movs	r3, #66	; 0x42
    3ad6:	5cf3      	ldrb	r3, [r6, r3]
    3ad8:	021b      	lsls	r3, r3, #8
    3ada:	3034      	adds	r0, #52	; 0x34
    3adc:	5c30      	ldrb	r0, [r6, r0]
    3ade:	4318      	orrs	r0, r3
    3ae0:	4680      	mov	r8, r0
    3ae2:	8130      	strh	r0, [r6, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    3ae4:	200d      	movs	r0, #13
    3ae6:	4643      	mov	r3, r8
    3ae8:	071b      	lsls	r3, r3, #28
    3aea:	d000      	beq.n	3aee <chk_mounted+0x11e>
    3aec:	e785      	b.n	39fa <chk_mounted+0x2a>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    3aee:	2344      	movs	r3, #68	; 0x44
    3af0:	5cf3      	ldrb	r3, [r6, r3]
    3af2:	021b      	lsls	r3, r3, #8
    3af4:	3036      	adds	r0, #54	; 0x36
    3af6:	5c30      	ldrb	r0, [r6, r0]
    3af8:	4303      	orrs	r3, r0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    3afa:	d10d      	bne.n	3b18 <chk_mounted+0x148>
    3afc:	3353      	adds	r3, #83	; 0x53
    3afe:	5cf3      	ldrb	r3, [r6, r3]
    3b00:	061b      	lsls	r3, r3, #24
    3b02:	2052      	movs	r0, #82	; 0x52
    3b04:	5c30      	ldrb	r0, [r6, r0]
    3b06:	0400      	lsls	r0, r0, #16
    3b08:	4303      	orrs	r3, r0
    3b0a:	2050      	movs	r0, #80	; 0x50
    3b0c:	5c30      	ldrb	r0, [r6, r0]
    3b0e:	4303      	orrs	r3, r0
    3b10:	2051      	movs	r0, #81	; 0x51
    3b12:	5c30      	ldrb	r0, [r6, r0]
    3b14:	0200      	lsls	r0, r0, #8
    3b16:	4303      	orrs	r3, r0
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    3b18:	203f      	movs	r0, #63	; 0x3f
    3b1a:	5c30      	ldrb	r0, [r6, r0]
    3b1c:	0200      	lsls	r0, r0, #8
    3b1e:	273e      	movs	r7, #62	; 0x3e
    3b20:	5df7      	ldrb	r7, [r6, r7]
    3b22:	4307      	orrs	r7, r0
    3b24:	46ba      	mov	sl, r7
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    3b26:	200d      	movs	r0, #13
    3b28:	2f00      	cmp	r7, #0
    3b2a:	d100      	bne.n	3b2e <chk_mounted+0x15e>
    3b2c:	e765      	b.n	39fa <chk_mounted+0x2a>
	fasize *= b;										/* Number of sectors for FAT area */
    3b2e:	436a      	muls	r2, r5
    3b30:	4691      	mov	r9, r2
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    3b32:	4642      	mov	r2, r8
    3b34:	0917      	lsrs	r7, r2, #4
    3b36:	4457      	add	r7, sl
    3b38:	444f      	add	r7, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    3b3a:	42bb      	cmp	r3, r7
    3b3c:	d200      	bcs.n	3b40 <chk_mounted+0x170>
    3b3e:	e75c      	b.n	39fa <chk_mounted+0x2a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    3b40:	1bd8      	subs	r0, r3, r7
    3b42:	4b7b      	ldr	r3, [pc, #492]	; (3d30 <chk_mounted+0x360>)
    3b44:	4798      	blx	r3
    3b46:	0003      	movs	r3, r0
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    3b48:	200d      	movs	r0, #13
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	d100      	bne.n	3b50 <chk_mounted+0x180>
    3b4e:	e754      	b.n	39fa <chk_mounted+0x2a>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    3b50:	4a78      	ldr	r2, [pc, #480]	; (3d34 <chk_mounted+0x364>)
	fmt = FS_FAT12;
    3b52:	429a      	cmp	r2, r3
    3b54:	4192      	sbcs	r2, r2
    3b56:	4252      	negs	r2, r2
    3b58:	3201      	adds	r2, #1
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    3b5a:	4977      	ldr	r1, [pc, #476]	; (3d38 <chk_mounted+0x368>)
    3b5c:	428b      	cmp	r3, r1
    3b5e:	d848      	bhi.n	3bf2 <chk_mounted+0x222>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3b60:	3302      	adds	r3, #2
    3b62:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3b64:	19e7      	adds	r7, r4, r7
    3b66:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3b68:	4454      	add	r4, sl
    3b6a:	6234      	str	r4, [r6, #32]
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    3b6c:	200d      	movs	r0, #13
    3b6e:	4641      	mov	r1, r8
    3b70:	2900      	cmp	r1, #0
    3b72:	d100      	bne.n	3b76 <chk_mounted+0x1a6>
    3b74:	e741      	b.n	39fa <chk_mounted+0x2a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    3b76:	444c      	add	r4, r9
    3b78:	6274      	str	r4, [r6, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3b7a:	2a02      	cmp	r2, #2
    3b7c:	d12c      	bne.n	3bd8 <chk_mounted+0x208>
    3b7e:	005b      	lsls	r3, r3, #1
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3b80:	496e      	ldr	r1, [pc, #440]	; (3d3c <chk_mounted+0x36c>)
    3b82:	468c      	mov	ip, r1
    3b84:	4463      	add	r3, ip
    3b86:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3b88:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3b8a:	429d      	cmp	r5, r3
    3b8c:	d200      	bcs.n	3b90 <chk_mounted+0x1c0>
    3b8e:	e734      	b.n	39fa <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3b90:	2301      	movs	r3, #1
    3b92:	425b      	negs	r3, r3
    3b94:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    3b96:	2300      	movs	r3, #0
    3b98:	60f3      	str	r3, [r6, #12]
    3b9a:	e0b6      	b.n	3d0a <chk_mounted+0x33a>
		if (tbl[4]) {						/* Is the partition existing? */
    3b9c:	33f2      	adds	r3, #242	; 0xf2
    3b9e:	33ff      	adds	r3, #255	; 0xff
    3ba0:	5cf3      	ldrb	r3, [r6, r3]
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    3ba2:	200d      	movs	r0, #13
		if (tbl[4]) {						/* Is the partition existing? */
    3ba4:	2b00      	cmp	r3, #0
    3ba6:	d100      	bne.n	3baa <chk_mounted+0x1da>
    3ba8:	e727      	b.n	39fa <chk_mounted+0x2a>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    3baa:	23fa      	movs	r3, #250	; 0xfa
    3bac:	33ff      	adds	r3, #255	; 0xff
    3bae:	5cf4      	ldrb	r4, [r6, r3]
    3bb0:	0624      	lsls	r4, r4, #24
    3bb2:	3b01      	subs	r3, #1
    3bb4:	5cf3      	ldrb	r3, [r6, r3]
    3bb6:	041b      	lsls	r3, r3, #16
    3bb8:	431c      	orrs	r4, r3
    3bba:	23fb      	movs	r3, #251	; 0xfb
    3bbc:	005b      	lsls	r3, r3, #1
    3bbe:	5cf3      	ldrb	r3, [r6, r3]
    3bc0:	431c      	orrs	r4, r3
    3bc2:	23f8      	movs	r3, #248	; 0xf8
    3bc4:	33ff      	adds	r3, #255	; 0xff
    3bc6:	5cf2      	ldrb	r2, [r6, r3]
    3bc8:	0212      	lsls	r2, r2, #8
    3bca:	4314      	orrs	r4, r2
			fmt = check_fs(fs, bsect);		/* Check the partition */
    3bcc:	0021      	movs	r1, r4
    3bce:	0030      	movs	r0, r6
    3bd0:	4b56      	ldr	r3, [pc, #344]	; (3d2c <chk_mounted+0x35c>)
    3bd2:	4798      	blx	r3
    3bd4:	0003      	movs	r3, r0
    3bd6:	e746      	b.n	3a66 <chk_mounted+0x96>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3bd8:	2103      	movs	r1, #3
    3bda:	4359      	muls	r1, r3
    3bdc:	0849      	lsrs	r1, r1, #1
    3bde:	2001      	movs	r0, #1
    3be0:	4003      	ands	r3, r0
    3be2:	18cb      	adds	r3, r1, r3
    3be4:	e7cc      	b.n	3b80 <chk_mounted+0x1b0>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    3be6:	200c      	movs	r0, #12
    3be8:	e707      	b.n	39fa <chk_mounted+0x2a>
			return FR_OK;				/* The file system object is valid */
    3bea:	2000      	movs	r0, #0
    3bec:	e705      	b.n	39fa <chk_mounted+0x2a>
	if (fmt == 3) return FR_DISK_ERR;
    3bee:	2001      	movs	r0, #1
    3bf0:	e703      	b.n	39fa <chk_mounted+0x2a>
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    3bf2:	3302      	adds	r3, #2
    3bf4:	61b3      	str	r3, [r6, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    3bf6:	19e7      	adds	r7, r4, r7
    3bf8:	62b7      	str	r7, [r6, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    3bfa:	4652      	mov	r2, sl
    3bfc:	18a2      	adds	r2, r4, r2
    3bfe:	6232      	str	r2, [r6, #32]
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    3c00:	200d      	movs	r0, #13
    3c02:	4642      	mov	r2, r8
    3c04:	2a00      	cmp	r2, #0
    3c06:	d000      	beq.n	3c0a <chk_mounted+0x23a>
    3c08:	e6f7      	b.n	39fa <chk_mounted+0x2a>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    3c0a:	225f      	movs	r2, #95	; 0x5f
    3c0c:	5cb2      	ldrb	r2, [r6, r2]
    3c0e:	0612      	lsls	r2, r2, #24
    3c10:	215e      	movs	r1, #94	; 0x5e
    3c12:	5c71      	ldrb	r1, [r6, r1]
    3c14:	0409      	lsls	r1, r1, #16
    3c16:	430a      	orrs	r2, r1
    3c18:	215c      	movs	r1, #92	; 0x5c
    3c1a:	5c71      	ldrb	r1, [r6, r1]
    3c1c:	430a      	orrs	r2, r1
    3c1e:	215d      	movs	r1, #93	; 0x5d
    3c20:	5c71      	ldrb	r1, [r6, r1]
    3c22:	0209      	lsls	r1, r1, #8
    3c24:	430a      	orrs	r2, r1
    3c26:	6272      	str	r2, [r6, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    3c28:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3c2a:	4a44      	ldr	r2, [pc, #272]	; (3d3c <chk_mounted+0x36c>)
    3c2c:	4694      	mov	ip, r2
    3c2e:	4463      	add	r3, ip
    3c30:	0a5b      	lsrs	r3, r3, #9
		return FR_NO_FILESYSTEM;
    3c32:	200d      	movs	r0, #13
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    3c34:	429d      	cmp	r5, r3
    3c36:	d200      	bcs.n	3c3a <chk_mounted+0x26a>
    3c38:	e6df      	b.n	39fa <chk_mounted+0x2a>
	fs->free_clust = 0xFFFFFFFF;
    3c3a:	2301      	movs	r3, #1
    3c3c:	425b      	negs	r3, r3
    3c3e:	6133      	str	r3, [r6, #16]
	fs->last_clust = 0;
    3c40:	2300      	movs	r3, #0
    3c42:	60f3      	str	r3, [r6, #12]
	 	fs->fsi_flag = 0;
    3c44:	7173      	strb	r3, [r6, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    3c46:	3361      	adds	r3, #97	; 0x61
    3c48:	5cf3      	ldrb	r3, [r6, r3]
    3c4a:	021b      	lsls	r3, r3, #8
    3c4c:	2260      	movs	r2, #96	; 0x60
    3c4e:	5cb2      	ldrb	r2, [r6, r2]
    3c50:	431a      	orrs	r2, r3
    3c52:	1912      	adds	r2, r2, r4
    3c54:	6172      	str	r2, [r6, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3c56:	0031      	movs	r1, r6
    3c58:	3130      	adds	r1, #48	; 0x30
    3c5a:	7870      	ldrb	r0, [r6, #1]
    3c5c:	2301      	movs	r3, #1
    3c5e:	4c38      	ldr	r4, [pc, #224]	; (3d40 <chk_mounted+0x370>)
    3c60:	47a0      	blx	r4
    3c62:	2203      	movs	r2, #3
    3c64:	2800      	cmp	r0, #0
    3c66:	d150      	bne.n	3d0a <chk_mounted+0x33a>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3c68:	4b36      	ldr	r3, [pc, #216]	; (3d44 <chk_mounted+0x374>)
    3c6a:	5cf2      	ldrb	r2, [r6, r3]
    3c6c:	0212      	lsls	r2, r2, #8
    3c6e:	4b36      	ldr	r3, [pc, #216]	; (3d48 <chk_mounted+0x378>)
    3c70:	5cf3      	ldrb	r3, [r6, r3]
    3c72:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    3c74:	4935      	ldr	r1, [pc, #212]	; (3d4c <chk_mounted+0x37c>)
    3c76:	b21b      	sxth	r3, r3
    3c78:	2203      	movs	r2, #3
    3c7a:	428b      	cmp	r3, r1
    3c7c:	d145      	bne.n	3d0a <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3c7e:	2333      	movs	r3, #51	; 0x33
    3c80:	5cf3      	ldrb	r3, [r6, r3]
    3c82:	061b      	lsls	r3, r3, #24
    3c84:	322f      	adds	r2, #47	; 0x2f
    3c86:	5cb2      	ldrb	r2, [r6, r2]
    3c88:	0412      	lsls	r2, r2, #16
    3c8a:	4313      	orrs	r3, r2
    3c8c:	2230      	movs	r2, #48	; 0x30
    3c8e:	5cb2      	ldrb	r2, [r6, r2]
    3c90:	4313      	orrs	r3, r2
    3c92:	2231      	movs	r2, #49	; 0x31
    3c94:	5cb2      	ldrb	r2, [r6, r2]
    3c96:	0212      	lsls	r2, r2, #8
    3c98:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    3c9a:	492d      	ldr	r1, [pc, #180]	; (3d50 <chk_mounted+0x380>)
    3c9c:	2203      	movs	r2, #3
    3c9e:	428b      	cmp	r3, r1
    3ca0:	d133      	bne.n	3d0a <chk_mounted+0x33a>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    3ca2:	4b2c      	ldr	r3, [pc, #176]	; (3d54 <chk_mounted+0x384>)
    3ca4:	5cf3      	ldrb	r3, [r6, r3]
    3ca6:	061b      	lsls	r3, r3, #24
    3ca8:	4a2b      	ldr	r2, [pc, #172]	; (3d58 <chk_mounted+0x388>)
    3caa:	5cb2      	ldrb	r2, [r6, r2]
    3cac:	0412      	lsls	r2, r2, #16
    3cae:	4313      	orrs	r3, r2
    3cb0:	2285      	movs	r2, #133	; 0x85
    3cb2:	0092      	lsls	r2, r2, #2
    3cb4:	5cb2      	ldrb	r2, [r6, r2]
    3cb6:	4313      	orrs	r3, r2
    3cb8:	4a28      	ldr	r2, [pc, #160]	; (3d5c <chk_mounted+0x38c>)
    3cba:	5cb2      	ldrb	r2, [r6, r2]
    3cbc:	0212      	lsls	r2, r2, #8
    3cbe:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    3cc0:	4927      	ldr	r1, [pc, #156]	; (3d60 <chk_mounted+0x390>)
    3cc2:	2203      	movs	r2, #3
    3cc4:	428b      	cmp	r3, r1
    3cc6:	d120      	bne.n	3d0a <chk_mounted+0x33a>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    3cc8:	4b26      	ldr	r3, [pc, #152]	; (3d64 <chk_mounted+0x394>)
    3cca:	5cf3      	ldrb	r3, [r6, r3]
    3ccc:	061b      	lsls	r3, r3, #24
    3cce:	4a26      	ldr	r2, [pc, #152]	; (3d68 <chk_mounted+0x398>)
    3cd0:	5cb2      	ldrb	r2, [r6, r2]
    3cd2:	0412      	lsls	r2, r2, #16
    3cd4:	4313      	orrs	r3, r2
    3cd6:	2287      	movs	r2, #135	; 0x87
    3cd8:	0092      	lsls	r2, r2, #2
    3cda:	5cb2      	ldrb	r2, [r6, r2]
    3cdc:	4313      	orrs	r3, r2
    3cde:	4a23      	ldr	r2, [pc, #140]	; (3d6c <chk_mounted+0x39c>)
    3ce0:	5cb2      	ldrb	r2, [r6, r2]
    3ce2:	0212      	lsls	r2, r2, #8
    3ce4:	4313      	orrs	r3, r2
    3ce6:	60f3      	str	r3, [r6, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    3ce8:	4b21      	ldr	r3, [pc, #132]	; (3d70 <chk_mounted+0x3a0>)
    3cea:	5cf3      	ldrb	r3, [r6, r3]
    3cec:	061b      	lsls	r3, r3, #24
    3cee:	4a21      	ldr	r2, [pc, #132]	; (3d74 <chk_mounted+0x3a4>)
    3cf0:	5cb2      	ldrb	r2, [r6, r2]
    3cf2:	0412      	lsls	r2, r2, #16
    3cf4:	4313      	orrs	r3, r2
    3cf6:	2286      	movs	r2, #134	; 0x86
    3cf8:	0092      	lsls	r2, r2, #2
    3cfa:	5cb2      	ldrb	r2, [r6, r2]
    3cfc:	4313      	orrs	r3, r2
    3cfe:	4a1e      	ldr	r2, [pc, #120]	; (3d78 <chk_mounted+0x3a8>)
    3d00:	5cb2      	ldrb	r2, [r6, r2]
    3d02:	0212      	lsls	r2, r2, #8
    3d04:	4313      	orrs	r3, r2
    3d06:	6133      	str	r3, [r6, #16]
    3d08:	2203      	movs	r2, #3
	fs->fs_type = fmt;		/* FAT sub-type */
    3d0a:	7032      	strb	r2, [r6, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    3d0c:	4a1b      	ldr	r2, [pc, #108]	; (3d7c <chk_mounted+0x3ac>)
    3d0e:	8813      	ldrh	r3, [r2, #0]
    3d10:	3301      	adds	r3, #1
    3d12:	b29b      	uxth	r3, r3
    3d14:	8013      	strh	r3, [r2, #0]
    3d16:	80f3      	strh	r3, [r6, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    3d18:	2000      	movs	r0, #0
    3d1a:	62f0      	str	r0, [r6, #44]	; 0x2c
	fs->wflag = 0;
    3d1c:	7130      	strb	r0, [r6, #4]
	return FR_OK;
    3d1e:	e66c      	b.n	39fa <chk_mounted+0x2a>
    3d20:	200002ec 	.word	0x200002ec
    3d24:	000036c1 	.word	0x000036c1
    3d28:	00003625 	.word	0x00003625
    3d2c:	0000392d 	.word	0x0000392d
    3d30:	00005be5 	.word	0x00005be5
    3d34:	00000ff5 	.word	0x00000ff5
    3d38:	0000fff5 	.word	0x0000fff5
    3d3c:	000001ff 	.word	0x000001ff
    3d40:	000036dd 	.word	0x000036dd
    3d44:	0000022f 	.word	0x0000022f
    3d48:	0000022e 	.word	0x0000022e
    3d4c:	ffffaa55 	.word	0xffffaa55
    3d50:	41615252 	.word	0x41615252
    3d54:	00000217 	.word	0x00000217
    3d58:	00000216 	.word	0x00000216
    3d5c:	00000215 	.word	0x00000215
    3d60:	61417272 	.word	0x61417272
    3d64:	0000021f 	.word	0x0000021f
    3d68:	0000021e 	.word	0x0000021e
    3d6c:	0000021d 	.word	0x0000021d
    3d70:	0000021b 	.word	0x0000021b
    3d74:	0000021a 	.word	0x0000021a
    3d78:	00000219 	.word	0x00000219
    3d7c:	2000030c 	.word	0x2000030c

00003d80 <move_window>:
{
    3d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d82:	46ce      	mov	lr, r9
    3d84:	b500      	push	{lr}
    3d86:	b082      	sub	sp, #8
    3d88:	0004      	movs	r4, r0
    3d8a:	000f      	movs	r7, r1
	wsect = fs->winsect;
    3d8c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
	if (wsect != sector) {	/* Changed current window */
    3d8e:	428d      	cmp	r5, r1
    3d90:	d03f      	beq.n	3e12 <move_window+0x92>
		if (fs->wflag) {	/* Write back dirty window if needed */
    3d92:	7903      	ldrb	r3, [r0, #4]
    3d94:	2b00      	cmp	r3, #0
    3d96:	d107      	bne.n	3da8 <move_window+0x28>
	return FR_OK;
    3d98:	2300      	movs	r3, #0
		if (sector) {
    3d9a:	2f00      	cmp	r7, #0
    3d9c:	d12c      	bne.n	3df8 <move_window+0x78>
}
    3d9e:	0018      	movs	r0, r3
    3da0:	b002      	add	sp, #8
    3da2:	bc04      	pop	{r2}
    3da4:	4691      	mov	r9, r2
    3da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3da8:	2330      	movs	r3, #48	; 0x30
    3daa:	469c      	mov	ip, r3
    3dac:	4484      	add	ip, r0
    3dae:	4663      	mov	r3, ip
    3db0:	4661      	mov	r1, ip
    3db2:	9301      	str	r3, [sp, #4]
    3db4:	7840      	ldrb	r0, [r0, #1]
    3db6:	2301      	movs	r3, #1
    3db8:	002a      	movs	r2, r5
    3dba:	4e17      	ldr	r6, [pc, #92]	; (3e18 <move_window+0x98>)
    3dbc:	47b0      	blx	r6
				return FR_DISK_ERR;
    3dbe:	2301      	movs	r3, #1
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    3dc0:	2800      	cmp	r0, #0
    3dc2:	d1ec      	bne.n	3d9e <move_window+0x1e>
			fs->wflag = 0;
    3dc4:	2300      	movs	r3, #0
    3dc6:	7123      	strb	r3, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    3dc8:	6a23      	ldr	r3, [r4, #32]
    3dca:	69e2      	ldr	r2, [r4, #28]
    3dcc:	4694      	mov	ip, r2
    3dce:	4463      	add	r3, ip
    3dd0:	429d      	cmp	r5, r3
    3dd2:	d2e1      	bcs.n	3d98 <move_window+0x18>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3dd4:	78e6      	ldrb	r6, [r4, #3]
    3dd6:	2e01      	cmp	r6, #1
    3dd8:	d9de      	bls.n	3d98 <move_window+0x18>
					disk_write(fs->drv, fs->win, wsect, 1);
    3dda:	4b0f      	ldr	r3, [pc, #60]	; (3e18 <move_window+0x98>)
    3ddc:	4699      	mov	r9, r3
					wsect += fs->fsize;
    3dde:	69e3      	ldr	r3, [r4, #28]
    3de0:	469c      	mov	ip, r3
    3de2:	4465      	add	r5, ip
					disk_write(fs->drv, fs->win, wsect, 1);
    3de4:	7860      	ldrb	r0, [r4, #1]
    3de6:	2301      	movs	r3, #1
    3de8:	002a      	movs	r2, r5
    3dea:	9901      	ldr	r1, [sp, #4]
    3dec:	47c8      	blx	r9
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    3dee:	3e01      	subs	r6, #1
    3df0:	b2f6      	uxtb	r6, r6
    3df2:	2e01      	cmp	r6, #1
    3df4:	d1f3      	bne.n	3dde <move_window+0x5e>
    3df6:	e7cf      	b.n	3d98 <move_window+0x18>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3df8:	0021      	movs	r1, r4
    3dfa:	3130      	adds	r1, #48	; 0x30
    3dfc:	7860      	ldrb	r0, [r4, #1]
    3dfe:	3301      	adds	r3, #1
    3e00:	003a      	movs	r2, r7
    3e02:	4d06      	ldr	r5, [pc, #24]	; (3e1c <move_window+0x9c>)
    3e04:	47a8      	blx	r5
				return FR_DISK_ERR;
    3e06:	2301      	movs	r3, #1
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    3e08:	2800      	cmp	r0, #0
    3e0a:	d1c8      	bne.n	3d9e <move_window+0x1e>
			fs->winsect = sector;
    3e0c:	62e7      	str	r7, [r4, #44]	; 0x2c
	return FR_OK;
    3e0e:	2300      	movs	r3, #0
    3e10:	e7c5      	b.n	3d9e <move_window+0x1e>
    3e12:	2300      	movs	r3, #0
    3e14:	e7c3      	b.n	3d9e <move_window+0x1e>
    3e16:	46c0      	nop			; (mov r8, r8)
    3e18:	00003761 	.word	0x00003761
    3e1c:	000036dd 	.word	0x000036dd

00003e20 <get_fat>:
{
    3e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e22:	0005      	movs	r5, r0
    3e24:	000c      	movs	r4, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    3e26:	2901      	cmp	r1, #1
    3e28:	d974      	bls.n	3f14 <get_fat+0xf4>
		return 1;
    3e2a:	2001      	movs	r0, #1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    3e2c:	69ab      	ldr	r3, [r5, #24]
    3e2e:	4299      	cmp	r1, r3
    3e30:	d271      	bcs.n	3f16 <get_fat+0xf6>
	switch (fs->fs_type) {
    3e32:	782b      	ldrb	r3, [r5, #0]
    3e34:	2b02      	cmp	r3, #2
    3e36:	d034      	beq.n	3ea2 <get_fat+0x82>
    3e38:	2b03      	cmp	r3, #3
    3e3a:	d049      	beq.n	3ed0 <get_fat+0xb0>
    3e3c:	2b01      	cmp	r3, #1
    3e3e:	d002      	beq.n	3e46 <get_fat+0x26>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3e40:	2001      	movs	r0, #1
    3e42:	4240      	negs	r0, r0
    3e44:	e067      	b.n	3f16 <get_fat+0xf6>
		bc = (UINT)clst; bc += bc / 2;
    3e46:	084e      	lsrs	r6, r1, #1
    3e48:	1876      	adds	r6, r6, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    3e4a:	0a71      	lsrs	r1, r6, #9
    3e4c:	6a2b      	ldr	r3, [r5, #32]
    3e4e:	469c      	mov	ip, r3
    3e50:	4461      	add	r1, ip
    3e52:	0028      	movs	r0, r5
    3e54:	4b30      	ldr	r3, [pc, #192]	; (3f18 <get_fat+0xf8>)
    3e56:	4798      	blx	r3
    3e58:	2800      	cmp	r0, #0
    3e5a:	d002      	beq.n	3e62 <get_fat+0x42>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3e5c:	2001      	movs	r0, #1
    3e5e:	4240      	negs	r0, r0
    3e60:	e059      	b.n	3f16 <get_fat+0xf6>
		wc = fs->win[bc % SS(fs)]; bc++;
    3e62:	05f3      	lsls	r3, r6, #23
    3e64:	0ddb      	lsrs	r3, r3, #23
    3e66:	18eb      	adds	r3, r5, r3
    3e68:	3330      	adds	r3, #48	; 0x30
    3e6a:	781f      	ldrb	r7, [r3, #0]
    3e6c:	3601      	adds	r6, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    3e6e:	0a71      	lsrs	r1, r6, #9
    3e70:	6a2b      	ldr	r3, [r5, #32]
    3e72:	469c      	mov	ip, r3
    3e74:	4461      	add	r1, ip
    3e76:	0028      	movs	r0, r5
    3e78:	4b27      	ldr	r3, [pc, #156]	; (3f18 <get_fat+0xf8>)
    3e7a:	4798      	blx	r3
    3e7c:	2800      	cmp	r0, #0
    3e7e:	d002      	beq.n	3e86 <get_fat+0x66>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3e80:	2001      	movs	r0, #1
    3e82:	4240      	negs	r0, r0
    3e84:	e047      	b.n	3f16 <get_fat+0xf6>
		wc |= fs->win[bc % SS(fs)] << 8;
    3e86:	05f6      	lsls	r6, r6, #23
    3e88:	0df6      	lsrs	r6, r6, #23
    3e8a:	19ad      	adds	r5, r5, r6
    3e8c:	3530      	adds	r5, #48	; 0x30
    3e8e:	7828      	ldrb	r0, [r5, #0]
    3e90:	0200      	lsls	r0, r0, #8
    3e92:	4338      	orrs	r0, r7
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    3e94:	07e3      	lsls	r3, r4, #31
    3e96:	d501      	bpl.n	3e9c <get_fat+0x7c>
    3e98:	0900      	lsrs	r0, r0, #4
    3e9a:	e03c      	b.n	3f16 <get_fat+0xf6>
    3e9c:	0500      	lsls	r0, r0, #20
    3e9e:	0d00      	lsrs	r0, r0, #20
    3ea0:	e039      	b.n	3f16 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    3ea2:	0a09      	lsrs	r1, r1, #8
    3ea4:	6a2b      	ldr	r3, [r5, #32]
    3ea6:	469c      	mov	ip, r3
    3ea8:	4461      	add	r1, ip
    3eaa:	0028      	movs	r0, r5
    3eac:	4b1a      	ldr	r3, [pc, #104]	; (3f18 <get_fat+0xf8>)
    3eae:	4798      	blx	r3
    3eb0:	2800      	cmp	r0, #0
    3eb2:	d002      	beq.n	3eba <get_fat+0x9a>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3eb4:	2001      	movs	r0, #1
    3eb6:	4240      	negs	r0, r0
    3eb8:	e02d      	b.n	3f16 <get_fat+0xf6>
		p = &fs->win[clst * 2 % SS(fs)];
    3eba:	0064      	lsls	r4, r4, #1
    3ebc:	23ff      	movs	r3, #255	; 0xff
    3ebe:	005b      	lsls	r3, r3, #1
    3ec0:	401c      	ands	r4, r3
		return LD_WORD(p);
    3ec2:	192d      	adds	r5, r5, r4
    3ec4:	3530      	adds	r5, #48	; 0x30
    3ec6:	786b      	ldrb	r3, [r5, #1]
    3ec8:	021b      	lsls	r3, r3, #8
    3eca:	7828      	ldrb	r0, [r5, #0]
    3ecc:	4318      	orrs	r0, r3
    3ece:	e022      	b.n	3f16 <get_fat+0xf6>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    3ed0:	09c9      	lsrs	r1, r1, #7
    3ed2:	6a2b      	ldr	r3, [r5, #32]
    3ed4:	469c      	mov	ip, r3
    3ed6:	4461      	add	r1, ip
    3ed8:	0028      	movs	r0, r5
    3eda:	4b0f      	ldr	r3, [pc, #60]	; (3f18 <get_fat+0xf8>)
    3edc:	4798      	blx	r3
    3ede:	2800      	cmp	r0, #0
    3ee0:	d002      	beq.n	3ee8 <get_fat+0xc8>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    3ee2:	2001      	movs	r0, #1
    3ee4:	4240      	negs	r0, r0
    3ee6:	e016      	b.n	3f16 <get_fat+0xf6>
		p = &fs->win[clst * 4 % SS(fs)];
    3ee8:	00a4      	lsls	r4, r4, #2
    3eea:	23fe      	movs	r3, #254	; 0xfe
    3eec:	005b      	lsls	r3, r3, #1
    3eee:	401c      	ands	r4, r3
    3ef0:	0023      	movs	r3, r4
    3ef2:	3330      	adds	r3, #48	; 0x30
    3ef4:	18eb      	adds	r3, r5, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    3ef6:	78d8      	ldrb	r0, [r3, #3]
    3ef8:	0600      	lsls	r0, r0, #24
    3efa:	789a      	ldrb	r2, [r3, #2]
    3efc:	0412      	lsls	r2, r2, #16
    3efe:	4310      	orrs	r0, r2
    3f00:	192c      	adds	r4, r5, r4
    3f02:	3430      	adds	r4, #48	; 0x30
    3f04:	7822      	ldrb	r2, [r4, #0]
    3f06:	4310      	orrs	r0, r2
    3f08:	785b      	ldrb	r3, [r3, #1]
    3f0a:	021b      	lsls	r3, r3, #8
    3f0c:	4318      	orrs	r0, r3
    3f0e:	0100      	lsls	r0, r0, #4
    3f10:	0900      	lsrs	r0, r0, #4
    3f12:	e000      	b.n	3f16 <get_fat+0xf6>
		return 1;
    3f14:	2001      	movs	r0, #1
}
    3f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f18:	00003d81 	.word	0x00003d81

00003f1c <dir_sdi>:
{
    3f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f1e:	0004      	movs	r4, r0
    3f20:	000d      	movs	r5, r1
	dj->index = idx;
    3f22:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
    3f24:	6881      	ldr	r1, [r0, #8]
		return FR_INT_ERR;
    3f26:	2002      	movs	r0, #2
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    3f28:	2901      	cmp	r1, #1
    3f2a:	d003      	beq.n	3f34 <dir_sdi+0x18>
    3f2c:	6823      	ldr	r3, [r4, #0]
    3f2e:	699a      	ldr	r2, [r3, #24]
    3f30:	4291      	cmp	r1, r2
    3f32:	d300      	bcc.n	3f36 <dir_sdi+0x1a>
}
    3f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    3f36:	2900      	cmp	r1, #0
    3f38:	d119      	bne.n	3f6e <dir_sdi+0x52>
    3f3a:	781a      	ldrb	r2, [r3, #0]
    3f3c:	2a03      	cmp	r2, #3
    3f3e:	d013      	beq.n	3f68 <dir_sdi+0x4c>
		dj->clust = clst;
    3f40:	2200      	movs	r2, #0
    3f42:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    3f44:	891a      	ldrh	r2, [r3, #8]
			return FR_INT_ERR;
    3f46:	2002      	movs	r0, #2
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    3f48:	42aa      	cmp	r2, r5
    3f4a:	d9f3      	bls.n	3f34 <dir_sdi+0x18>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    3f4c:	092a      	lsrs	r2, r5, #4
    3f4e:	b292      	uxth	r2, r2
    3f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3f52:	189b      	adds	r3, r3, r2
    3f54:	6123      	str	r3, [r4, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    3f56:	6823      	ldr	r3, [r4, #0]
    3f58:	3330      	adds	r3, #48	; 0x30
    3f5a:	220f      	movs	r2, #15
    3f5c:	4015      	ands	r5, r2
    3f5e:	016d      	lsls	r5, r5, #5
    3f60:	195d      	adds	r5, r3, r5
    3f62:	6165      	str	r5, [r4, #20]
	return FR_OK;	/* Seek succeeded */
    3f64:	2000      	movs	r0, #0
    3f66:	e7e5      	b.n	3f34 <dir_sdi+0x18>
		clst = dj->fs->dirbase;
    3f68:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    3f6a:	2900      	cmp	r1, #0
    3f6c:	d0e8      	beq.n	3f40 <dir_sdi+0x24>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    3f6e:	789e      	ldrb	r6, [r3, #2]
    3f70:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    3f72:	42b5      	cmp	r5, r6
    3f74:	d313      	bcc.n	3f9e <dir_sdi+0x82>
    3f76:	1bad      	subs	r5, r5, r6
    3f78:	b2ad      	uxth	r5, r5
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    3f7a:	4f10      	ldr	r7, [pc, #64]	; (3fbc <dir_sdi+0xa0>)
    3f7c:	e000      	b.n	3f80 <dir_sdi+0x64>
    3f7e:	001d      	movs	r5, r3
    3f80:	6820      	ldr	r0, [r4, #0]
    3f82:	47b8      	blx	r7
    3f84:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    3f86:	1c43      	adds	r3, r0, #1
    3f88:	d012      	beq.n	3fb0 <dir_sdi+0x94>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    3f8a:	2801      	cmp	r0, #1
    3f8c:	d912      	bls.n	3fb4 <dir_sdi+0x98>
    3f8e:	6823      	ldr	r3, [r4, #0]
    3f90:	699b      	ldr	r3, [r3, #24]
    3f92:	4298      	cmp	r0, r3
    3f94:	d210      	bcs.n	3fb8 <dir_sdi+0x9c>
    3f96:	1bab      	subs	r3, r5, r6
    3f98:	b29b      	uxth	r3, r3
		while (idx >= ic) {	/* Follow cluster chain */
    3f9a:	42b5      	cmp	r5, r6
    3f9c:	d2ef      	bcs.n	3f7e <dir_sdi+0x62>
		dj->clust = clst;
    3f9e:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    3fa0:	6820      	ldr	r0, [r4, #0]
    3fa2:	4b07      	ldr	r3, [pc, #28]	; (3fc0 <dir_sdi+0xa4>)
    3fa4:	4798      	blx	r3
    3fa6:	092b      	lsrs	r3, r5, #4
    3fa8:	b29b      	uxth	r3, r3
    3faa:	1818      	adds	r0, r3, r0
    3fac:	6120      	str	r0, [r4, #16]
    3fae:	e7d2      	b.n	3f56 <dir_sdi+0x3a>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    3fb0:	2001      	movs	r0, #1
    3fb2:	e7bf      	b.n	3f34 <dir_sdi+0x18>
				return FR_INT_ERR;
    3fb4:	2002      	movs	r0, #2
    3fb6:	e7bd      	b.n	3f34 <dir_sdi+0x18>
    3fb8:	2002      	movs	r0, #2
    3fba:	e7bb      	b.n	3f34 <dir_sdi+0x18>
    3fbc:	00003e21 	.word	0x00003e21
    3fc0:	000038c7 	.word	0x000038c7

00003fc4 <put_fat>:
{
    3fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fc6:	46c6      	mov	lr, r8
    3fc8:	b500      	push	{lr}
    3fca:	0007      	movs	r7, r0
    3fcc:	000c      	movs	r4, r1
    3fce:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    3fd0:	2502      	movs	r5, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    3fd2:	2901      	cmp	r1, #1
    3fd4:	d902      	bls.n	3fdc <put_fat+0x18>
    3fd6:	6983      	ldr	r3, [r0, #24]
    3fd8:	4299      	cmp	r1, r3
    3fda:	d303      	bcc.n	3fe4 <put_fat+0x20>
}
    3fdc:	0028      	movs	r0, r5
    3fde:	bc04      	pop	{r2}
    3fe0:	4690      	mov	r8, r2
    3fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (fs->fs_type) {
    3fe4:	7803      	ldrb	r3, [r0, #0]
    3fe6:	2b02      	cmp	r3, #2
    3fe8:	d053      	beq.n	4092 <put_fat+0xce>
    3fea:	2b03      	cmp	r3, #3
    3fec:	d063      	beq.n	40b6 <put_fat+0xf2>
			res = FR_INT_ERR;
    3fee:	2502      	movs	r5, #2
		switch (fs->fs_type) {
    3ff0:	2b01      	cmp	r3, #1
    3ff2:	d002      	beq.n	3ffa <put_fat+0x36>
		fs->wflag = 1;
    3ff4:	2301      	movs	r3, #1
    3ff6:	713b      	strb	r3, [r7, #4]
    3ff8:	e7f0      	b.n	3fdc <put_fat+0x18>
			bc = clst; bc += bc / 2;
    3ffa:	084b      	lsrs	r3, r1, #1
    3ffc:	4698      	mov	r8, r3
    3ffe:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    4000:	4643      	mov	r3, r8
    4002:	0a59      	lsrs	r1, r3, #9
    4004:	6a03      	ldr	r3, [r0, #32]
    4006:	469c      	mov	ip, r3
    4008:	4461      	add	r1, ip
    400a:	4b3b      	ldr	r3, [pc, #236]	; (40f8 <put_fat+0x134>)
    400c:	4798      	blx	r3
    400e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4010:	d1f0      	bne.n	3ff4 <put_fat+0x30>
			p = &fs->win[bc % SS(fs)];
    4012:	4643      	mov	r3, r8
    4014:	05db      	lsls	r3, r3, #23
    4016:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    4018:	07e2      	lsls	r2, r4, #31
    401a:	d51f      	bpl.n	405c <put_fat+0x98>
    401c:	18fb      	adds	r3, r7, r3
    401e:	3330      	adds	r3, #48	; 0x30
    4020:	7819      	ldrb	r1, [r3, #0]
    4022:	220f      	movs	r2, #15
    4024:	400a      	ands	r2, r1
    4026:	0131      	lsls	r1, r6, #4
    4028:	20ff      	movs	r0, #255	; 0xff
    402a:	0100      	lsls	r0, r0, #4
    402c:	4001      	ands	r1, r0
    402e:	430a      	orrs	r2, r1
    4030:	701a      	strb	r2, [r3, #0]
			bc++;
    4032:	4644      	mov	r4, r8
    4034:	3401      	adds	r4, #1
			fs->wflag = 1;
    4036:	2301      	movs	r3, #1
    4038:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    403a:	0a61      	lsrs	r1, r4, #9
    403c:	6a3b      	ldr	r3, [r7, #32]
    403e:	469c      	mov	ip, r3
    4040:	4461      	add	r1, ip
    4042:	0038      	movs	r0, r7
    4044:	4b2c      	ldr	r3, [pc, #176]	; (40f8 <put_fat+0x134>)
    4046:	4798      	blx	r3
			if (res != FR_OK) break;
    4048:	2800      	cmp	r0, #0
    404a:	d151      	bne.n	40f0 <put_fat+0x12c>
			p = &fs->win[bc % SS(fs)];
    404c:	05e4      	lsls	r4, r4, #23
    404e:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4050:	0936      	lsrs	r6, r6, #4
    4052:	b2f6      	uxtb	r6, r6
    4054:	193c      	adds	r4, r7, r4
    4056:	3430      	adds	r4, #48	; 0x30
    4058:	7026      	strb	r6, [r4, #0]
			break;
    405a:	e7cb      	b.n	3ff4 <put_fat+0x30>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    405c:	18fb      	adds	r3, r7, r3
    405e:	3330      	adds	r3, #48	; 0x30
    4060:	701e      	strb	r6, [r3, #0]
			bc++;
    4062:	4644      	mov	r4, r8
    4064:	3401      	adds	r4, #1
			fs->wflag = 1;
    4066:	2301      	movs	r3, #1
    4068:	713b      	strb	r3, [r7, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    406a:	0a61      	lsrs	r1, r4, #9
    406c:	6a3b      	ldr	r3, [r7, #32]
    406e:	469c      	mov	ip, r3
    4070:	4461      	add	r1, ip
    4072:	0038      	movs	r0, r7
    4074:	4b20      	ldr	r3, [pc, #128]	; (40f8 <put_fat+0x134>)
    4076:	4798      	blx	r3
			if (res != FR_OK) break;
    4078:	2800      	cmp	r0, #0
    407a:	d13b      	bne.n	40f4 <put_fat+0x130>
			p = &fs->win[bc % SS(fs)];
    407c:	05e4      	lsls	r4, r4, #23
    407e:	0de4      	lsrs	r4, r4, #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    4080:	193b      	adds	r3, r7, r4
    4082:	3330      	adds	r3, #48	; 0x30
    4084:	781b      	ldrb	r3, [r3, #0]
    4086:	220f      	movs	r2, #15
    4088:	4393      	bics	r3, r2
    408a:	0536      	lsls	r6, r6, #20
    408c:	0f36      	lsrs	r6, r6, #28
    408e:	431e      	orrs	r6, r3
    4090:	e7e0      	b.n	4054 <put_fat+0x90>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    4092:	0a09      	lsrs	r1, r1, #8
    4094:	6a03      	ldr	r3, [r0, #32]
    4096:	469c      	mov	ip, r3
    4098:	4461      	add	r1, ip
    409a:	4b17      	ldr	r3, [pc, #92]	; (40f8 <put_fat+0x134>)
    409c:	4798      	blx	r3
    409e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    40a0:	d1a8      	bne.n	3ff4 <put_fat+0x30>
			p = &fs->win[clst * 2 % SS(fs)];
    40a2:	0063      	lsls	r3, r4, #1
    40a4:	24ff      	movs	r4, #255	; 0xff
    40a6:	0064      	lsls	r4, r4, #1
    40a8:	4023      	ands	r3, r4
			ST_WORD(p, (WORD)val);
    40aa:	18fb      	adds	r3, r7, r3
    40ac:	3330      	adds	r3, #48	; 0x30
    40ae:	701e      	strb	r6, [r3, #0]
    40b0:	0a36      	lsrs	r6, r6, #8
    40b2:	705e      	strb	r6, [r3, #1]
			break;
    40b4:	e79e      	b.n	3ff4 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    40b6:	09c9      	lsrs	r1, r1, #7
    40b8:	6a03      	ldr	r3, [r0, #32]
    40ba:	469c      	mov	ip, r3
    40bc:	4461      	add	r1, ip
    40be:	4b0e      	ldr	r3, [pc, #56]	; (40f8 <put_fat+0x134>)
    40c0:	4798      	blx	r3
    40c2:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    40c4:	d196      	bne.n	3ff4 <put_fat+0x30>
			p = &fs->win[clst * 4 % SS(fs)];
    40c6:	00a4      	lsls	r4, r4, #2
    40c8:	23fe      	movs	r3, #254	; 0xfe
    40ca:	005b      	lsls	r3, r3, #1
    40cc:	401c      	ands	r4, r3
    40ce:	0022      	movs	r2, r4
    40d0:	3230      	adds	r2, #48	; 0x30
    40d2:	18ba      	adds	r2, r7, r2
			val |= LD_DWORD(p) & 0xF0000000;
    40d4:	78d3      	ldrb	r3, [r2, #3]
    40d6:	193c      	adds	r4, r7, r4
    40d8:	3430      	adds	r4, #48	; 0x30
    40da:	091b      	lsrs	r3, r3, #4
    40dc:	071b      	lsls	r3, r3, #28
    40de:	431e      	orrs	r6, r3
			ST_DWORD(p, val);
    40e0:	7026      	strb	r6, [r4, #0]
    40e2:	0a33      	lsrs	r3, r6, #8
    40e4:	7053      	strb	r3, [r2, #1]
    40e6:	0c33      	lsrs	r3, r6, #16
    40e8:	7093      	strb	r3, [r2, #2]
    40ea:	0e36      	lsrs	r6, r6, #24
    40ec:	70d6      	strb	r6, [r2, #3]
			break;
    40ee:	e781      	b.n	3ff4 <put_fat+0x30>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    40f0:	0005      	movs	r5, r0
    40f2:	e77f      	b.n	3ff4 <put_fat+0x30>
    40f4:	0005      	movs	r5, r0
    40f6:	e77d      	b.n	3ff4 <put_fat+0x30>
    40f8:	00003d81 	.word	0x00003d81

000040fc <create_chain>:
{
    40fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    40fe:	46c6      	mov	lr, r8
    4100:	b500      	push	{lr}
    4102:	0005      	movs	r5, r0
    4104:	4688      	mov	r8, r1
	if (clst == 0) {		/* Create a new chain */
    4106:	2900      	cmp	r1, #0
    4108:	d107      	bne.n	411a <create_chain+0x1e>
		scl = fs->last_clust;			/* Get suggested start point */
    410a:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    410c:	2e00      	cmp	r6, #0
    410e:	d00d      	beq.n	412c <create_chain+0x30>
    4110:	6983      	ldr	r3, [r0, #24]
    4112:	429e      	cmp	r6, r3
    4114:	d30b      	bcc.n	412e <create_chain+0x32>
    4116:	2601      	movs	r6, #1
    4118:	e009      	b.n	412e <create_chain+0x32>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    411a:	4b26      	ldr	r3, [pc, #152]	; (41b4 <create_chain+0xb8>)
    411c:	4798      	blx	r3
		if (cs < 2) return 1;			/* It is an invalid cluster */
    411e:	2801      	cmp	r0, #1
    4120:	d93d      	bls.n	419e <create_chain+0xa2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4122:	69ab      	ldr	r3, [r5, #24]
		scl = clst;
    4124:	4646      	mov	r6, r8
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4126:	4298      	cmp	r0, r3
    4128:	d201      	bcs.n	412e <create_chain+0x32>
    412a:	e03d      	b.n	41a8 <create_chain+0xac>
		if (!scl || scl >= fs->n_fatent) scl = 1;
    412c:	2601      	movs	r6, #1
	ncl = scl;				/* Start cluster */
    412e:	0034      	movs	r4, r6
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    4130:	4f20      	ldr	r7, [pc, #128]	; (41b4 <create_chain+0xb8>)
    4132:	e00a      	b.n	414a <create_chain+0x4e>
    4134:	0021      	movs	r1, r4
    4136:	0028      	movs	r0, r5
    4138:	47b8      	blx	r7
		if (cs == 0) break;				/* Found a free cluster */
    413a:	2800      	cmp	r0, #0
    413c:	d00d      	beq.n	415a <create_chain+0x5e>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    413e:	1c43      	adds	r3, r0, #1
    4140:	d032      	beq.n	41a8 <create_chain+0xac>
    4142:	2801      	cmp	r0, #1
    4144:	d030      	beq.n	41a8 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    4146:	42b4      	cmp	r4, r6
    4148:	d02d      	beq.n	41a6 <create_chain+0xaa>
		ncl++;							/* Next cluster */
    414a:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    414c:	69ab      	ldr	r3, [r5, #24]
    414e:	429c      	cmp	r4, r3
    4150:	d3f0      	bcc.n	4134 <create_chain+0x38>
			if (ncl > scl) return 0;	/* No free cluster */
    4152:	2e01      	cmp	r6, #1
    4154:	d925      	bls.n	41a2 <create_chain+0xa6>
			ncl = 2;
    4156:	2402      	movs	r4, #2
    4158:	e7ec      	b.n	4134 <create_chain+0x38>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    415a:	4a17      	ldr	r2, [pc, #92]	; (41b8 <create_chain+0xbc>)
    415c:	0021      	movs	r1, r4
    415e:	0028      	movs	r0, r5
    4160:	4b16      	ldr	r3, [pc, #88]	; (41bc <create_chain+0xc0>)
    4162:	4798      	blx	r3
	if (res == FR_OK && clst != 0) {
    4164:	2800      	cmp	r0, #0
    4166:	d113      	bne.n	4190 <create_chain+0x94>
    4168:	4643      	mov	r3, r8
    416a:	2b00      	cmp	r3, #0
    416c:	d109      	bne.n	4182 <create_chain+0x86>
		fs->last_clust = ncl;			/* Update FSINFO */
    416e:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    4170:	692b      	ldr	r3, [r5, #16]
    4172:	1c5a      	adds	r2, r3, #1
    4174:	d01b      	beq.n	41ae <create_chain+0xb2>
			fs->free_clust--;
    4176:	3b01      	subs	r3, #1
    4178:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    417a:	2301      	movs	r3, #1
    417c:	716b      	strb	r3, [r5, #5]
    417e:	0020      	movs	r0, r4
    4180:	e012      	b.n	41a8 <create_chain+0xac>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    4182:	0022      	movs	r2, r4
    4184:	4641      	mov	r1, r8
    4186:	0028      	movs	r0, r5
    4188:	4b0c      	ldr	r3, [pc, #48]	; (41bc <create_chain+0xc0>)
    418a:	4798      	blx	r3
	if (res == FR_OK) {
    418c:	2800      	cmp	r0, #0
    418e:	d0ee      	beq.n	416e <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    4190:	3801      	subs	r0, #1
    4192:	4242      	negs	r2, r0
    4194:	4142      	adcs	r2, r0
    4196:	4250      	negs	r0, r2
    4198:	2301      	movs	r3, #1
    419a:	4318      	orrs	r0, r3
    419c:	e004      	b.n	41a8 <create_chain+0xac>
		if (cs < 2) return 1;			/* It is an invalid cluster */
    419e:	2001      	movs	r0, #1
    41a0:	e002      	b.n	41a8 <create_chain+0xac>
			if (ncl > scl) return 0;	/* No free cluster */
    41a2:	2000      	movs	r0, #0
    41a4:	e000      	b.n	41a8 <create_chain+0xac>
		if (ncl == scl) return 0;		/* No free cluster */
    41a6:	2000      	movs	r0, #0
}
    41a8:	bc04      	pop	{r2}
    41aa:	4690      	mov	r8, r2
    41ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41ae:	0020      	movs	r0, r4
    41b0:	e7fa      	b.n	41a8 <create_chain+0xac>
    41b2:	46c0      	nop			; (mov r8, r8)
    41b4:	00003e21 	.word	0x00003e21
    41b8:	0fffffff 	.word	0x0fffffff
    41bc:	00003fc5 	.word	0x00003fc5

000041c0 <remove_chain>:
{
    41c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41c2:	46ce      	mov	lr, r9
    41c4:	4647      	mov	r7, r8
    41c6:	b580      	push	{r7, lr}
    41c8:	0004      	movs	r4, r0
    41ca:	000d      	movs	r5, r1
		res = FR_INT_ERR;
    41cc:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    41ce:	2901      	cmp	r1, #1
    41d0:	d902      	bls.n	41d8 <remove_chain+0x18>
    41d2:	69a3      	ldr	r3, [r4, #24]
    41d4:	4299      	cmp	r1, r3
    41d6:	d303      	bcc.n	41e0 <remove_chain+0x20>
}
    41d8:	bc0c      	pop	{r2, r3}
    41da:	4690      	mov	r8, r2
    41dc:	4699      	mov	r9, r3
    41de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
    41e0:	4f13      	ldr	r7, [pc, #76]	; (4230 <remove_chain+0x70>)
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    41e2:	4b14      	ldr	r3, [pc, #80]	; (4234 <remove_chain+0x74>)
    41e4:	4698      	mov	r8, r3
				fs->fsi_flag = 1;
    41e6:	2301      	movs	r3, #1
    41e8:	4699      	mov	r9, r3
    41ea:	e003      	b.n	41f4 <remove_chain+0x34>
    41ec:	0035      	movs	r5, r6
		while (clst < fs->n_fatent) {			/* Not a last link? */
    41ee:	69a3      	ldr	r3, [r4, #24]
    41f0:	42b3      	cmp	r3, r6
    41f2:	d9f1      	bls.n	41d8 <remove_chain+0x18>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    41f4:	0029      	movs	r1, r5
    41f6:	0020      	movs	r0, r4
    41f8:	47b8      	blx	r7
    41fa:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    41fc:	d011      	beq.n	4222 <remove_chain+0x62>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    41fe:	2801      	cmp	r0, #1
    4200:	d011      	beq.n	4226 <remove_chain+0x66>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    4202:	1c43      	adds	r3, r0, #1
    4204:	d011      	beq.n	422a <remove_chain+0x6a>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    4206:	2200      	movs	r2, #0
    4208:	0029      	movs	r1, r5
    420a:	0020      	movs	r0, r4
    420c:	47c0      	blx	r8
			if (res != FR_OK) break;
    420e:	2800      	cmp	r0, #0
    4210:	d1e2      	bne.n	41d8 <remove_chain+0x18>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    4212:	6923      	ldr	r3, [r4, #16]
    4214:	1c5a      	adds	r2, r3, #1
    4216:	d0e9      	beq.n	41ec <remove_chain+0x2c>
				fs->free_clust++;
    4218:	3301      	adds	r3, #1
    421a:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    421c:	464b      	mov	r3, r9
    421e:	7163      	strb	r3, [r4, #5]
    4220:	e7e4      	b.n	41ec <remove_chain+0x2c>
    4222:	2000      	movs	r0, #0
    4224:	e7d8      	b.n	41d8 <remove_chain+0x18>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    4226:	2002      	movs	r0, #2
    4228:	e7d6      	b.n	41d8 <remove_chain+0x18>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    422a:	2001      	movs	r0, #1
    422c:	e7d4      	b.n	41d8 <remove_chain+0x18>
    422e:	46c0      	nop			; (mov r8, r8)
    4230:	00003e21 	.word	0x00003e21
    4234:	00003fc5 	.word	0x00003fc5

00004238 <dir_next>:
{
    4238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    423a:	46d6      	mov	lr, sl
    423c:	4647      	mov	r7, r8
    423e:	b580      	push	{r7, lr}
    4240:	0006      	movs	r6, r0
    4242:	000d      	movs	r5, r1
	i = dj->index + 1;
    4244:	88c4      	ldrh	r4, [r0, #6]
    4246:	3401      	adds	r4, #1
    4248:	b2a4      	uxth	r4, r4
		return FR_NO_FILE;
    424a:	2004      	movs	r0, #4
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    424c:	2c00      	cmp	r4, #0
    424e:	d103      	bne.n	4258 <dir_next+0x20>
}
    4250:	bc0c      	pop	{r2, r3}
    4252:	4690      	mov	r8, r2
    4254:	469a      	mov	sl, r3
    4256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    4258:	6933      	ldr	r3, [r6, #16]
    425a:	2b00      	cmp	r3, #0
    425c:	d0f8      	beq.n	4250 <dir_next+0x18>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    425e:	270f      	movs	r7, #15
    4260:	4027      	ands	r7, r4
    4262:	d10f      	bne.n	4284 <dir_next+0x4c>
		dj->sect++;					/* Next sector */
    4264:	3301      	adds	r3, #1
    4266:	6133      	str	r3, [r6, #16]
		if (dj->clust == 0) {	/* Static table */
    4268:	68f1      	ldr	r1, [r6, #12]
    426a:	2900      	cmp	r1, #0
    426c:	d104      	bne.n	4278 <dir_next+0x40>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    426e:	6833      	ldr	r3, [r6, #0]
    4270:	891b      	ldrh	r3, [r3, #8]
    4272:	42a3      	cmp	r3, r4
    4274:	d9ec      	bls.n	4250 <dir_next+0x18>
    4276:	e005      	b.n	4284 <dir_next+0x4c>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    4278:	6830      	ldr	r0, [r6, #0]
    427a:	7883      	ldrb	r3, [r0, #2]
    427c:	3b01      	subs	r3, #1
    427e:	0922      	lsrs	r2, r4, #4
    4280:	421a      	tst	r2, r3
    4282:	d007      	beq.n	4294 <dir_next+0x5c>
	dj->index = i;
    4284:	80f4      	strh	r4, [r6, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    4286:	6833      	ldr	r3, [r6, #0]
    4288:	3330      	adds	r3, #48	; 0x30
    428a:	017f      	lsls	r7, r7, #5
    428c:	19df      	adds	r7, r3, r7
    428e:	6177      	str	r7, [r6, #20]
	return FR_OK;
    4290:	2000      	movs	r0, #0
    4292:	e7dd      	b.n	4250 <dir_next+0x18>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    4294:	4b2c      	ldr	r3, [pc, #176]	; (4348 <dir_next+0x110>)
    4296:	4798      	blx	r3
    4298:	4680      	mov	r8, r0
				if (clst <= 1) return FR_INT_ERR;
    429a:	2002      	movs	r0, #2
    429c:	4643      	mov	r3, r8
    429e:	2b01      	cmp	r3, #1
    42a0:	d9d6      	bls.n	4250 <dir_next+0x18>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    42a2:	3301      	adds	r3, #1
    42a4:	d04b      	beq.n	433e <dir_next+0x106>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    42a6:	6833      	ldr	r3, [r6, #0]
    42a8:	699a      	ldr	r2, [r3, #24]
    42aa:	4590      	cmp	r8, r2
    42ac:	d33f      	bcc.n	432e <dir_next+0xf6>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    42ae:	3002      	adds	r0, #2
    42b0:	2d00      	cmp	r5, #0
    42b2:	d0cd      	beq.n	4250 <dir_next+0x18>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    42b4:	68f1      	ldr	r1, [r6, #12]
    42b6:	0018      	movs	r0, r3
    42b8:	4b24      	ldr	r3, [pc, #144]	; (434c <dir_next+0x114>)
    42ba:	4798      	blx	r3
    42bc:	4680      	mov	r8, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    42be:	2007      	movs	r0, #7
    42c0:	4643      	mov	r3, r8
    42c2:	2b00      	cmp	r3, #0
    42c4:	d0c4      	beq.n	4250 <dir_next+0x18>
					if (clst == 1) return FR_INT_ERR;
    42c6:	3805      	subs	r0, #5
    42c8:	2b01      	cmp	r3, #1
    42ca:	d0c1      	beq.n	4250 <dir_next+0x18>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    42cc:	3801      	subs	r0, #1
    42ce:	3301      	adds	r3, #1
    42d0:	d0be      	beq.n	4250 <dir_next+0x18>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    42d2:	2100      	movs	r1, #0
    42d4:	6830      	ldr	r0, [r6, #0]
    42d6:	4b1e      	ldr	r3, [pc, #120]	; (4350 <dir_next+0x118>)
    42d8:	4798      	blx	r3
    42da:	0003      	movs	r3, r0
    42dc:	2001      	movs	r0, #1
    42de:	2b00      	cmp	r3, #0
    42e0:	d1b6      	bne.n	4250 <dir_next+0x18>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    42e2:	6830      	ldr	r0, [r6, #0]
    42e4:	3030      	adds	r0, #48	; 0x30
    42e6:	2280      	movs	r2, #128	; 0x80
    42e8:	0092      	lsls	r2, r2, #2
    42ea:	2100      	movs	r1, #0
    42ec:	4b19      	ldr	r3, [pc, #100]	; (4354 <dir_next+0x11c>)
    42ee:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    42f0:	6835      	ldr	r5, [r6, #0]
    42f2:	4641      	mov	r1, r8
    42f4:	0028      	movs	r0, r5
    42f6:	4b18      	ldr	r3, [pc, #96]	; (4358 <dir_next+0x120>)
    42f8:	4798      	blx	r3
    42fa:	62e8      	str	r0, [r5, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    42fc:	2500      	movs	r5, #0
						dj->fs->wflag = 1;
    42fe:	2301      	movs	r3, #1
    4300:	469a      	mov	sl, r3
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4302:	6833      	ldr	r3, [r6, #0]
    4304:	789a      	ldrb	r2, [r3, #2]
    4306:	42aa      	cmp	r2, r5
    4308:	d90e      	bls.n	4328 <dir_next+0xf0>
						dj->fs->wflag = 1;
    430a:	4652      	mov	r2, sl
    430c:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    430e:	2100      	movs	r1, #0
    4310:	6830      	ldr	r0, [r6, #0]
    4312:	4b0f      	ldr	r3, [pc, #60]	; (4350 <dir_next+0x118>)
    4314:	4798      	blx	r3
    4316:	2800      	cmp	r0, #0
    4318:	d113      	bne.n	4342 <dir_next+0x10a>
						dj->fs->winsect++;
    431a:	6832      	ldr	r2, [r6, #0]
    431c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    431e:	3301      	adds	r3, #1
    4320:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    4322:	3501      	adds	r5, #1
    4324:	b2ed      	uxtb	r5, r5
    4326:	e7ec      	b.n	4302 <dir_next+0xca>
					dj->fs->winsect -= c;						/* Rewind window address */
    4328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    432a:	1b52      	subs	r2, r2, r5
    432c:	62da      	str	r2, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    432e:	4643      	mov	r3, r8
    4330:	60f3      	str	r3, [r6, #12]
				dj->sect = clust2sect(dj->fs, clst);
    4332:	4641      	mov	r1, r8
    4334:	6830      	ldr	r0, [r6, #0]
    4336:	4b08      	ldr	r3, [pc, #32]	; (4358 <dir_next+0x120>)
    4338:	4798      	blx	r3
    433a:	6130      	str	r0, [r6, #16]
    433c:	e7a2      	b.n	4284 <dir_next+0x4c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    433e:	2001      	movs	r0, #1
    4340:	e786      	b.n	4250 <dir_next+0x18>
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    4342:	2001      	movs	r0, #1
    4344:	e784      	b.n	4250 <dir_next+0x18>
    4346:	46c0      	nop			; (mov r8, r8)
    4348:	00003e21 	.word	0x00003e21
    434c:	000040fd 	.word	0x000040fd
    4350:	00003d81 	.word	0x00003d81
    4354:	000038b5 	.word	0x000038b5
    4358:	000038c7 	.word	0x000038c7

0000435c <dir_find>:
{
    435c:	b5f0      	push	{r4, r5, r6, r7, lr}
    435e:	46de      	mov	lr, fp
    4360:	4657      	mov	r7, sl
    4362:	464e      	mov	r6, r9
    4364:	4645      	mov	r5, r8
    4366:	b5e0      	push	{r5, r6, r7, lr}
    4368:	b083      	sub	sp, #12
    436a:	0005      	movs	r5, r0
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    436c:	2100      	movs	r1, #0
    436e:	4b5a      	ldr	r3, [pc, #360]	; (44d8 <dir_find+0x17c>)
    4370:	4798      	blx	r3
    4372:	1e07      	subs	r7, r0, #0
	if (res != FR_OK) return res;
    4374:	d000      	beq.n	4378 <dir_find+0x1c>
    4376:	e09e      	b.n	44b6 <dir_find+0x15a>
    4378:	23ff      	movs	r3, #255	; 0xff
    437a:	4699      	mov	r9, r3
    437c:	469a      	mov	sl, r3
		res = move_window(dj->fs, dj->sect);
    437e:	4b57      	ldr	r3, [pc, #348]	; (44dc <dir_find+0x180>)
    4380:	469b      	mov	fp, r3
    4382:	e01b      	b.n	43bc <dir_find+0x60>
			if (a == AM_LFN) {			/* An LFN entry is found */
    4384:	2b0f      	cmp	r3, #15
    4386:	d030      	beq.n	43ea <dir_find+0x8e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    4388:	4653      	mov	r3, sl
    438a:	2b00      	cmp	r3, #0
    438c:	d105      	bne.n	439a <dir_find+0x3e>
    438e:	0020      	movs	r0, r4
    4390:	4b53      	ldr	r3, [pc, #332]	; (44e0 <dir_find+0x184>)
    4392:	4798      	blx	r3
    4394:	4581      	cmp	r9, r0
    4396:	d100      	bne.n	439a <dir_find+0x3e>
    4398:	e08d      	b.n	44b6 <dir_find+0x15a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    439a:	2301      	movs	r3, #1
    439c:	425b      	negs	r3, r3
    439e:	842b      	strh	r3, [r5, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    43a0:	69a8      	ldr	r0, [r5, #24]
    43a2:	7ac3      	ldrb	r3, [r0, #11]
    43a4:	07db      	lsls	r3, r3, #31
    43a6:	d400      	bmi.n	43aa <dir_find+0x4e>
    43a8:	e07d      	b.n	44a6 <dir_find+0x14a>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    43aa:	23ff      	movs	r3, #255	; 0xff
    43ac:	469a      	mov	sl, r3
		res = dir_next(dj, 0);		/* Next entry */
    43ae:	2100      	movs	r1, #0
    43b0:	0028      	movs	r0, r5
    43b2:	4b4c      	ldr	r3, [pc, #304]	; (44e4 <dir_find+0x188>)
    43b4:	4798      	blx	r3
    43b6:	1e07      	subs	r7, r0, #0
	} while (res == FR_OK);
    43b8:	d000      	beq.n	43bc <dir_find+0x60>
    43ba:	e07c      	b.n	44b6 <dir_find+0x15a>
		res = move_window(dj->fs, dj->sect);
    43bc:	6929      	ldr	r1, [r5, #16]
    43be:	6828      	ldr	r0, [r5, #0]
    43c0:	47d8      	blx	fp
    43c2:	1e07      	subs	r7, r0, #0
		if (res != FR_OK) break;
    43c4:	d177      	bne.n	44b6 <dir_find+0x15a>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    43c6:	696c      	ldr	r4, [r5, #20]
		c = dir[DIR_Name];
    43c8:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    43ca:	2e00      	cmp	r6, #0
    43cc:	d100      	bne.n	43d0 <dir_find+0x74>
    43ce:	e080      	b.n	44d2 <dir_find+0x176>
		a = dir[DIR_Attr] & AM_MASK;
    43d0:	7ae2      	ldrb	r2, [r4, #11]
    43d2:	233f      	movs	r3, #63	; 0x3f
    43d4:	4013      	ands	r3, r2
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    43d6:	2ee5      	cmp	r6, #229	; 0xe5
    43d8:	d100      	bne.n	43dc <dir_find+0x80>
    43da:	e077      	b.n	44cc <dir_find+0x170>
    43dc:	0712      	lsls	r2, r2, #28
    43de:	d5d1      	bpl.n	4384 <dir_find+0x28>
    43e0:	2b0f      	cmp	r3, #15
    43e2:	d002      	beq.n	43ea <dir_find+0x8e>
			ord = 0xFF;
    43e4:	23ff      	movs	r3, #255	; 0xff
    43e6:	469a      	mov	sl, r3
    43e8:	e7e1      	b.n	43ae <dir_find+0x52>
				if (dj->lfn) {
    43ea:	69ef      	ldr	r7, [r5, #28]
    43ec:	2f00      	cmp	r7, #0
    43ee:	d0de      	beq.n	43ae <dir_find+0x52>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    43f0:	0673      	lsls	r3, r6, #25
    43f2:	d518      	bpl.n	4426 <dir_find+0xca>
						sum = dir[LDIR_Chksum];
    43f4:	7b63      	ldrb	r3, [r4, #13]
    43f6:	4699      	mov	r9, r3
						c &= ~LLE; ord = c;	/* LFN start order */
    43f8:	2340      	movs	r3, #64	; 0x40
    43fa:	439e      	bics	r6, r3
						dj->lfn_idx = dj->index;
    43fc:	88eb      	ldrh	r3, [r5, #6]
    43fe:	842b      	strh	r3, [r5, #32]
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4400:	7b63      	ldrb	r3, [r4, #13]
    4402:	9300      	str	r3, [sp, #0]
    4404:	22ff      	movs	r2, #255	; 0xff
    4406:	4692      	mov	sl, r2
    4408:	454b      	cmp	r3, r9
    440a:	d1d0      	bne.n	43ae <dir_find+0x52>
	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    440c:	7823      	ldrb	r3, [r4, #0]
    440e:	3abf      	subs	r2, #191	; 0xbf
    4410:	4393      	bics	r3, r2
    4412:	3b01      	subs	r3, #1
    4414:	005a      	lsls	r2, r3, #1
    4416:	18d2      	adds	r2, r2, r3
    4418:	0092      	lsls	r2, r2, #2
    441a:	4692      	mov	sl, r2
    441c:	449a      	add	sl, r3
	s = 0; wc = 1;
    441e:	2201      	movs	r2, #1
    4420:	2300      	movs	r3, #0
    4422:	4699      	mov	r9, r3
    4424:	e01d      	b.n	4462 <dir_find+0x106>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4426:	45b2      	cmp	sl, r6
    4428:	d0ea      	beq.n	4400 <dir_find+0xa4>
    442a:	23ff      	movs	r3, #255	; 0xff
    442c:	469a      	mov	sl, r3
    442e:	e7be      	b.n	43ae <dir_find+0x52>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    4430:	4b2d      	ldr	r3, [pc, #180]	; (44e8 <dir_find+0x18c>)
    4432:	4798      	blx	r3
    4434:	9001      	str	r0, [sp, #4]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    4436:	4653      	mov	r3, sl
    4438:	2bfe      	cmp	r3, #254	; 0xfe
    443a:	d81f      	bhi.n	447c <dir_find+0x120>
    443c:	2301      	movs	r3, #1
    443e:	4453      	add	r3, sl
    4440:	4698      	mov	r8, r3
    4442:	4653      	mov	r3, sl
    4444:	005b      	lsls	r3, r3, #1
    4446:	5bd8      	ldrh	r0, [r3, r7]
    4448:	4b27      	ldr	r3, [pc, #156]	; (44e8 <dir_find+0x18c>)
    444a:	4798      	blx	r3
    444c:	0002      	movs	r2, r0
    444e:	9b01      	ldr	r3, [sp, #4]
    4450:	4283      	cmp	r3, r0
    4452:	d113      	bne.n	447c <dir_find+0x120>
    4454:	46c2      	mov	sl, r8
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    4456:	2301      	movs	r3, #1
    4458:	469c      	mov	ip, r3
    445a:	44e1      	add	r9, ip
    445c:	464b      	mov	r3, r9
    445e:	2b0d      	cmp	r3, #13
    4460:	d011      	beq.n	4486 <dir_find+0x12a>
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    4462:	4b22      	ldr	r3, [pc, #136]	; (44ec <dir_find+0x190>)
    4464:	4649      	mov	r1, r9
    4466:	5cc9      	ldrb	r1, [r1, r3]
    4468:	1863      	adds	r3, r4, r1
    446a:	785b      	ldrb	r3, [r3, #1]
    446c:	021b      	lsls	r3, r3, #8
    446e:	5c60      	ldrb	r0, [r4, r1]
    4470:	4318      	orrs	r0, r3
		if (wc) {	/* Last char has not been processed */
    4472:	2a00      	cmp	r2, #0
    4474:	d1dc      	bne.n	4430 <dir_find+0xd4>
			if (uc != 0xFFFF) return 0;	/* Check filler */
    4476:	4b1e      	ldr	r3, [pc, #120]	; (44f0 <dir_find+0x194>)
    4478:	4298      	cmp	r0, r3
    447a:	d0ec      	beq.n	4456 <dir_find+0xfa>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    447c:	9b00      	ldr	r3, [sp, #0]
    447e:	4699      	mov	r9, r3
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    4480:	23ff      	movs	r3, #255	; 0xff
    4482:	469a      	mov	sl, r3
    4484:	e793      	b.n	43ae <dir_find+0x52>
	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    4486:	7823      	ldrb	r3, [r4, #0]
    4488:	065b      	lsls	r3, r3, #25
    448a:	d506      	bpl.n	449a <dir_find+0x13e>
    448c:	2a00      	cmp	r2, #0
    448e:	d004      	beq.n	449a <dir_find+0x13e>
    4490:	4653      	mov	r3, sl
    4492:	005b      	lsls	r3, r3, #1
    4494:	5bdb      	ldrh	r3, [r3, r7]
    4496:	2b00      	cmp	r3, #0
    4498:	d1f0      	bne.n	447c <dir_find+0x120>
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    449a:	3e01      	subs	r6, #1
    449c:	b2f3      	uxtb	r3, r6
    449e:	469a      	mov	sl, r3
    44a0:	9b00      	ldr	r3, [sp, #0]
    44a2:	4699      	mov	r9, r3
    44a4:	e783      	b.n	43ae <dir_find+0x52>
    44a6:	2300      	movs	r3, #0
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    44a8:	5ce1      	ldrb	r1, [r4, r3]
    44aa:	5cc2      	ldrb	r2, [r0, r3]
    44ac:	4291      	cmp	r1, r2
    44ae:	d10a      	bne.n	44c6 <dir_find+0x16a>
    44b0:	3301      	adds	r3, #1
    44b2:	2b0b      	cmp	r3, #11
    44b4:	d1f8      	bne.n	44a8 <dir_find+0x14c>
}
    44b6:	0038      	movs	r0, r7
    44b8:	b003      	add	sp, #12
    44ba:	bc3c      	pop	{r2, r3, r4, r5}
    44bc:	4690      	mov	r8, r2
    44be:	4699      	mov	r9, r3
    44c0:	46a2      	mov	sl, r4
    44c2:	46ab      	mov	fp, r5
    44c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    44c6:	23ff      	movs	r3, #255	; 0xff
    44c8:	469a      	mov	sl, r3
    44ca:	e770      	b.n	43ae <dir_find+0x52>
			ord = 0xFF;
    44cc:	23ff      	movs	r3, #255	; 0xff
    44ce:	469a      	mov	sl, r3
    44d0:	e76d      	b.n	43ae <dir_find+0x52>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    44d2:	2704      	movs	r7, #4
    44d4:	e7ef      	b.n	44b6 <dir_find+0x15a>
    44d6:	46c0      	nop			; (mov r8, r8)
    44d8:	00003f1d 	.word	0x00003f1d
    44dc:	00003d81 	.word	0x00003d81
    44e0:	000038df 	.word	0x000038df
    44e4:	00004239 	.word	0x00004239
    44e8:	000054d5 	.word	0x000054d5
    44ec:	00006d8c 	.word	0x00006d8c
    44f0:	0000ffff 	.word	0x0000ffff

000044f4 <dir_register>:
{
    44f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    44f6:	46de      	mov	lr, fp
    44f8:	4657      	mov	r7, sl
    44fa:	464e      	mov	r6, r9
    44fc:	4645      	mov	r5, r8
    44fe:	b5e0      	push	{r5, r6, r7, lr}
    4500:	b089      	sub	sp, #36	; 0x24
    4502:	0004      	movs	r4, r0
	fn = dj->fn; lfn = dj->lfn;
    4504:	6987      	ldr	r7, [r0, #24]
    4506:	69c3      	ldr	r3, [r0, #28]
    4508:	469a      	mov	sl, r3
	mem_cpy(sn, fn, 12);
    450a:	ad05      	add	r5, sp, #20
    450c:	220c      	movs	r2, #12
    450e:	0039      	movs	r1, r7
    4510:	0028      	movs	r0, r5
    4512:	4ba7      	ldr	r3, [pc, #668]	; (47b0 <dir_register+0x2bc>)
    4514:	4798      	blx	r3
	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    4516:	7aeb      	ldrb	r3, [r5, #11]
    4518:	07db      	lsls	r3, r3, #31
    451a:	d400      	bmi.n	451e <dir_register+0x2a>
    451c:	e070      	b.n	4600 <dir_register+0x10c>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    451e:	2300      	movs	r3, #0
    4520:	72fb      	strb	r3, [r7, #11]
    4522:	61e3      	str	r3, [r4, #28]
	mem_cpy(dst, src, 11);
    4524:	220b      	movs	r2, #11
    4526:	a905      	add	r1, sp, #20
    4528:	0038      	movs	r0, r7
    452a:	4ba1      	ldr	r3, [pc, #644]	; (47b0 <dir_register+0x2bc>)
    452c:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    452e:	2301      	movs	r3, #1
		ns[i--] = c;
    4530:	ad03      	add	r5, sp, #12
    4532:	001e      	movs	r6, r3
    4534:	46a0      	mov	r8, r4
    4536:	e049      	b.n	45cc <dir_register+0xd8>
    4538:	3801      	subs	r0, #1
    453a:	1829      	adds	r1, r5, r0
    453c:	704a      	strb	r2, [r1, #1]
		seq /= 16;
    453e:	091b      	lsrs	r3, r3, #4
    4540:	b29b      	uxth	r3, r3
	} while (seq);
    4542:	2b00      	cmp	r3, #0
    4544:	d007      	beq.n	4556 <dir_register+0x62>
		c = (seq % 16) + '0';
    4546:	0021      	movs	r1, r4
    4548:	4019      	ands	r1, r3
    454a:	000a      	movs	r2, r1
    454c:	3230      	adds	r2, #48	; 0x30
		if (c > '9') c += 7;
    454e:	2a39      	cmp	r2, #57	; 0x39
    4550:	d9f2      	bls.n	4538 <dir_register+0x44>
    4552:	3207      	adds	r2, #7
    4554:	e7f0      	b.n	4538 <dir_register+0x44>
	ns[i] = '~';
    4556:	337e      	adds	r3, #126	; 0x7e
    4558:	542b      	strb	r3, [r5, r0]
	for (j = 0; j < i && dst[j] != ' '; j++) {
    455a:	2800      	cmp	r0, #0
    455c:	d00a      	beq.n	4574 <dir_register+0x80>
    455e:	783b      	ldrb	r3, [r7, #0]
    4560:	2b20      	cmp	r3, #32
    4562:	d009      	beq.n	4578 <dir_register+0x84>
    4564:	2300      	movs	r3, #0
    4566:	3301      	adds	r3, #1
    4568:	4298      	cmp	r0, r3
    456a:	d007      	beq.n	457c <dir_register+0x88>
    456c:	5cfa      	ldrb	r2, [r7, r3]
    456e:	2a20      	cmp	r2, #32
    4570:	d1f9      	bne.n	4566 <dir_register+0x72>
    4572:	e009      	b.n	4588 <dir_register+0x94>
    4574:	0003      	movs	r3, r0
    4576:	e007      	b.n	4588 <dir_register+0x94>
    4578:	2300      	movs	r3, #0
    457a:	e005      	b.n	4588 <dir_register+0x94>
    457c:	0003      	movs	r3, r0
    457e:	e003      	b.n	4588 <dir_register+0x94>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4580:	54fa      	strb	r2, [r7, r3]
    4582:	3301      	adds	r3, #1
	} while (j < 8);
    4584:	2b07      	cmp	r3, #7
    4586:	d805      	bhi.n	4594 <dir_register+0xa0>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    4588:	2220      	movs	r2, #32
    458a:	2807      	cmp	r0, #7
    458c:	d8f8      	bhi.n	4580 <dir_register+0x8c>
    458e:	5c2a      	ldrb	r2, [r5, r0]
    4590:	3001      	adds	r0, #1
    4592:	e7f5      	b.n	4580 <dir_register+0x8c>
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    4594:	4640      	mov	r0, r8
    4596:	4b87      	ldr	r3, [pc, #540]	; (47b4 <dir_register+0x2c0>)
    4598:	4798      	blx	r3
			if (res != FR_OK) break;
    459a:	2800      	cmp	r0, #0
    459c:	d11c      	bne.n	45d8 <dir_register+0xe4>
		for (n = 1; n < 100; n++) {
    459e:	3601      	adds	r6, #1
    45a0:	b2b6      	uxth	r6, r6
    45a2:	2e64      	cmp	r6, #100	; 0x64
    45a4:	d015      	beq.n	45d2 <dir_register+0xde>
	mem_cpy(dst, src, 11);
    45a6:	220b      	movs	r2, #11
    45a8:	a905      	add	r1, sp, #20
    45aa:	0038      	movs	r0, r7
    45ac:	4b80      	ldr	r3, [pc, #512]	; (47b0 <dir_register+0x2bc>)
    45ae:	4798      	blx	r3
		for (n = 1; n < 100; n++) {
    45b0:	0033      	movs	r3, r6
	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    45b2:	2e05      	cmp	r6, #5
    45b4:	d90a      	bls.n	45cc <dir_register+0xd8>
    45b6:	4651      	mov	r1, sl
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    45b8:	085a      	lsrs	r2, r3, #1
    45ba:	03db      	lsls	r3, r3, #15
    45bc:	4313      	orrs	r3, r2
    45be:	880a      	ldrh	r2, [r1, #0]
    45c0:	189b      	adds	r3, r3, r2
    45c2:	b29b      	uxth	r3, r3
    45c4:	3102      	adds	r1, #2
    45c6:	880a      	ldrh	r2, [r1, #0]
    45c8:	2a00      	cmp	r2, #0
    45ca:	d1f5      	bne.n	45b8 <dir_register+0xc4>
		for (n = 1; n < 100; n++) {
    45cc:	2007      	movs	r0, #7
		c = (seq % 16) + '0';
    45ce:	240f      	movs	r4, #15
    45d0:	e7b9      	b.n	4546 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    45d2:	2307      	movs	r3, #7
    45d4:	4698      	mov	r8, r3
    45d6:	e006      	b.n	45e6 <dir_register+0xf2>
    45d8:	4644      	mov	r4, r8
    45da:	4680      	mov	r8, r0
    45dc:	2e64      	cmp	r6, #100	; 0x64
    45de:	d100      	bne.n	45e2 <dir_register+0xee>
    45e0:	e0a5      	b.n	472e <dir_register+0x23a>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    45e2:	2804      	cmp	r0, #4
    45e4:	d007      	beq.n	45f6 <dir_register+0x102>
}
    45e6:	4640      	mov	r0, r8
    45e8:	b009      	add	sp, #36	; 0x24
    45ea:	bc3c      	pop	{r2, r3, r4, r5}
    45ec:	4690      	mov	r8, r2
    45ee:	4699      	mov	r9, r3
    45f0:	46a2      	mov	sl, r4
    45f2:	46ab      	mov	fp, r5
    45f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		fn[NS] = sn[NS]; dj->lfn = lfn;
    45f6:	ab05      	add	r3, sp, #20
    45f8:	7adb      	ldrb	r3, [r3, #11]
    45fa:	72fb      	strb	r3, [r7, #11]
    45fc:	4653      	mov	r3, sl
    45fe:	61e3      	str	r3, [r4, #28]
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4600:	ab05      	add	r3, sp, #20
    4602:	7adb      	ldrb	r3, [r3, #11]
		ne = 1;
    4604:	2201      	movs	r2, #1
    4606:	4693      	mov	fp, r2
	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    4608:	079b      	lsls	r3, r3, #30
    460a:	d511      	bpl.n	4630 <dir_register+0x13c>
		for (ne = 0; lfn[ne]; ne++) ;
    460c:	4653      	mov	r3, sl
    460e:	881b      	ldrh	r3, [r3, #0]
    4610:	2b00      	cmp	r3, #0
    4612:	d01b      	beq.n	464c <dir_register+0x158>
    4614:	2000      	movs	r0, #0
    4616:	4652      	mov	r2, sl
    4618:	3001      	adds	r0, #1
    461a:	b280      	uxth	r0, r0
    461c:	0043      	lsls	r3, r0, #1
    461e:	5a9b      	ldrh	r3, [r3, r2]
    4620:	2b00      	cmp	r3, #0
    4622:	d1f9      	bne.n	4618 <dir_register+0x124>
		ne = (ne + 25) / 13;
    4624:	3019      	adds	r0, #25
    4626:	210d      	movs	r1, #13
    4628:	4b63      	ldr	r3, [pc, #396]	; (47b8 <dir_register+0x2c4>)
    462a:	4798      	blx	r3
    462c:	b283      	uxth	r3, r0
    462e:	469b      	mov	fp, r3
	res = dir_sdi(dj, 0);
    4630:	2100      	movs	r1, #0
    4632:	0020      	movs	r0, r4
    4634:	4b61      	ldr	r3, [pc, #388]	; (47bc <dir_register+0x2c8>)
    4636:	4798      	blx	r3
    4638:	4680      	mov	r8, r0
	if (res != FR_OK) return res;
    463a:	2800      	cmp	r0, #0
    463c:	d1d3      	bne.n	45e6 <dir_register+0xf2>
    463e:	4682      	mov	sl, r0
    4640:	2500      	movs	r5, #0
		res = move_window(dj->fs, dj->sect);
    4642:	4f5f      	ldr	r7, [pc, #380]	; (47c0 <dir_register+0x2cc>)
			n = 0;					/* Not a blank entry. Restart to search */
    4644:	2600      	movs	r6, #0
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    4646:	4b5f      	ldr	r3, [pc, #380]	; (47c4 <dir_register+0x2d0>)
    4648:	4699      	mov	r9, r3
    464a:	e00b      	b.n	4664 <dir_register+0x170>
		for (ne = 0; lfn[ne]; ne++) ;
    464c:	2000      	movs	r0, #0
    464e:	e7e9      	b.n	4624 <dir_register+0x130>
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    4650:	1c6b      	adds	r3, r5, #1
    4652:	b29b      	uxth	r3, r3
    4654:	459b      	cmp	fp, r3
    4656:	d06d      	beq.n	4734 <dir_register+0x240>
    4658:	001d      	movs	r5, r3
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    465a:	2101      	movs	r1, #1
    465c:	0020      	movs	r0, r4
    465e:	47c8      	blx	r9
	} while (res == FR_OK);
    4660:	2800      	cmp	r0, #0
    4662:	d112      	bne.n	468a <dir_register+0x196>
		res = move_window(dj->fs, dj->sect);
    4664:	6921      	ldr	r1, [r4, #16]
    4666:	6820      	ldr	r0, [r4, #0]
    4668:	47b8      	blx	r7
		if (res != FR_OK) break;
    466a:	2800      	cmp	r0, #0
    466c:	d000      	beq.n	4670 <dir_register+0x17c>
    466e:	e098      	b.n	47a2 <dir_register+0x2ae>
		c = *dj->dir;				/* Check the entry status */
    4670:	6963      	ldr	r3, [r4, #20]
    4672:	781b      	ldrb	r3, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    4674:	2be5      	cmp	r3, #229	; 0xe5
    4676:	d001      	beq.n	467c <dir_register+0x188>
    4678:	2b00      	cmp	r3, #0
    467a:	d104      	bne.n	4686 <dir_register+0x192>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    467c:	2d00      	cmp	r5, #0
    467e:	d1e7      	bne.n	4650 <dir_register+0x15c>
    4680:	88e3      	ldrh	r3, [r4, #6]
    4682:	469a      	mov	sl, r3
    4684:	e7e4      	b.n	4650 <dir_register+0x15c>
			n = 0;					/* Not a blank entry. Restart to search */
    4686:	0035      	movs	r5, r6
    4688:	e7e7      	b.n	465a <dir_register+0x166>
    468a:	4680      	mov	r8, r0
    468c:	e7ab      	b.n	45e6 <dir_register+0xf2>
		res = dir_sdi(dj, is);
    468e:	4651      	mov	r1, sl
    4690:	0020      	movs	r0, r4
    4692:	4b4a      	ldr	r3, [pc, #296]	; (47bc <dir_register+0x2c8>)
    4694:	4798      	blx	r3
    4696:	4680      	mov	r8, r0
		if (res == FR_OK) {
    4698:	2800      	cmp	r0, #0
    469a:	d1a4      	bne.n	45e6 <dir_register+0xf2>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    469c:	69a0      	ldr	r0, [r4, #24]
    469e:	4b4a      	ldr	r3, [pc, #296]	; (47c8 <dir_register+0x2d4>)
    46a0:	4798      	blx	r3
    46a2:	9001      	str	r0, [sp, #4]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    46a4:	46a8      	mov	r8, r5
    46a6:	e01f      	b.n	46e8 <dir_register+0x1f4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    46a8:	0022      	movs	r2, r4
    46aa:	e067      	b.n	477c <dir_register+0x288>
    46ac:	465e      	mov	r6, fp
    46ae:	4664      	mov	r4, ip
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    46b0:	4946      	ldr	r1, [pc, #280]	; (47cc <dir_register+0x2d8>)
    46b2:	428b      	cmp	r3, r1
    46b4:	d003      	beq.n	46be <dir_register+0x1ca>
    46b6:	0052      	lsls	r2, r2, #1
    46b8:	5b93      	ldrh	r3, [r2, r6]
    46ba:	2b00      	cmp	r3, #0
    46bc:	d103      	bne.n	46c6 <dir_register+0x1d2>
    46be:	2340      	movs	r3, #64	; 0x40
    46c0:	464a      	mov	r2, r9
    46c2:	431a      	orrs	r2, r3
    46c4:	4691      	mov	r9, r2
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    46c6:	464b      	mov	r3, r9
    46c8:	7003      	strb	r3, [r0, #0]
				dj->fs->wflag = 1;
    46ca:	2301      	movs	r3, #1
    46cc:	6822      	ldr	r2, [r4, #0]
    46ce:	7113      	strb	r3, [r2, #4]
				res = dir_next(dj, 0);	/* Next entry */
    46d0:	2100      	movs	r1, #0
    46d2:	0020      	movs	r0, r4
    46d4:	4b3b      	ldr	r3, [pc, #236]	; (47c4 <dir_register+0x2d0>)
    46d6:	4798      	blx	r3
			} while (res == FR_OK && --ne);
    46d8:	2800      	cmp	r0, #0
    46da:	d166      	bne.n	47aa <dir_register+0x2b6>
    46dc:	4645      	mov	r5, r8
    46de:	3d01      	subs	r5, #1
    46e0:	b2ab      	uxth	r3, r5
    46e2:	4698      	mov	r8, r3
    46e4:	2b00      	cmp	r3, #0
    46e6:	d027      	beq.n	4738 <dir_register+0x244>
				res = move_window(dj->fs, dj->sect);
    46e8:	6921      	ldr	r1, [r4, #16]
    46ea:	6820      	ldr	r0, [r4, #0]
    46ec:	4b34      	ldr	r3, [pc, #208]	; (47c0 <dir_register+0x2cc>)
    46ee:	4798      	blx	r3
				if (res != FR_OK) break;
    46f0:	2800      	cmp	r0, #0
    46f2:	d158      	bne.n	47a6 <dir_register+0x2b2>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    46f4:	69e6      	ldr	r6, [r4, #28]
    46f6:	6960      	ldr	r0, [r4, #20]
    46f8:	4643      	mov	r3, r8
    46fa:	466a      	mov	r2, sp
    46fc:	70d3      	strb	r3, [r2, #3]
    46fe:	78d3      	ldrb	r3, [r2, #3]
    4700:	4699      	mov	r9, r3
	dir[LDIR_Chksum] = sum;			/* Set check sum */
    4702:	7913      	ldrb	r3, [r2, #4]
    4704:	7343      	strb	r3, [r0, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    4706:	230f      	movs	r3, #15
    4708:	72c3      	strb	r3, [r0, #11]
	dir[LDIR_Type] = 0;
    470a:	2300      	movs	r3, #0
    470c:	7303      	strb	r3, [r0, #12]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    470e:	7683      	strb	r3, [r0, #26]
    4710:	76c3      	strb	r3, [r0, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    4712:	464b      	mov	r3, r9
    4714:	3b01      	subs	r3, #1
    4716:	005a      	lsls	r2, r3, #1
    4718:	18d2      	adds	r2, r2, r3
    471a:	0092      	lsls	r2, r2, #2
    471c:	18d2      	adds	r2, r2, r3
    471e:	492c      	ldr	r1, [pc, #176]	; (47d0 <dir_register+0x2dc>)
    4720:	000d      	movs	r5, r1
    4722:	350d      	adds	r5, #13
	s = wc = 0;
    4724:	2300      	movs	r3, #0
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4726:	4f29      	ldr	r7, [pc, #164]	; (47cc <dir_register+0x2d8>)
    4728:	46b3      	mov	fp, r6
    472a:	46a4      	mov	ip, r4
    472c:	e029      	b.n	4782 <dir_register+0x28e>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    472e:	2307      	movs	r3, #7
    4730:	4698      	mov	r8, r3
    4732:	e758      	b.n	45e6 <dir_register+0xf2>
	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    4734:	2b01      	cmp	r3, #1
    4736:	d8aa      	bhi.n	468e <dir_register+0x19a>
		res = move_window(dj->fs, dj->sect);
    4738:	6921      	ldr	r1, [r4, #16]
    473a:	6820      	ldr	r0, [r4, #0]
    473c:	4b20      	ldr	r3, [pc, #128]	; (47c0 <dir_register+0x2cc>)
    473e:	4798      	blx	r3
    4740:	4680      	mov	r8, r0
		if (res == FR_OK) {
    4742:	2800      	cmp	r0, #0
    4744:	d000      	beq.n	4748 <dir_register+0x254>
    4746:	e74e      	b.n	45e6 <dir_register+0xf2>
			dir = dj->dir;
    4748:	6965      	ldr	r5, [r4, #20]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    474a:	2220      	movs	r2, #32
    474c:	2100      	movs	r1, #0
    474e:	0028      	movs	r0, r5
    4750:	4b20      	ldr	r3, [pc, #128]	; (47d4 <dir_register+0x2e0>)
    4752:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    4754:	220b      	movs	r2, #11
    4756:	69a1      	ldr	r1, [r4, #24]
    4758:	0028      	movs	r0, r5
    475a:	4b15      	ldr	r3, [pc, #84]	; (47b0 <dir_register+0x2bc>)
    475c:	4798      	blx	r3
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    475e:	69a3      	ldr	r3, [r4, #24]
    4760:	7ada      	ldrb	r2, [r3, #11]
    4762:	2318      	movs	r3, #24
    4764:	4013      	ands	r3, r2
    4766:	732b      	strb	r3, [r5, #12]
			dj->fs->wflag = 1;
    4768:	6823      	ldr	r3, [r4, #0]
    476a:	2201      	movs	r2, #1
    476c:	711a      	strb	r2, [r3, #4]
    476e:	e73a      	b.n	45e6 <dir_register+0xf2>
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    4770:	780c      	ldrb	r4, [r1, #0]
    4772:	26ff      	movs	r6, #255	; 0xff
    4774:	5506      	strb	r6, [r0, r4]
    4776:	1904      	adds	r4, r0, r4
    4778:	26ff      	movs	r6, #255	; 0xff
    477a:	7066      	strb	r6, [r4, #1]
    477c:	3101      	adds	r1, #1
	} while (++s < 13);
    477e:	42a9      	cmp	r1, r5
    4780:	d094      	beq.n	46ac <dir_register+0x1b8>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    4782:	42bb      	cmp	r3, r7
    4784:	d0f4      	beq.n	4770 <dir_register+0x27c>
    4786:	1c54      	adds	r4, r2, #1
    4788:	0052      	lsls	r2, r2, #1
    478a:	465b      	mov	r3, fp
    478c:	5ad3      	ldrh	r3, [r2, r3]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    478e:	780a      	ldrb	r2, [r1, #0]
    4790:	5483      	strb	r3, [r0, r2]
    4792:	1882      	adds	r2, r0, r2
    4794:	0a1e      	lsrs	r6, r3, #8
    4796:	7056      	strb	r6, [r2, #1]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    4798:	2b00      	cmp	r3, #0
    479a:	d185      	bne.n	46a8 <dir_register+0x1b4>
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    479c:	0022      	movs	r2, r4
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    479e:	003b      	movs	r3, r7
    47a0:	e7ec      	b.n	477c <dir_register+0x288>
    47a2:	4680      	mov	r8, r0
    47a4:	e71f      	b.n	45e6 <dir_register+0xf2>
    47a6:	4680      	mov	r8, r0
    47a8:	e71d      	b.n	45e6 <dir_register+0xf2>
    47aa:	4680      	mov	r8, r0
    47ac:	e71b      	b.n	45e6 <dir_register+0xf2>
    47ae:	46c0      	nop			; (mov r8, r8)
    47b0:	000038a1 	.word	0x000038a1
    47b4:	0000435d 	.word	0x0000435d
    47b8:	00005cf9 	.word	0x00005cf9
    47bc:	00003f1d 	.word	0x00003f1d
    47c0:	00003d81 	.word	0x00003d81
    47c4:	00004239 	.word	0x00004239
    47c8:	000038df 	.word	0x000038df
    47cc:	0000ffff 	.word	0x0000ffff
    47d0:	00006d8c 	.word	0x00006d8c
    47d4:	000038b5 	.word	0x000038b5

000047d8 <sync>:
{
    47d8:	b570      	push	{r4, r5, r6, lr}
    47da:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    47dc:	2100      	movs	r1, #0
    47de:	4b2c      	ldr	r3, [pc, #176]	; (4890 <sync+0xb8>)
    47e0:	4798      	blx	r3
	if (res == FR_OK) {
    47e2:	2800      	cmp	r0, #0
    47e4:	d10a      	bne.n	47fc <sync+0x24>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    47e6:	7823      	ldrb	r3, [r4, #0]
    47e8:	2b03      	cmp	r3, #3
    47ea:	d008      	beq.n	47fe <sync+0x26>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    47ec:	7860      	ldrb	r0, [r4, #1]
    47ee:	2200      	movs	r2, #0
    47f0:	2100      	movs	r1, #0
    47f2:	4b28      	ldr	r3, [pc, #160]	; (4894 <sync+0xbc>)
    47f4:	4798      	blx	r3
    47f6:	1e43      	subs	r3, r0, #1
    47f8:	4198      	sbcs	r0, r3
	res = move_window(fs, 0);
    47fa:	b2c0      	uxtb	r0, r0
}
    47fc:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    47fe:	7963      	ldrb	r3, [r4, #5]
    4800:	2b00      	cmp	r3, #0
    4802:	d0f3      	beq.n	47ec <sync+0x14>
			fs->winsect = 0;
    4804:	2600      	movs	r6, #0
    4806:	62e6      	str	r6, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
    4808:	0025      	movs	r5, r4
    480a:	3530      	adds	r5, #48	; 0x30
    480c:	2280      	movs	r2, #128	; 0x80
    480e:	0092      	lsls	r2, r2, #2
    4810:	2100      	movs	r1, #0
    4812:	0028      	movs	r0, r5
    4814:	4b20      	ldr	r3, [pc, #128]	; (4898 <sync+0xc0>)
    4816:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    4818:	2255      	movs	r2, #85	; 0x55
    481a:	4b20      	ldr	r3, [pc, #128]	; (489c <sync+0xc4>)
    481c:	54e2      	strb	r2, [r4, r3]
    481e:	3255      	adds	r2, #85	; 0x55
    4820:	4b1f      	ldr	r3, [pc, #124]	; (48a0 <sync+0xc8>)
    4822:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    4824:	3bde      	subs	r3, #222	; 0xde
    4826:	3bff      	subs	r3, #255	; 0xff
    4828:	3a7a      	subs	r2, #122	; 0x7a
    482a:	54a3      	strb	r3, [r4, r2]
    482c:	3201      	adds	r2, #1
    482e:	54a3      	strb	r3, [r4, r2]
    4830:	330f      	adds	r3, #15
    4832:	3201      	adds	r2, #1
    4834:	54a3      	strb	r3, [r4, r2]
    4836:	320f      	adds	r2, #15
    4838:	2133      	movs	r1, #51	; 0x33
    483a:	5462      	strb	r2, [r4, r1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    483c:	313f      	adds	r1, #63	; 0x3f
    483e:	2085      	movs	r0, #133	; 0x85
    4840:	0080      	lsls	r0, r0, #2
    4842:	5421      	strb	r1, [r4, r0]
    4844:	4817      	ldr	r0, [pc, #92]	; (48a4 <sync+0xcc>)
    4846:	5421      	strb	r1, [r4, r0]
    4848:	4917      	ldr	r1, [pc, #92]	; (48a8 <sync+0xd0>)
    484a:	5462      	strb	r2, [r4, r1]
    484c:	4a17      	ldr	r2, [pc, #92]	; (48ac <sync+0xd4>)
    484e:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    4850:	6923      	ldr	r3, [r4, #16]
    4852:	3201      	adds	r2, #1
    4854:	54a3      	strb	r3, [r4, r2]
    4856:	0a19      	lsrs	r1, r3, #8
    4858:	4a15      	ldr	r2, [pc, #84]	; (48b0 <sync+0xd8>)
    485a:	54a1      	strb	r1, [r4, r2]
    485c:	0c19      	lsrs	r1, r3, #16
    485e:	4a15      	ldr	r2, [pc, #84]	; (48b4 <sync+0xdc>)
    4860:	54a1      	strb	r1, [r4, r2]
    4862:	0e1b      	lsrs	r3, r3, #24
    4864:	4a14      	ldr	r2, [pc, #80]	; (48b8 <sync+0xe0>)
    4866:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    4868:	68e3      	ldr	r3, [r4, #12]
    486a:	3201      	adds	r2, #1
    486c:	54a3      	strb	r3, [r4, r2]
    486e:	0a19      	lsrs	r1, r3, #8
    4870:	4a12      	ldr	r2, [pc, #72]	; (48bc <sync+0xe4>)
    4872:	54a1      	strb	r1, [r4, r2]
    4874:	0c19      	lsrs	r1, r3, #16
    4876:	4a12      	ldr	r2, [pc, #72]	; (48c0 <sync+0xe8>)
    4878:	54a1      	strb	r1, [r4, r2]
    487a:	0e1b      	lsrs	r3, r3, #24
    487c:	4a11      	ldr	r2, [pc, #68]	; (48c4 <sync+0xec>)
    487e:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    4880:	7860      	ldrb	r0, [r4, #1]
    4882:	2301      	movs	r3, #1
    4884:	6962      	ldr	r2, [r4, #20]
    4886:	0029      	movs	r1, r5
    4888:	4d0f      	ldr	r5, [pc, #60]	; (48c8 <sync+0xf0>)
    488a:	47a8      	blx	r5
			fs->fsi_flag = 0;
    488c:	7166      	strb	r6, [r4, #5]
    488e:	e7ad      	b.n	47ec <sync+0x14>
    4890:	00003d81 	.word	0x00003d81
    4894:	000037e5 	.word	0x000037e5
    4898:	000038b5 	.word	0x000038b5
    489c:	0000022e 	.word	0x0000022e
    48a0:	0000022f 	.word	0x0000022f
    48a4:	00000215 	.word	0x00000215
    48a8:	00000216 	.word	0x00000216
    48ac:	00000217 	.word	0x00000217
    48b0:	00000219 	.word	0x00000219
    48b4:	0000021a 	.word	0x0000021a
    48b8:	0000021b 	.word	0x0000021b
    48bc:	0000021d 	.word	0x0000021d
    48c0:	0000021e 	.word	0x0000021e
    48c4:	0000021f 	.word	0x0000021f
    48c8:	00003761 	.word	0x00003761

000048cc <follow_path>:
{
    48cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    48ce:	46de      	mov	lr, fp
    48d0:	4657      	mov	r7, sl
    48d2:	464e      	mov	r6, r9
    48d4:	4645      	mov	r5, r8
    48d6:	b5e0      	push	{r5, r6, r7, lr}
    48d8:	b083      	sub	sp, #12
    48da:	4682      	mov	sl, r0
    48dc:	000d      	movs	r5, r1
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    48de:	780b      	ldrb	r3, [r1, #0]
    48e0:	2b2f      	cmp	r3, #47	; 0x2f
    48e2:	d00f      	beq.n	4904 <follow_path+0x38>
    48e4:	2b5c      	cmp	r3, #92	; 0x5c
    48e6:	d00d      	beq.n	4904 <follow_path+0x38>
	dj->sclust = 0;						/* Start from the root dir */
    48e8:	2300      	movs	r3, #0
    48ea:	4652      	mov	r2, sl
    48ec:	6093      	str	r3, [r2, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    48ee:	782b      	ldrb	r3, [r5, #0]
    48f0:	4657      	mov	r7, sl
    48f2:	2b1f      	cmp	r3, #31
    48f4:	d809      	bhi.n	490a <follow_path+0x3e>
		res = dir_sdi(dj, 0);
    48f6:	2100      	movs	r1, #0
    48f8:	4650      	mov	r0, sl
    48fa:	4bb2      	ldr	r3, [pc, #712]	; (4bc4 <follow_path+0x2f8>)
    48fc:	4798      	blx	r3
		dj->dir = 0;
    48fe:	2300      	movs	r3, #0
    4900:	617b      	str	r3, [r7, #20]
    4902:	e13a      	b.n	4b7a <follow_path+0x2ae>
		path++;
    4904:	3501      	adds	r5, #1
    4906:	e7ef      	b.n	48e8 <follow_path+0x1c>
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    4908:	3501      	adds	r5, #1
    490a:	7828      	ldrb	r0, [r5, #0]
    490c:	282f      	cmp	r0, #47	; 0x2f
    490e:	d0fb      	beq.n	4908 <follow_path+0x3c>
    4910:	285c      	cmp	r0, #92	; 0x5c
    4912:	d0f9      	beq.n	4908 <follow_path+0x3c>
	lfn = dj->lfn;
    4914:	69fb      	ldr	r3, [r7, #28]
    4916:	469a      	mov	sl, r3
		w = p[si++];					/* Get a character */
    4918:	b280      	uxth	r0, r0
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    491a:	281f      	cmp	r0, #31
    491c:	d800      	bhi.n	4920 <follow_path+0x54>
    491e:	e13b      	b.n	4b98 <follow_path+0x2cc>
    4920:	282f      	cmp	r0, #47	; 0x2f
    4922:	d100      	bne.n	4926 <follow_path+0x5a>
    4924:	e13b      	b.n	4b9e <follow_path+0x2d2>
    4926:	285c      	cmp	r0, #92	; 0x5c
    4928:	d100      	bne.n	492c <follow_path+0x60>
    492a:	e13b      	b.n	4ba4 <follow_path+0x2d8>
    492c:	1c6e      	adds	r6, r5, #1
    492e:	2401      	movs	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4930:	2380      	movs	r3, #128	; 0x80
    4932:	005b      	lsls	r3, r3, #1
    4934:	4698      	mov	r8, r3
    4936:	46bb      	mov	fp, r7
    4938:	002b      	movs	r3, r5
    493a:	0025      	movs	r5, r4
    493c:	0034      	movs	r4, r6
    493e:	4656      	mov	r6, sl
    4940:	4699      	mov	r9, r3
    4942:	e011      	b.n	4968 <follow_path+0x9c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    4944:	2b00      	cmp	r3, #0
    4946:	d135      	bne.n	49b4 <follow_path+0xe8>
		lfn[di++] = w;					/* Store the Unicode char */
    4948:	8030      	strh	r0, [r6, #0]
		w = p[si++];					/* Get a character */
    494a:	1c6b      	adds	r3, r5, #1
    494c:	7820      	ldrb	r0, [r4, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    494e:	281f      	cmp	r0, #31
    4950:	d91e      	bls.n	4990 <follow_path+0xc4>
    4952:	282f      	cmp	r0, #47	; 0x2f
    4954:	d100      	bne.n	4958 <follow_path+0x8c>
    4956:	e128      	b.n	4baa <follow_path+0x2de>
    4958:	285c      	cmp	r0, #92	; 0x5c
    495a:	d100      	bne.n	495e <follow_path+0x92>
    495c:	e142      	b.n	4be4 <follow_path+0x318>
    495e:	3602      	adds	r6, #2
    4960:	3401      	adds	r4, #1
		if (di >= _MAX_LFN)				/* Reject too long name */
    4962:	4543      	cmp	r3, r8
    4964:	d026      	beq.n	49b4 <follow_path+0xe8>
		w = p[si++];					/* Get a character */
    4966:	001d      	movs	r5, r3
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    4968:	2101      	movs	r1, #1
    496a:	4b97      	ldr	r3, [pc, #604]	; (4bc8 <follow_path+0x2fc>)
    496c:	4798      	blx	r3
    496e:	1e01      	subs	r1, r0, #0
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    4970:	d020      	beq.n	49b4 <follow_path+0xe8>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    4972:	287f      	cmp	r0, #127	; 0x7f
    4974:	d8e8      	bhi.n	4948 <follow_path+0x7c>
	while (*str && *str != chr) str++;
    4976:	2822      	cmp	r0, #34	; 0x22
    4978:	d100      	bne.n	497c <follow_path+0xb0>
    497a:	e0fd      	b.n	4b78 <follow_path+0x2ac>
    497c:	232a      	movs	r3, #42	; 0x2a
    497e:	4a93      	ldr	r2, [pc, #588]	; (4bcc <follow_path+0x300>)
    4980:	b29f      	uxth	r7, r3
    4982:	428f      	cmp	r7, r1
    4984:	d0de      	beq.n	4944 <follow_path+0x78>
    4986:	3201      	adds	r2, #1
    4988:	7813      	ldrb	r3, [r2, #0]
    498a:	2b00      	cmp	r3, #0
    498c:	d1f8      	bne.n	4980 <follow_path+0xb4>
    498e:	e7db      	b.n	4948 <follow_path+0x7c>
    4990:	002c      	movs	r4, r5
    4992:	465f      	mov	r7, fp
    4994:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    4996:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    4998:	2604      	movs	r6, #4
    499a:	e10b      	b.n	4bb4 <follow_path+0x2e8>
		di--;
    499c:	3c01      	subs	r4, #1
    499e:	3b02      	subs	r3, #2
	while (di) {						/* Strip trailing spaces and dots */
    49a0:	2c00      	cmp	r4, #0
    49a2:	d100      	bne.n	49a6 <follow_path+0xda>
    49a4:	e0e8      	b.n	4b78 <follow_path+0x2ac>
		w = lfn[di-1];
    49a6:	881a      	ldrh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    49a8:	2a20      	cmp	r2, #32
    49aa:	d0f7      	beq.n	499c <follow_path+0xd0>
    49ac:	2a2e      	cmp	r2, #46	; 0x2e
    49ae:	d0f5      	beq.n	499c <follow_path+0xd0>
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    49b0:	2c00      	cmp	r4, #0
    49b2:	d101      	bne.n	49b8 <follow_path+0xec>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    49b4:	2006      	movs	r0, #6
	return res;
    49b6:	e0e0      	b.n	4b7a <follow_path+0x2ae>
	lfn[di] = 0;						/* LFN is created */
    49b8:	0063      	lsls	r3, r4, #1
    49ba:	4698      	mov	r8, r3
    49bc:	2300      	movs	r3, #0
    49be:	4652      	mov	r2, sl
    49c0:	4641      	mov	r1, r8
    49c2:	5253      	strh	r3, [r2, r1]
	mem_set(dj->fn, ' ', 11);
    49c4:	220b      	movs	r2, #11
    49c6:	2120      	movs	r1, #32
    49c8:	69b8      	ldr	r0, [r7, #24]
    49ca:	4b81      	ldr	r3, [pc, #516]	; (4bd0 <follow_path+0x304>)
    49cc:	4798      	blx	r3
    49ce:	4652      	mov	r2, sl
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    49d0:	2300      	movs	r3, #0
    49d2:	e001      	b.n	49d8 <follow_path+0x10c>
    49d4:	3301      	adds	r3, #1
    49d6:	3202      	adds	r2, #2
    49d8:	8811      	ldrh	r1, [r2, #0]
    49da:	2920      	cmp	r1, #32
    49dc:	d0fa      	beq.n	49d4 <follow_path+0x108>
    49de:	292e      	cmp	r1, #46	; 0x2e
    49e0:	d0f8      	beq.n	49d4 <follow_path+0x108>
	if (si) cf |= NS_LOSS | NS_LFN;
    49e2:	2b00      	cmp	r3, #0
    49e4:	d001      	beq.n	49ea <follow_path+0x11e>
    49e6:	2203      	movs	r2, #3
    49e8:	4316      	orrs	r6, r2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    49ea:	4652      	mov	r2, sl
    49ec:	4442      	add	r2, r8
    49ee:	3a02      	subs	r2, #2
    49f0:	8812      	ldrh	r2, [r2, #0]
    49f2:	2a2e      	cmp	r2, #46	; 0x2e
    49f4:	d009      	beq.n	4a0a <follow_path+0x13e>
    49f6:	4642      	mov	r2, r8
    49f8:	3a04      	subs	r2, #4
    49fa:	4452      	add	r2, sl
    49fc:	3c01      	subs	r4, #1
    49fe:	2c00      	cmp	r4, #0
    4a00:	d003      	beq.n	4a0a <follow_path+0x13e>
    4a02:	3a02      	subs	r2, #2
    4a04:	8851      	ldrh	r1, [r2, #2]
    4a06:	292e      	cmp	r1, #46	; 0x2e
    4a08:	d1f8      	bne.n	49fc <follow_path+0x130>
		dj->fn[i++] = (BYTE)w;
    4a0a:	2208      	movs	r2, #8
    4a0c:	9201      	str	r2, [sp, #4]
    4a0e:	2200      	movs	r2, #0
    4a10:	4693      	mov	fp, r2
    4a12:	4691      	mov	r9, r2
    4a14:	46a0      	mov	r8, r4
    4a16:	e006      	b.n	4a26 <follow_path+0x15a>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4a18:	4544      	cmp	r4, r8
    4a1a:	d100      	bne.n	4a1e <follow_path+0x152>
    4a1c:	e0e6      	b.n	4bec <follow_path+0x320>
			cf |= NS_LOSS | NS_LFN; continue;
    4a1e:	2303      	movs	r3, #3
    4a20:	431e      	orrs	r6, r3
    4a22:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN char */
    4a24:	0023      	movs	r3, r4
    4a26:	1c5c      	adds	r4, r3, #1
    4a28:	005b      	lsls	r3, r3, #1
    4a2a:	4652      	mov	r2, sl
    4a2c:	5a98      	ldrh	r0, [r3, r2]
		if (!w) break;					/* Break on end of the LFN */
    4a2e:	2800      	cmp	r0, #0
    4a30:	d02c      	beq.n	4a8c <follow_path+0x1c0>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    4a32:	2820      	cmp	r0, #32
    4a34:	d0f3      	beq.n	4a1e <follow_path+0x152>
    4a36:	282e      	cmp	r0, #46	; 0x2e
    4a38:	d0ee      	beq.n	4a18 <follow_path+0x14c>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
    4a3a:	9b01      	ldr	r3, [sp, #4]
    4a3c:	459b      	cmp	fp, r3
    4a3e:	d219      	bcs.n	4a74 <follow_path+0x1a8>
    4a40:	4544      	cmp	r4, r8
    4a42:	d100      	bne.n	4a46 <follow_path+0x17a>
    4a44:	e0d2      	b.n	4bec <follow_path+0x320>
		if (w >= 0x80) {				/* Non ASCII char */
    4a46:	287f      	cmp	r0, #127	; 0x7f
    4a48:	d85e      	bhi.n	4b08 <follow_path+0x23c>
	while (*str && *str != chr) str++;
    4a4a:	282b      	cmp	r0, #43	; 0x2b
    4a4c:	d06e      	beq.n	4b2c <follow_path+0x260>
    4a4e:	232c      	movs	r3, #44	; 0x2c
    4a50:	4a60      	ldr	r2, [pc, #384]	; (4bd4 <follow_path+0x308>)
    4a52:	b299      	uxth	r1, r3
    4a54:	4281      	cmp	r1, r0
    4a56:	d067      	beq.n	4b28 <follow_path+0x25c>
    4a58:	3201      	adds	r2, #1
    4a5a:	7813      	ldrb	r3, [r2, #0]
    4a5c:	2b00      	cmp	r3, #0
    4a5e:	d1f8      	bne.n	4a52 <follow_path+0x186>
				if (IsUpper(w)) {		/* ASCII large capital */
    4a60:	0003      	movs	r3, r0
    4a62:	3b41      	subs	r3, #65	; 0x41
    4a64:	b29b      	uxth	r3, r3
    4a66:	2b19      	cmp	r3, #25
    4a68:	d86c      	bhi.n	4b44 <follow_path+0x278>
					b |= 2;
    4a6a:	2302      	movs	r3, #2
    4a6c:	464a      	mov	r2, r9
    4a6e:	431a      	orrs	r2, r3
    4a70:	4691      	mov	r9, r2
    4a72:	e05f      	b.n	4b34 <follow_path+0x268>
			if (ni == 11) {				/* Long extension */
    4a74:	9b01      	ldr	r3, [sp, #4]
    4a76:	2b0b      	cmp	r3, #11
    4a78:	d03b      	beq.n	4af2 <follow_path+0x226>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    4a7a:	4544      	cmp	r4, r8
    4a7c:	d100      	bne.n	4a80 <follow_path+0x1b4>
    4a7e:	e0b9      	b.n	4bf4 <follow_path+0x328>
    4a80:	2303      	movs	r3, #3
    4a82:	431e      	orrs	r6, r3
    4a84:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
    4a86:	4544      	cmp	r4, r8
    4a88:	d800      	bhi.n	4a8c <follow_path+0x1c0>
    4a8a:	e0b3      	b.n	4bf4 <follow_path+0x328>
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    4a8c:	69bb      	ldr	r3, [r7, #24]
    4a8e:	781a      	ldrb	r2, [r3, #0]
    4a90:	2ae5      	cmp	r2, #229	; 0xe5
    4a92:	d036      	beq.n	4b02 <follow_path+0x236>
	if (ni == 8) b <<= 2;
    4a94:	9b01      	ldr	r3, [sp, #4]
    4a96:	2b08      	cmp	r3, #8
    4a98:	d060      	beq.n	4b5c <follow_path+0x290>
    4a9a:	230c      	movs	r3, #12
    4a9c:	464a      	mov	r2, r9
    4a9e:	4013      	ands	r3, r2
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    4aa0:	2b0c      	cmp	r3, #12
    4aa2:	d060      	beq.n	4b66 <follow_path+0x29a>
    4aa4:	43d2      	mvns	r2, r2
    4aa6:	0792      	lsls	r2, r2, #30
    4aa8:	d05d      	beq.n	4b66 <follow_path+0x29a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    4aaa:	07b2      	lsls	r2, r6, #30
    4aac:	d406      	bmi.n	4abc <follow_path+0x1f0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    4aae:	2203      	movs	r2, #3
    4ab0:	4649      	mov	r1, r9
    4ab2:	400a      	ands	r2, r1
    4ab4:	2a01      	cmp	r2, #1
    4ab6:	d059      	beq.n	4b6c <follow_path+0x2a0>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    4ab8:	2b04      	cmp	r3, #4
    4aba:	d05a      	beq.n	4b72 <follow_path+0x2a6>
	dj->fn[NS] = cf;	/* SFN is created */
    4abc:	69bb      	ldr	r3, [r7, #24]
    4abe:	72de      	strb	r6, [r3, #11]
			res = dir_find(dj);				/* Find it */
    4ac0:	0038      	movs	r0, r7
    4ac2:	4b45      	ldr	r3, [pc, #276]	; (4bd8 <follow_path+0x30c>)
    4ac4:	4798      	blx	r3
			ns = *(dj->fn+NS);
    4ac6:	69bb      	ldr	r3, [r7, #24]
    4ac8:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    4aca:	2800      	cmp	r0, #0
    4acc:	d15c      	bne.n	4b88 <follow_path+0x2bc>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    4ace:	075b      	lsls	r3, r3, #29
    4ad0:	d453      	bmi.n	4b7a <follow_path+0x2ae>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    4ad2:	697a      	ldr	r2, [r7, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    4ad4:	7ad3      	ldrb	r3, [r2, #11]
    4ad6:	06db      	lsls	r3, r3, #27
    4ad8:	d55c      	bpl.n	4b94 <follow_path+0x2c8>
			dj->sclust = LD_CLUST(dir);
    4ada:	7d51      	ldrb	r1, [r2, #21]
    4adc:	0209      	lsls	r1, r1, #8
    4ade:	7d13      	ldrb	r3, [r2, #20]
    4ae0:	430b      	orrs	r3, r1
    4ae2:	041b      	lsls	r3, r3, #16
    4ae4:	7ed1      	ldrb	r1, [r2, #27]
    4ae6:	0209      	lsls	r1, r1, #8
    4ae8:	7e92      	ldrb	r2, [r2, #26]
    4aea:	430a      	orrs	r2, r1
    4aec:	4313      	orrs	r3, r2
    4aee:	60bb      	str	r3, [r7, #8]
			res = create_name(dj, &path);	/* Get a segment */
    4af0:	e70b      	b.n	490a <follow_path+0x3e>
				cf |= NS_LOSS | NS_LFN; break;
    4af2:	2303      	movs	r3, #3
    4af4:	431e      	orrs	r6, r3
	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    4af6:	69bb      	ldr	r3, [r7, #24]
    4af8:	781a      	ldrb	r2, [r3, #0]
    4afa:	2ae5      	cmp	r2, #229	; 0xe5
    4afc:	d1cd      	bne.n	4a9a <follow_path+0x1ce>
    4afe:	220b      	movs	r2, #11
    4b00:	9201      	str	r2, [sp, #4]
    4b02:	2205      	movs	r2, #5
    4b04:	701a      	strb	r2, [r3, #0]
    4b06:	e7c5      	b.n	4a94 <follow_path+0x1c8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    4b08:	2100      	movs	r1, #0
    4b0a:	4b2f      	ldr	r3, [pc, #188]	; (4bc8 <follow_path+0x2fc>)
    4b0c:	4798      	blx	r3
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    4b0e:	2800      	cmp	r0, #0
    4b10:	d100      	bne.n	4b14 <follow_path+0x248>
    4b12:	e079      	b.n	4c08 <follow_path+0x33c>
    4b14:	4b31      	ldr	r3, [pc, #196]	; (4bdc <follow_path+0x310>)
    4b16:	469c      	mov	ip, r3
    4b18:	4460      	add	r0, ip
    4b1a:	3880      	subs	r0, #128	; 0x80
    4b1c:	7800      	ldrb	r0, [r0, #0]
			cf |= NS_LFN;				/* Force create LFN entry */
    4b1e:	2302      	movs	r3, #2
    4b20:	431e      	orrs	r6, r3
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    4b22:	2800      	cmp	r0, #0
    4b24:	d002      	beq.n	4b2c <follow_path+0x260>
    4b26:	e790      	b.n	4a4a <follow_path+0x17e>
    4b28:	2b00      	cmp	r3, #0
    4b2a:	d099      	beq.n	4a60 <follow_path+0x194>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    4b2c:	2303      	movs	r3, #3
    4b2e:	431e      	orrs	r6, r3
    4b30:	b2f6      	uxtb	r6, r6
    4b32:	205f      	movs	r0, #95	; 0x5f
		dj->fn[i++] = (BYTE)w;
    4b34:	69bb      	ldr	r3, [r7, #24]
    4b36:	465a      	mov	r2, fp
    4b38:	5498      	strb	r0, [r3, r2]
		w = lfn[si++];					/* Get an LFN char */
    4b3a:	0023      	movs	r3, r4
		dj->fn[i++] = (BYTE)w;
    4b3c:	2201      	movs	r2, #1
    4b3e:	4694      	mov	ip, r2
    4b40:	44e3      	add	fp, ip
    4b42:	e770      	b.n	4a26 <follow_path+0x15a>
					if (IsLower(w)) {	/* ASCII small capital */
    4b44:	0003      	movs	r3, r0
    4b46:	3b61      	subs	r3, #97	; 0x61
    4b48:	b29b      	uxth	r3, r3
    4b4a:	2b19      	cmp	r3, #25
    4b4c:	d8f2      	bhi.n	4b34 <follow_path+0x268>
						b |= 1; w -= 0x20;
    4b4e:	2301      	movs	r3, #1
    4b50:	464a      	mov	r2, r9
    4b52:	431a      	orrs	r2, r3
    4b54:	4691      	mov	r9, r2
    4b56:	3820      	subs	r0, #32
    4b58:	b280      	uxth	r0, r0
    4b5a:	e7eb      	b.n	4b34 <follow_path+0x268>
	if (ni == 8) b <<= 2;
    4b5c:	464b      	mov	r3, r9
    4b5e:	009b      	lsls	r3, r3, #2
    4b60:	b2db      	uxtb	r3, r3
    4b62:	4699      	mov	r9, r3
    4b64:	e799      	b.n	4a9a <follow_path+0x1ce>
		cf |= NS_LFN;
    4b66:	2202      	movs	r2, #2
    4b68:	4316      	orrs	r6, r2
    4b6a:	e79e      	b.n	4aaa <follow_path+0x1de>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    4b6c:	320f      	adds	r2, #15
    4b6e:	4316      	orrs	r6, r2
    4b70:	e7a2      	b.n	4ab8 <follow_path+0x1ec>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    4b72:	3304      	adds	r3, #4
    4b74:	431e      	orrs	r6, r3
    4b76:	e7a1      	b.n	4abc <follow_path+0x1f0>
    4b78:	2006      	movs	r0, #6
}
    4b7a:	b003      	add	sp, #12
    4b7c:	bc3c      	pop	{r2, r3, r4, r5}
    4b7e:	4690      	mov	r8, r2
    4b80:	4699      	mov	r9, r3
    4b82:	46a2      	mov	sl, r4
    4b84:	46ab      	mov	fp, r5
    4b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    4b88:	2804      	cmp	r0, #4
    4b8a:	d1f6      	bne.n	4b7a <follow_path+0x2ae>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    4b8c:	075b      	lsls	r3, r3, #29
    4b8e:	d4f4      	bmi.n	4b7a <follow_path+0x2ae>
    4b90:	3001      	adds	r0, #1
    4b92:	e7f2      	b.n	4b7a <follow_path+0x2ae>
				res = FR_NO_PATH; break;
    4b94:	2005      	movs	r0, #5
    4b96:	e7f0      	b.n	4b7a <follow_path+0x2ae>
		w = p[si++];					/* Get a character */
    4b98:	2301      	movs	r3, #1
	si = di = 0;
    4b9a:	2400      	movs	r4, #0
    4b9c:	e6fb      	b.n	4996 <follow_path+0xca>
		w = p[si++];					/* Get a character */
    4b9e:	2301      	movs	r3, #1
	si = di = 0;
    4ba0:	2400      	movs	r4, #0
    4ba2:	e005      	b.n	4bb0 <follow_path+0x2e4>
		w = p[si++];					/* Get a character */
    4ba4:	2301      	movs	r3, #1
	si = di = 0;
    4ba6:	2400      	movs	r4, #0
    4ba8:	e002      	b.n	4bb0 <follow_path+0x2e4>
    4baa:	002c      	movs	r4, r5
    4bac:	465f      	mov	r7, fp
    4bae:	464d      	mov	r5, r9
	*path = &p[si];						/* Return pointer to the next segment */
    4bb0:	18ed      	adds	r5, r5, r3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    4bb2:	2600      	movs	r6, #0
	while (di) {						/* Strip trailing spaces and dots */
    4bb4:	2c00      	cmp	r4, #0
    4bb6:	d0df      	beq.n	4b78 <follow_path+0x2ac>
    4bb8:	4b09      	ldr	r3, [pc, #36]	; (4be0 <follow_path+0x314>)
    4bba:	18e3      	adds	r3, r4, r3
    4bbc:	005b      	lsls	r3, r3, #1
    4bbe:	4453      	add	r3, sl
    4bc0:	e6f1      	b.n	49a6 <follow_path+0xda>
    4bc2:	46c0      	nop			; (mov r8, r8)
    4bc4:	00003f1d 	.word	0x00003f1d
    4bc8:	0000548d 	.word	0x0000548d
    4bcc:	00006e1d 	.word	0x00006e1d
    4bd0:	000038b5 	.word	0x000038b5
    4bd4:	00006e29 	.word	0x00006e29
    4bd8:	0000435d 	.word	0x0000435d
    4bdc:	00006d9c 	.word	0x00006d9c
    4be0:	7fffffff 	.word	0x7fffffff
    4be4:	002c      	movs	r4, r5
    4be6:	465f      	mov	r7, fp
    4be8:	464d      	mov	r5, r9
    4bea:	e7e1      	b.n	4bb0 <follow_path+0x2e4>
			if (ni == 11) {				/* Long extension */
    4bec:	9b01      	ldr	r3, [sp, #4]
    4bee:	2b0b      	cmp	r3, #11
    4bf0:	d100      	bne.n	4bf4 <follow_path+0x328>
    4bf2:	e77e      	b.n	4af2 <follow_path+0x226>
			b <<= 2; continue;
    4bf4:	464b      	mov	r3, r9
    4bf6:	009b      	lsls	r3, r3, #2
    4bf8:	b2db      	uxtb	r3, r3
    4bfa:	4699      	mov	r9, r3
    4bfc:	4643      	mov	r3, r8
			si = di; i = 8; ni = 11;	/* Enter extension section */
    4bfe:	220b      	movs	r2, #11
    4c00:	9201      	str	r2, [sp, #4]
    4c02:	3a03      	subs	r2, #3
    4c04:	4693      	mov	fp, r2
    4c06:	e70e      	b.n	4a26 <follow_path+0x15a>
			cf |= NS_LFN;				/* Force create LFN entry */
    4c08:	2302      	movs	r3, #2
    4c0a:	431e      	orrs	r6, r3
    4c0c:	e78e      	b.n	4b2c <follow_path+0x260>
    4c0e:	46c0      	nop			; (mov r8, r8)

00004c10 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    4c10:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    4c12:	2807      	cmp	r0, #7
    4c14:	d901      	bls.n	4c1a <f_mount+0xa>
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */

	return FR_OK;
}
    4c16:	0018      	movs	r0, r3
    4c18:	4770      	bx	lr
	rfs = FatFs[vol];			/* Get current fs object */
    4c1a:	0083      	lsls	r3, r0, #2
    4c1c:	4a07      	ldr	r2, [pc, #28]	; (4c3c <f_mount+0x2c>)
    4c1e:	589b      	ldr	r3, [r3, r2]
	if (rfs) {
    4c20:	2b00      	cmp	r3, #0
    4c22:	d001      	beq.n	4c28 <f_mount+0x18>
		rfs->fs_type = 0;		/* Clear old fs object */
    4c24:	2200      	movs	r2, #0
    4c26:	701a      	strb	r2, [r3, #0]
	if (fs) {
    4c28:	2900      	cmp	r1, #0
    4c2a:	d001      	beq.n	4c30 <f_mount+0x20>
		fs->fs_type = 0;		/* Clear new fs object */
    4c2c:	2300      	movs	r3, #0
    4c2e:	700b      	strb	r3, [r1, #0]
	FatFs[vol] = fs;			/* Register new fs object */
    4c30:	0080      	lsls	r0, r0, #2
    4c32:	4b02      	ldr	r3, [pc, #8]	; (4c3c <f_mount+0x2c>)
    4c34:	50c1      	str	r1, [r0, r3]
	return FR_OK;
    4c36:	2300      	movs	r3, #0
    4c38:	e7ed      	b.n	4c16 <f_mount+0x6>
    4c3a:	46c0      	nop			; (mov r8, r8)
    4c3c:	200002ec 	.word	0x200002ec

00004c40 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    4c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c42:	46c6      	mov	lr, r8
    4c44:	b500      	push	{lr}
    4c46:	4c59      	ldr	r4, [pc, #356]	; (4dac <f_open+0x16c>)
    4c48:	44a5      	add	sp, r4
    4c4a:	0005      	movs	r5, r0
    4c4c:	9101      	str	r1, [sp, #4]
    4c4e:	0017      	movs	r7, r2
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    4c50:	2300      	movs	r3, #0
    4c52:	6003      	str	r3, [r0, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    4c54:	261f      	movs	r6, #31
    4c56:	4016      	ands	r6, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    4c58:	221e      	movs	r2, #30
    4c5a:	403a      	ands	r2, r7
    4c5c:	a985      	add	r1, sp, #532	; 0x214
    4c5e:	a801      	add	r0, sp, #4
    4c60:	4b53      	ldr	r3, [pc, #332]	; (4db0 <f_open+0x170>)
    4c62:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    4c64:	ab82      	add	r3, sp, #520	; 0x208
    4c66:	938b      	str	r3, [sp, #556]	; 0x22c
    4c68:	ab02      	add	r3, sp, #8
    4c6a:	938c      	str	r3, [sp, #560]	; 0x230
	if (res == FR_OK)
    4c6c:	2800      	cmp	r0, #0
    4c6e:	d006      	beq.n	4c7e <f_open+0x3e>
		res = follow_path(&dj, path);	/* Follow the file path */
	dir = dj.dir;
    4c70:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4c72:	231c      	movs	r3, #28
    4c74:	423b      	tst	r3, r7
    4c76:	d145      	bne.n	4d04 <f_open+0xc4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    4c78:	2800      	cmp	r0, #0
    4c7a:	d13d      	bne.n	4cf8 <f_open+0xb8>
    4c7c:	e00c      	b.n	4c98 <f_open+0x58>
		res = follow_path(&dj, path);	/* Follow the file path */
    4c7e:	9901      	ldr	r1, [sp, #4]
    4c80:	a885      	add	r0, sp, #532	; 0x214
    4c82:	4b4c      	ldr	r3, [pc, #304]	; (4db4 <f_open+0x174>)
    4c84:	4798      	blx	r3
	dir = dj.dir;
    4c86:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4c88:	2800      	cmp	r0, #0
    4c8a:	d1f2      	bne.n	4c72 <f_open+0x32>
		if (!dir)	/* Current dir itself */
    4c8c:	2c00      	cmp	r4, #0
    4c8e:	d100      	bne.n	4c92 <f_open+0x52>
    4c90:	e086      	b.n	4da0 <f_open+0x160>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4c92:	231c      	movs	r3, #28
    4c94:	423b      	tst	r3, r7
    4c96:	d146      	bne.n	4d26 <f_open+0xe6>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4c98:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    4c9a:	2004      	movs	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    4c9c:	06da      	lsls	r2, r3, #27
    4c9e:	d42b      	bmi.n	4cf8 <f_open+0xb8>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4ca0:	07ba      	lsls	r2, r7, #30
    4ca2:	d502      	bpl.n	4caa <f_open+0x6a>
					res = FR_DENIED;
    4ca4:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    4ca6:	07db      	lsls	r3, r3, #31
    4ca8:	d426      	bmi.n	4cf8 <f_open+0xb8>
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    4caa:	073b      	lsls	r3, r7, #28
    4cac:	d501      	bpl.n	4cb2 <f_open+0x72>
			mode |= FA__WRITTEN;
    4cae:	2320      	movs	r3, #32
    4cb0:	431e      	orrs	r6, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    4cb2:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4cb6:	61eb      	str	r3, [r5, #28]
		fp->dir_ptr = dir;
    4cb8:	622c      	str	r4, [r5, #32]
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
    4cba:	71ae      	strb	r6, [r5, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    4cbc:	7d62      	ldrb	r2, [r4, #21]
    4cbe:	0212      	lsls	r2, r2, #8
    4cc0:	7d23      	ldrb	r3, [r4, #20]
    4cc2:	4313      	orrs	r3, r2
    4cc4:	041b      	lsls	r3, r3, #16
    4cc6:	7ee1      	ldrb	r1, [r4, #27]
    4cc8:	0209      	lsls	r1, r1, #8
    4cca:	7ea2      	ldrb	r2, [r4, #26]
    4ccc:	430a      	orrs	r2, r1
    4cce:	4313      	orrs	r3, r2
    4cd0:	612b      	str	r3, [r5, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    4cd2:	7fe3      	ldrb	r3, [r4, #31]
    4cd4:	061b      	lsls	r3, r3, #24
    4cd6:	7fa2      	ldrb	r2, [r4, #30]
    4cd8:	0412      	lsls	r2, r2, #16
    4cda:	4313      	orrs	r3, r2
    4cdc:	7f22      	ldrb	r2, [r4, #28]
    4cde:	4313      	orrs	r3, r2
    4ce0:	7f62      	ldrb	r2, [r4, #29]
    4ce2:	0212      	lsls	r2, r2, #8
    4ce4:	4313      	orrs	r3, r2
    4ce6:	60eb      	str	r3, [r5, #12]
		fp->fptr = 0;						/* File pointer */
    4ce8:	2300      	movs	r3, #0
    4cea:	60ab      	str	r3, [r5, #8]
		fp->dsect = 0;
    4cec:	61ab      	str	r3, [r5, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    4cee:	9b85      	ldr	r3, [sp, #532]	; 0x214
    4cf0:	602b      	str	r3, [r5, #0]
    4cf2:	88db      	ldrh	r3, [r3, #6]
    4cf4:	80ab      	strh	r3, [r5, #4]
    4cf6:	2000      	movs	r0, #0
	}

	LEAVE_FF(dj.fs, res);
}
    4cf8:	238e      	movs	r3, #142	; 0x8e
    4cfa:	009b      	lsls	r3, r3, #2
    4cfc:	449d      	add	sp, r3
    4cfe:	bc04      	pop	{r2}
    4d00:	4690      	mov	r8, r2
    4d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    4d04:	2804      	cmp	r0, #4
    4d06:	d005      	beq.n	4d14 <f_open+0xd4>
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4d08:	2308      	movs	r3, #8
    4d0a:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4d0c:	9c8a      	ldr	r4, [sp, #552]	; 0x228
	if (res == FR_OK) {
    4d0e:	2800      	cmp	r0, #0
    4d10:	d0d3      	beq.n	4cba <f_open+0x7a>
    4d12:	e7f1      	b.n	4cf8 <f_open+0xb8>
				res = dir_register(&dj);
    4d14:	a885      	add	r0, sp, #532	; 0x214
    4d16:	4b28      	ldr	r3, [pc, #160]	; (4db8 <f_open+0x178>)
    4d18:	4798      	blx	r3
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    4d1a:	2308      	movs	r3, #8
    4d1c:	431e      	orrs	r6, r3
			dir = dj.dir;					/* New entry */
    4d1e:	9c8a      	ldr	r4, [sp, #552]	; 0x228
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4d20:	2800      	cmp	r0, #0
    4d22:	d008      	beq.n	4d36 <f_open+0xf6>
    4d24:	e7e8      	b.n	4cf8 <f_open+0xb8>
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4d26:	7ae3      	ldrb	r3, [r4, #11]
    4d28:	2211      	movs	r2, #17
				res = FR_DENIED;
    4d2a:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4d2c:	421a      	tst	r2, r3
    4d2e:	d1e3      	bne.n	4cf8 <f_open+0xb8>
					res = FR_EXIST;
    4d30:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    4d32:	077b      	lsls	r3, r7, #29
    4d34:	d4e0      	bmi.n	4cf8 <f_open+0xb8>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    4d36:	0733      	lsls	r3, r6, #28
    4d38:	d5bb      	bpl.n	4cb2 <f_open+0x72>
			dw = get_fattime();					/* Created time */
    4d3a:	4b20      	ldr	r3, [pc, #128]	; (4dbc <f_open+0x17c>)
    4d3c:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    4d3e:	73a0      	strb	r0, [r4, #14]
    4d40:	0a03      	lsrs	r3, r0, #8
    4d42:	73e3      	strb	r3, [r4, #15]
    4d44:	0c03      	lsrs	r3, r0, #16
    4d46:	7423      	strb	r3, [r4, #16]
    4d48:	0e00      	lsrs	r0, r0, #24
    4d4a:	7460      	strb	r0, [r4, #17]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    4d4c:	2300      	movs	r3, #0
    4d4e:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    4d50:	7723      	strb	r3, [r4, #28]
    4d52:	7763      	strb	r3, [r4, #29]
    4d54:	77a3      	strb	r3, [r4, #30]
    4d56:	77e3      	strb	r3, [r4, #31]
			cl = LD_CLUST(dir);					/* Get start cluster */
    4d58:	7d62      	ldrb	r2, [r4, #21]
    4d5a:	0212      	lsls	r2, r2, #8
    4d5c:	7d27      	ldrb	r7, [r4, #20]
    4d5e:	4317      	orrs	r7, r2
    4d60:	043f      	lsls	r7, r7, #16
    4d62:	7ee1      	ldrb	r1, [r4, #27]
    4d64:	0209      	lsls	r1, r1, #8
    4d66:	7ea2      	ldrb	r2, [r4, #26]
    4d68:	430a      	orrs	r2, r1
    4d6a:	4317      	orrs	r7, r2
			ST_CLUST(dir, 0);					/* cluster = 0 */
    4d6c:	76a3      	strb	r3, [r4, #26]
    4d6e:	76e3      	strb	r3, [r4, #27]
    4d70:	7523      	strb	r3, [r4, #20]
    4d72:	7563      	strb	r3, [r4, #21]
			dj.fs->wflag = 1;
    4d74:	9885      	ldr	r0, [sp, #532]	; 0x214
    4d76:	3301      	adds	r3, #1
    4d78:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    4d7a:	2f00      	cmp	r7, #0
    4d7c:	d097      	beq.n	4cae <f_open+0x6e>
				dw = dj.fs->winsect;
    4d7e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    4d80:	4698      	mov	r8, r3
				res = remove_chain(dj.fs, cl);
    4d82:	0039      	movs	r1, r7
    4d84:	4b0e      	ldr	r3, [pc, #56]	; (4dc0 <f_open+0x180>)
    4d86:	4798      	blx	r3
				if (res == FR_OK) {
    4d88:	2800      	cmp	r0, #0
    4d8a:	d1b5      	bne.n	4cf8 <f_open+0xb8>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    4d8c:	9885      	ldr	r0, [sp, #532]	; 0x214
    4d8e:	3f01      	subs	r7, #1
    4d90:	60c7      	str	r7, [r0, #12]
					res = move_window(dj.fs, dw);
    4d92:	4641      	mov	r1, r8
    4d94:	4b0b      	ldr	r3, [pc, #44]	; (4dc4 <f_open+0x184>)
    4d96:	4798      	blx	r3
	if (res == FR_OK) {
    4d98:	2800      	cmp	r0, #0
    4d9a:	d100      	bne.n	4d9e <f_open+0x15e>
    4d9c:	e787      	b.n	4cae <f_open+0x6e>
    4d9e:	e7ab      	b.n	4cf8 <f_open+0xb8>
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4da0:	231c      	movs	r3, #28
			res = FR_INVALID_NAME;
    4da2:	2006      	movs	r0, #6
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4da4:	423b      	tst	r3, r7
    4da6:	d0b2      	beq.n	4d0e <f_open+0xce>
			res = FR_INVALID_NAME;
    4da8:	2006      	movs	r0, #6
    4daa:	e7ad      	b.n	4d08 <f_open+0xc8>
    4dac:	fffffdc8 	.word	0xfffffdc8
    4db0:	000039d1 	.word	0x000039d1
    4db4:	000048cd 	.word	0x000048cd
    4db8:	000044f5 	.word	0x000044f5
    4dbc:	00003851 	.word	0x00003851
    4dc0:	000041c1 	.word	0x000041c1
    4dc4:	00003d81 	.word	0x00003d81

00004dc8 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    4dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dca:	46de      	mov	lr, fp
    4dcc:	4657      	mov	r7, sl
    4dce:	464e      	mov	r6, r9
    4dd0:	4645      	mov	r5, r8
    4dd2:	b5e0      	push	{r5, r6, r7, lr}
    4dd4:	b083      	sub	sp, #12
    4dd6:	0004      	movs	r4, r0
    4dd8:	000f      	movs	r7, r1
    4dda:	0015      	movs	r5, r2
    4ddc:	4699      	mov	r9, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    4dde:	2300      	movs	r3, #0
    4de0:	464a      	mov	r2, r9
    4de2:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    4de4:	8881      	ldrh	r1, [r0, #4]
    4de6:	6800      	ldr	r0, [r0, #0]
    4de8:	4b5e      	ldr	r3, [pc, #376]	; (4f64 <f_read+0x19c>)
    4dea:	4798      	blx	r3
    4dec:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    4dee:	2800      	cmp	r0, #0
    4df0:	d000      	beq.n	4df4 <f_read+0x2c>
    4df2:	e0af      	b.n	4f54 <f_read+0x18c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    4df4:	79a3      	ldrb	r3, [r4, #6]
    4df6:	b25a      	sxtb	r2, r3
    4df8:	2a00      	cmp	r2, #0
    4dfa:	da00      	bge.n	4dfe <f_read+0x36>
    4dfc:	e0a8      	b.n	4f50 <f_read+0x188>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    4dfe:	07db      	lsls	r3, r3, #31
    4e00:	d402      	bmi.n	4e08 <f_read+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    4e02:	2307      	movs	r3, #7
    4e04:	9300      	str	r3, [sp, #0]
    4e06:	e0a5      	b.n	4f54 <f_read+0x18c>
	remain = fp->fsize - fp->fptr;
    4e08:	68e3      	ldr	r3, [r4, #12]
    4e0a:	68a2      	ldr	r2, [r4, #8]
    4e0c:	1a9e      	subs	r6, r3, r2
    4e0e:	42ae      	cmp	r6, r5
    4e10:	d900      	bls.n	4e14 <f_read+0x4c>
    4e12:	002e      	movs	r6, r5
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    4e14:	2e00      	cmp	r6, #0
    4e16:	d153      	bne.n	4ec0 <f_read+0xf8>
    4e18:	e09c      	b.n	4f54 <f_read+0x18c>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    4e1a:	6961      	ldr	r1, [r4, #20]
    4e1c:	4b52      	ldr	r3, [pc, #328]	; (4f68 <f_read+0x1a0>)
    4e1e:	4798      	blx	r3
    4e20:	e05c      	b.n	4edc <f_read+0x114>
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    4e22:	79a2      	ldrb	r2, [r4, #6]
    4e24:	2380      	movs	r3, #128	; 0x80
    4e26:	425b      	negs	r3, r3
    4e28:	4313      	orrs	r3, r2
    4e2a:	71a3      	strb	r3, [r4, #6]
    4e2c:	2302      	movs	r3, #2
    4e2e:	9300      	str	r3, [sp, #0]
    4e30:	e090      	b.n	4f54 <f_read+0x18c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    4e32:	79a2      	ldrb	r2, [r4, #6]
    4e34:	2380      	movs	r3, #128	; 0x80
    4e36:	425b      	negs	r3, r3
    4e38:	4313      	orrs	r3, r2
    4e3a:	71a3      	strb	r3, [r4, #6]
    4e3c:	2301      	movs	r3, #1
    4e3e:	9300      	str	r3, [sp, #0]
    4e40:	e088      	b.n	4f54 <f_read+0x18c>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    4e42:	79a2      	ldrb	r2, [r4, #6]
    4e44:	2380      	movs	r3, #128	; 0x80
    4e46:	425b      	negs	r3, r3
    4e48:	4313      	orrs	r3, r2
    4e4a:	71a3      	strb	r3, [r4, #6]
    4e4c:	2302      	movs	r3, #2
    4e4e:	9300      	str	r3, [sp, #0]
    4e50:	e080      	b.n	4f54 <f_read+0x18c>
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
			if (cc) {							/* Read maximum contiguous sectors directly */
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
					cc = fp->fs->csize - csect;
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
    4e52:	79a2      	ldrb	r2, [r4, #6]
    4e54:	2380      	movs	r3, #128	; 0x80
    4e56:	425b      	negs	r3, r3
    4e58:	4313      	orrs	r3, r2
    4e5a:	71a3      	strb	r3, [r4, #6]
    4e5c:	2301      	movs	r3, #1
    4e5e:	9300      	str	r3, [sp, #0]
    4e60:	e078      	b.n	4f54 <f_read+0x18c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    4e62:	3130      	adds	r1, #48	; 0x30
    4e64:	0240      	lsls	r0, r0, #9
    4e66:	1838      	adds	r0, r7, r0
    4e68:	2280      	movs	r2, #128	; 0x80
    4e6a:	0092      	lsls	r2, r2, #2
    4e6c:	4b3f      	ldr	r3, [pc, #252]	; (4f6c <f_read+0x1a4>)
    4e6e:	4798      	blx	r3
    4e70:	e063      	b.n	4f3a <f_read+0x172>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    4e72:	4643      	mov	r3, r8
    4e74:	61a3      	str	r3, [r4, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    4e76:	68a3      	ldr	r3, [r4, #8]
    4e78:	05dd      	lsls	r5, r3, #23
    4e7a:	0ded      	lsrs	r5, r5, #23
    4e7c:	2380      	movs	r3, #128	; 0x80
    4e7e:	009b      	lsls	r3, r3, #2
    4e80:	1b5d      	subs	r5, r3, r5
    4e82:	42b5      	cmp	r5, r6
    4e84:	d900      	bls.n	4e88 <f_read+0xc0>
    4e86:	0035      	movs	r5, r6
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    4e88:	69a1      	ldr	r1, [r4, #24]
    4e8a:	6820      	ldr	r0, [r4, #0]
    4e8c:	4b38      	ldr	r3, [pc, #224]	; (4f70 <f_read+0x1a8>)
    4e8e:	4798      	blx	r3
    4e90:	2800      	cmp	r0, #0
    4e92:	d155      	bne.n	4f40 <f_read+0x178>
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    4e94:	68a3      	ldr	r3, [r4, #8]
    4e96:	05d9      	lsls	r1, r3, #23
    4e98:	0dc9      	lsrs	r1, r1, #23
    4e9a:	3130      	adds	r1, #48	; 0x30
    4e9c:	6823      	ldr	r3, [r4, #0]
    4e9e:	469c      	mov	ip, r3
    4ea0:	4461      	add	r1, ip
    4ea2:	002a      	movs	r2, r5
    4ea4:	0038      	movs	r0, r7
    4ea6:	4b31      	ldr	r3, [pc, #196]	; (4f6c <f_read+0x1a4>)
    4ea8:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    4eaa:	197f      	adds	r7, r7, r5
    4eac:	68a3      	ldr	r3, [r4, #8]
    4eae:	195b      	adds	r3, r3, r5
    4eb0:	60a3      	str	r3, [r4, #8]
    4eb2:	464b      	mov	r3, r9
    4eb4:	681b      	ldr	r3, [r3, #0]
    4eb6:	195b      	adds	r3, r3, r5
    4eb8:	464a      	mov	r2, r9
    4eba:	6013      	str	r3, [r2, #0]
    4ebc:	1b76      	subs	r6, r6, r5
	for ( ;  btr;								/* Repeat until all data read */
    4ebe:	d049      	beq.n	4f54 <f_read+0x18c>
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    4ec0:	68a3      	ldr	r3, [r4, #8]
    4ec2:	05da      	lsls	r2, r3, #23
    4ec4:	d1d7      	bne.n	4e76 <f_read+0xae>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    4ec6:	6820      	ldr	r0, [r4, #0]
    4ec8:	7882      	ldrb	r2, [r0, #2]
    4eca:	3a01      	subs	r2, #1
    4ecc:	0a5d      	lsrs	r5, r3, #9
    4ece:	4015      	ands	r5, r2
    4ed0:	b2ed      	uxtb	r5, r5
			if (!csect) {						/* On the cluster boundary? */
    4ed2:	2d00      	cmp	r5, #0
    4ed4:	d107      	bne.n	4ee6 <f_read+0x11e>
				if (fp->fptr == 0) {			/* On the top of the file? */
    4ed6:	2b00      	cmp	r3, #0
    4ed8:	d19f      	bne.n	4e1a <f_read+0x52>
					clst = fp->sclust;			/* Follow from the origin */
    4eda:	6920      	ldr	r0, [r4, #16]
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    4edc:	2801      	cmp	r0, #1
    4ede:	d9a0      	bls.n	4e22 <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    4ee0:	1c43      	adds	r3, r0, #1
    4ee2:	d0a6      	beq.n	4e32 <f_read+0x6a>
				fp->clust = clst;				/* Update current cluster */
    4ee4:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    4ee6:	6823      	ldr	r3, [r4, #0]
    4ee8:	469a      	mov	sl, r3
    4eea:	6961      	ldr	r1, [r4, #20]
    4eec:	0018      	movs	r0, r3
    4eee:	4b21      	ldr	r3, [pc, #132]	; (4f74 <f_read+0x1ac>)
    4ef0:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    4ef2:	2800      	cmp	r0, #0
    4ef4:	d0a5      	beq.n	4e42 <f_read+0x7a>
			sect += csect;
    4ef6:	4680      	mov	r8, r0
    4ef8:	44a8      	add	r8, r5
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    4efa:	0a73      	lsrs	r3, r6, #9
    4efc:	469b      	mov	fp, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
    4efe:	d0b8      	beq.n	4e72 <f_read+0xaa>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    4f00:	4653      	mov	r3, sl
    4f02:	789b      	ldrb	r3, [r3, #2]
    4f04:	465a      	mov	r2, fp
    4f06:	18aa      	adds	r2, r5, r2
    4f08:	429a      	cmp	r2, r3
    4f0a:	d901      	bls.n	4f10 <f_read+0x148>
					cc = fp->fs->csize - csect;
    4f0c:	1b5b      	subs	r3, r3, r5
    4f0e:	469b      	mov	fp, r3
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    4f10:	465b      	mov	r3, fp
    4f12:	466a      	mov	r2, sp
    4f14:	71d3      	strb	r3, [r2, #7]
    4f16:	79d3      	ldrb	r3, [r2, #7]
    4f18:	4652      	mov	r2, sl
    4f1a:	7850      	ldrb	r0, [r2, #1]
    4f1c:	4642      	mov	r2, r8
    4f1e:	0039      	movs	r1, r7
    4f20:	4d15      	ldr	r5, [pc, #84]	; (4f78 <f_read+0x1b0>)
    4f22:	47a8      	blx	r5
    4f24:	2800      	cmp	r0, #0
    4f26:	d194      	bne.n	4e52 <f_read+0x8a>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    4f28:	6821      	ldr	r1, [r4, #0]
    4f2a:	790b      	ldrb	r3, [r1, #4]
    4f2c:	2b00      	cmp	r3, #0
    4f2e:	d004      	beq.n	4f3a <f_read+0x172>
    4f30:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    4f32:	4642      	mov	r2, r8
    4f34:	1a98      	subs	r0, r3, r2
    4f36:	4583      	cmp	fp, r0
    4f38:	d893      	bhi.n	4e62 <f_read+0x9a>
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    4f3a:	465b      	mov	r3, fp
    4f3c:	025d      	lsls	r5, r3, #9
				continue;
    4f3e:	e7b4      	b.n	4eaa <f_read+0xe2>
			ABORT(fp->fs, FR_DISK_ERR);
    4f40:	79a2      	ldrb	r2, [r4, #6]
    4f42:	2380      	movs	r3, #128	; 0x80
    4f44:	425b      	negs	r3, r3
    4f46:	4313      	orrs	r3, r2
    4f48:	71a3      	strb	r3, [r4, #6]
    4f4a:	2301      	movs	r3, #1
    4f4c:	9300      	str	r3, [sp, #0]
    4f4e:	e001      	b.n	4f54 <f_read+0x18c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    4f50:	2302      	movs	r3, #2
    4f52:	9300      	str	r3, [sp, #0]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    4f54:	9800      	ldr	r0, [sp, #0]
    4f56:	b003      	add	sp, #12
    4f58:	bc3c      	pop	{r2, r3, r4, r5}
    4f5a:	4690      	mov	r8, r2
    4f5c:	4699      	mov	r9, r3
    4f5e:	46a2      	mov	sl, r4
    4f60:	46ab      	mov	fp, r5
    4f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f64:	000038fd 	.word	0x000038fd
    4f68:	00003e21 	.word	0x00003e21
    4f6c:	000038a1 	.word	0x000038a1
    4f70:	00003d81 	.word	0x00003d81
    4f74:	000038c7 	.word	0x000038c7
    4f78:	000036dd 	.word	0x000036dd

00004f7c <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    4f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f7e:	46de      	mov	lr, fp
    4f80:	4657      	mov	r7, sl
    4f82:	464e      	mov	r6, r9
    4f84:	4645      	mov	r5, r8
    4f86:	b5e0      	push	{r5, r6, r7, lr}
    4f88:	b083      	sub	sp, #12
    4f8a:	0004      	movs	r4, r0
    4f8c:	000d      	movs	r5, r1
    4f8e:	0016      	movs	r6, r2
    4f90:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    4f92:	2300      	movs	r3, #0
    4f94:	464a      	mov	r2, r9
    4f96:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    4f98:	8881      	ldrh	r1, [r0, #4]
    4f9a:	6800      	ldr	r0, [r0, #0]
    4f9c:	4b7f      	ldr	r3, [pc, #508]	; (519c <f_write+0x220>)
    4f9e:	4798      	blx	r3
    4fa0:	9000      	str	r0, [sp, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    4fa2:	2800      	cmp	r0, #0
    4fa4:	d000      	beq.n	4fa8 <f_write+0x2c>
    4fa6:	e0f1      	b.n	518c <f_write+0x210>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    4fa8:	79a3      	ldrb	r3, [r4, #6]
    4faa:	b25a      	sxtb	r2, r3
    4fac:	2a00      	cmp	r2, #0
    4fae:	da00      	bge.n	4fb2 <f_write+0x36>
    4fb0:	e0ea      	b.n	5188 <f_write+0x20c>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    4fb2:	079b      	lsls	r3, r3, #30
    4fb4:	d402      	bmi.n	4fbc <f_write+0x40>
		LEAVE_FF(fp->fs, FR_DENIED);
    4fb6:	2307      	movs	r3, #7
    4fb8:	9300      	str	r3, [sp, #0]
    4fba:	e0e7      	b.n	518c <f_write+0x210>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    4fbc:	68e3      	ldr	r3, [r4, #12]
    4fbe:	199a      	adds	r2, r3, r6
    4fc0:	4293      	cmp	r3, r2
    4fc2:	d810      	bhi.n	4fe6 <f_write+0x6a>

	for ( ;  btw;							/* Repeat until all data written */
    4fc4:	2e00      	cmp	r6, #0
    4fc6:	d00e      	beq.n	4fe6 <f_write+0x6a>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    4fc8:	002f      	movs	r7, r5
    4fca:	e07b      	b.n	50c4 <f_write+0x148>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    4fcc:	2100      	movs	r1, #0
    4fce:	4b74      	ldr	r3, [pc, #464]	; (51a0 <f_write+0x224>)
    4fd0:	4798      	blx	r3
    4fd2:	0003      	movs	r3, r0
    4fd4:	6120      	str	r0, [r4, #16]
    4fd6:	e003      	b.n	4fe0 <f_write+0x64>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    4fd8:	6961      	ldr	r1, [r4, #20]
    4fda:	4b71      	ldr	r3, [pc, #452]	; (51a0 <f_write+0x224>)
    4fdc:	4798      	blx	r3
    4fde:	0003      	movs	r3, r0
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    4fe0:	2b00      	cmp	r3, #0
    4fe2:	d000      	beq.n	4fe6 <f_write+0x6a>
    4fe4:	e080      	b.n	50e8 <f_write+0x16c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    4fe6:	68a3      	ldr	r3, [r4, #8]
    4fe8:	68e2      	ldr	r2, [r4, #12]
    4fea:	4293      	cmp	r3, r2
    4fec:	d900      	bls.n	4ff0 <f_write+0x74>
    4fee:	60e3      	str	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    4ff0:	79a3      	ldrb	r3, [r4, #6]
    4ff2:	2220      	movs	r2, #32
    4ff4:	4313      	orrs	r3, r2
    4ff6:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
    4ff8:	e0c8      	b.n	518c <f_write+0x210>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    4ffa:	79a2      	ldrb	r2, [r4, #6]
    4ffc:	3b81      	subs	r3, #129	; 0x81
    4ffe:	4313      	orrs	r3, r2
    5000:	71a3      	strb	r3, [r4, #6]
    5002:	2302      	movs	r3, #2
    5004:	9300      	str	r3, [sp, #0]
    5006:	e0c1      	b.n	518c <f_write+0x210>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5008:	79a2      	ldrb	r2, [r4, #6]
    500a:	3b7f      	subs	r3, #127	; 0x7f
    500c:	4313      	orrs	r3, r2
    500e:	71a3      	strb	r3, [r4, #6]
    5010:	2301      	movs	r3, #1
    5012:	9300      	str	r3, [sp, #0]
    5014:	e0ba      	b.n	518c <f_write+0x210>
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    5016:	2100      	movs	r1, #0
    5018:	4b62      	ldr	r3, [pc, #392]	; (51a4 <f_write+0x228>)
    501a:	4798      	blx	r3
    501c:	2800      	cmp	r0, #0
    501e:	d06d      	beq.n	50fc <f_write+0x180>
				ABORT(fp->fs, FR_DISK_ERR);
    5020:	79a2      	ldrb	r2, [r4, #6]
    5022:	2380      	movs	r3, #128	; 0x80
    5024:	425b      	negs	r3, r3
    5026:	4313      	orrs	r3, r2
    5028:	71a3      	strb	r3, [r4, #6]
    502a:	2301      	movs	r3, #1
    502c:	9300      	str	r3, [sp, #0]
    502e:	e0ad      	b.n	518c <f_write+0x210>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    5030:	79a2      	ldrb	r2, [r4, #6]
    5032:	2380      	movs	r3, #128	; 0x80
    5034:	425b      	negs	r3, r3
    5036:	4313      	orrs	r3, r2
    5038:	71a3      	strb	r3, [r4, #6]
    503a:	2302      	movs	r3, #2
    503c:	9300      	str	r3, [sp, #0]
    503e:	e0a5      	b.n	518c <f_write+0x210>
					ABORT(fp->fs, FR_DISK_ERR);
    5040:	79a2      	ldrb	r2, [r4, #6]
    5042:	2380      	movs	r3, #128	; 0x80
    5044:	425b      	negs	r3, r3
    5046:	4313      	orrs	r3, r2
    5048:	71a3      	strb	r3, [r4, #6]
    504a:	2301      	movs	r3, #1
    504c:	9300      	str	r3, [sp, #0]
    504e:	e09d      	b.n	518c <f_write+0x210>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    5050:	0240      	lsls	r0, r0, #9
    5052:	1839      	adds	r1, r7, r0
    5054:	3330      	adds	r3, #48	; 0x30
    5056:	0018      	movs	r0, r3
    5058:	2280      	movs	r2, #128	; 0x80
    505a:	0092      	lsls	r2, r2, #2
    505c:	4b52      	ldr	r3, [pc, #328]	; (51a8 <f_write+0x22c>)
    505e:	4798      	blx	r3
					fp->fs->wflag = 0;
    5060:	2300      	movs	r3, #0
    5062:	6822      	ldr	r2, [r4, #0]
    5064:	7113      	strb	r3, [r2, #4]
    5066:	e072      	b.n	514e <f_write+0x1d2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    5068:	68a3      	ldr	r3, [r4, #8]
    506a:	68e2      	ldr	r2, [r4, #12]
    506c:	4293      	cmp	r3, r2
    506e:	d271      	bcs.n	5154 <f_write+0x1d8>
			fp->dsect = sect;
    5070:	4643      	mov	r3, r8
    5072:	61a3      	str	r3, [r4, #24]
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    5074:	68a3      	ldr	r3, [r4, #8]
    5076:	05dd      	lsls	r5, r3, #23
    5078:	0ded      	lsrs	r5, r5, #23
    507a:	2380      	movs	r3, #128	; 0x80
    507c:	009b      	lsls	r3, r3, #2
    507e:	1b5d      	subs	r5, r3, r5
    5080:	42b5      	cmp	r5, r6
    5082:	d900      	bls.n	5086 <f_write+0x10a>
    5084:	0035      	movs	r5, r6
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    5086:	69a1      	ldr	r1, [r4, #24]
    5088:	6820      	ldr	r0, [r4, #0]
    508a:	4b46      	ldr	r3, [pc, #280]	; (51a4 <f_write+0x228>)
    508c:	4798      	blx	r3
    508e:	2800      	cmp	r0, #0
    5090:	d172      	bne.n	5178 <f_write+0x1fc>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    5092:	68a3      	ldr	r3, [r4, #8]
    5094:	05d8      	lsls	r0, r3, #23
    5096:	0dc0      	lsrs	r0, r0, #23
    5098:	3030      	adds	r0, #48	; 0x30
    509a:	6823      	ldr	r3, [r4, #0]
    509c:	469c      	mov	ip, r3
    509e:	4460      	add	r0, ip
    50a0:	002a      	movs	r2, r5
    50a2:	0039      	movs	r1, r7
    50a4:	4b40      	ldr	r3, [pc, #256]	; (51a8 <f_write+0x22c>)
    50a6:	4798      	blx	r3
		fp->fs->wflag = 1;
    50a8:	2301      	movs	r3, #1
    50aa:	6822      	ldr	r2, [r4, #0]
    50ac:	7113      	strb	r3, [r2, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    50ae:	197f      	adds	r7, r7, r5
    50b0:	68a3      	ldr	r3, [r4, #8]
    50b2:	195b      	adds	r3, r3, r5
    50b4:	60a3      	str	r3, [r4, #8]
    50b6:	464b      	mov	r3, r9
    50b8:	681b      	ldr	r3, [r3, #0]
    50ba:	195b      	adds	r3, r3, r5
    50bc:	464a      	mov	r2, r9
    50be:	6013      	str	r3, [r2, #0]
    50c0:	1b76      	subs	r6, r6, r5
	for ( ;  btw;							/* Repeat until all data written */
    50c2:	d090      	beq.n	4fe6 <f_write+0x6a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    50c4:	68a3      	ldr	r3, [r4, #8]
    50c6:	05da      	lsls	r2, r3, #23
    50c8:	d1d4      	bne.n	5074 <f_write+0xf8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    50ca:	6820      	ldr	r0, [r4, #0]
    50cc:	7882      	ldrb	r2, [r0, #2]
    50ce:	3a01      	subs	r2, #1
    50d0:	0a5d      	lsrs	r5, r3, #9
    50d2:	4015      	ands	r5, r2
    50d4:	b2ed      	uxtb	r5, r5
			if (!csect) {					/* On the cluster boundary? */
    50d6:	2d00      	cmp	r5, #0
    50d8:	d10b      	bne.n	50f2 <f_write+0x176>
				if (fp->fptr == 0) {		/* On the top of the file? */
    50da:	2b00      	cmp	r3, #0
    50dc:	d000      	beq.n	50e0 <f_write+0x164>
    50de:	e77b      	b.n	4fd8 <f_write+0x5c>
					clst = fp->sclust;		/* Follow from the origin */
    50e0:	6923      	ldr	r3, [r4, #16]
					if (clst == 0)			/* When no cluster is allocated, */
    50e2:	2b00      	cmp	r3, #0
    50e4:	d100      	bne.n	50e8 <f_write+0x16c>
    50e6:	e771      	b.n	4fcc <f_write+0x50>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    50e8:	2b01      	cmp	r3, #1
    50ea:	d086      	beq.n	4ffa <f_write+0x7e>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    50ec:	1c5a      	adds	r2, r3, #1
    50ee:	d08b      	beq.n	5008 <f_write+0x8c>
				fp->clust = clst;			/* Update current cluster */
    50f0:	6163      	str	r3, [r4, #20]
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    50f2:	6820      	ldr	r0, [r4, #0]
    50f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    50f6:	69a2      	ldr	r2, [r4, #24]
    50f8:	4293      	cmp	r3, r2
    50fa:	d08c      	beq.n	5016 <f_write+0x9a>
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    50fc:	6823      	ldr	r3, [r4, #0]
    50fe:	469a      	mov	sl, r3
    5100:	6961      	ldr	r1, [r4, #20]
    5102:	0018      	movs	r0, r3
    5104:	4b29      	ldr	r3, [pc, #164]	; (51ac <f_write+0x230>)
    5106:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    5108:	2800      	cmp	r0, #0
    510a:	d091      	beq.n	5030 <f_write+0xb4>
			sect += csect;
    510c:	4680      	mov	r8, r0
    510e:	44a8      	add	r8, r5
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    5110:	0a73      	lsrs	r3, r6, #9
    5112:	469b      	mov	fp, r3
			if (cc) {						/* Write maximum contiguous sectors directly */
    5114:	d0a8      	beq.n	5068 <f_write+0xec>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    5116:	4653      	mov	r3, sl
    5118:	789b      	ldrb	r3, [r3, #2]
    511a:	465a      	mov	r2, fp
    511c:	18aa      	adds	r2, r5, r2
    511e:	429a      	cmp	r2, r3
    5120:	d901      	bls.n	5126 <f_write+0x1aa>
					cc = fp->fs->csize - csect;
    5122:	1b5b      	subs	r3, r3, r5
    5124:	469b      	mov	fp, r3
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    5126:	465b      	mov	r3, fp
    5128:	466a      	mov	r2, sp
    512a:	71d3      	strb	r3, [r2, #7]
    512c:	79d3      	ldrb	r3, [r2, #7]
    512e:	4652      	mov	r2, sl
    5130:	7850      	ldrb	r0, [r2, #1]
    5132:	4642      	mov	r2, r8
    5134:	0039      	movs	r1, r7
    5136:	4d1e      	ldr	r5, [pc, #120]	; (51b0 <f_write+0x234>)
    5138:	47a8      	blx	r5
    513a:	2800      	cmp	r0, #0
    513c:	d000      	beq.n	5140 <f_write+0x1c4>
    513e:	e77f      	b.n	5040 <f_write+0xc4>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    5140:	6823      	ldr	r3, [r4, #0]
    5142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5144:	4641      	mov	r1, r8
    5146:	1a50      	subs	r0, r2, r1
    5148:	4583      	cmp	fp, r0
    514a:	d900      	bls.n	514e <f_write+0x1d2>
    514c:	e780      	b.n	5050 <f_write+0xd4>
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    514e:	465b      	mov	r3, fp
    5150:	025d      	lsls	r5, r3, #9
				continue;
    5152:	e7ac      	b.n	50ae <f_write+0x132>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    5154:	2100      	movs	r1, #0
    5156:	4650      	mov	r0, sl
    5158:	4b12      	ldr	r3, [pc, #72]	; (51a4 <f_write+0x228>)
    515a:	4798      	blx	r3
    515c:	2800      	cmp	r0, #0
    515e:	d103      	bne.n	5168 <f_write+0x1ec>
				fp->fs->winsect = sect;
    5160:	6823      	ldr	r3, [r4, #0]
    5162:	4642      	mov	r2, r8
    5164:	62da      	str	r2, [r3, #44]	; 0x2c
    5166:	e783      	b.n	5070 <f_write+0xf4>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    5168:	79a2      	ldrb	r2, [r4, #6]
    516a:	2380      	movs	r3, #128	; 0x80
    516c:	425b      	negs	r3, r3
    516e:	4313      	orrs	r3, r2
    5170:	71a3      	strb	r3, [r4, #6]
    5172:	2301      	movs	r3, #1
    5174:	9300      	str	r3, [sp, #0]
    5176:	e009      	b.n	518c <f_write+0x210>
			ABORT(fp->fs, FR_DISK_ERR);
    5178:	79a2      	ldrb	r2, [r4, #6]
    517a:	2380      	movs	r3, #128	; 0x80
    517c:	425b      	negs	r3, r3
    517e:	4313      	orrs	r3, r2
    5180:	71a3      	strb	r3, [r4, #6]
    5182:	2301      	movs	r3, #1
    5184:	9300      	str	r3, [sp, #0]
    5186:	e001      	b.n	518c <f_write+0x210>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    5188:	2302      	movs	r3, #2
    518a:	9300      	str	r3, [sp, #0]
}
    518c:	9800      	ldr	r0, [sp, #0]
    518e:	b003      	add	sp, #12
    5190:	bc3c      	pop	{r2, r3, r4, r5}
    5192:	4690      	mov	r8, r2
    5194:	4699      	mov	r9, r3
    5196:	46a2      	mov	sl, r4
    5198:	46ab      	mov	fp, r5
    519a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    519c:	000038fd 	.word	0x000038fd
    51a0:	000040fd 	.word	0x000040fd
    51a4:	00003d81 	.word	0x00003d81
    51a8:	000038a1 	.word	0x000038a1
    51ac:	000038c7 	.word	0x000038c7
    51b0:	00003761 	.word	0x00003761

000051b4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    51b4:	b570      	push	{r4, r5, r6, lr}
    51b6:	0004      	movs	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    51b8:	8881      	ldrh	r1, [r0, #4]
    51ba:	6800      	ldr	r0, [r0, #0]
    51bc:	4b1c      	ldr	r3, [pc, #112]	; (5230 <f_sync+0x7c>)
    51be:	4798      	blx	r3
	if (res == FR_OK) {
    51c0:	2800      	cmp	r0, #0
    51c2:	d102      	bne.n	51ca <f_sync+0x16>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    51c4:	79a3      	ldrb	r3, [r4, #6]
    51c6:	069b      	lsls	r3, r3, #26
    51c8:	d400      	bmi.n	51cc <f_sync+0x18>
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
    51ca:	bd70      	pop	{r4, r5, r6, pc}
			res = move_window(fp->fs, fp->dir_sect);
    51cc:	69e1      	ldr	r1, [r4, #28]
    51ce:	6820      	ldr	r0, [r4, #0]
    51d0:	4b18      	ldr	r3, [pc, #96]	; (5234 <f_sync+0x80>)
    51d2:	4798      	blx	r3
			if (res == FR_OK) {
    51d4:	2800      	cmp	r0, #0
    51d6:	d1f8      	bne.n	51ca <f_sync+0x16>
				dir = fp->dir_ptr;
    51d8:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    51da:	7aeb      	ldrb	r3, [r5, #11]
    51dc:	2220      	movs	r2, #32
    51de:	4313      	orrs	r3, r2
    51e0:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    51e2:	7b23      	ldrb	r3, [r4, #12]
    51e4:	772b      	strb	r3, [r5, #28]
    51e6:	89a3      	ldrh	r3, [r4, #12]
    51e8:	0a1b      	lsrs	r3, r3, #8
    51ea:	776b      	strb	r3, [r5, #29]
    51ec:	89e3      	ldrh	r3, [r4, #14]
    51ee:	77ab      	strb	r3, [r5, #30]
    51f0:	7be3      	ldrb	r3, [r4, #15]
    51f2:	77eb      	strb	r3, [r5, #31]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    51f4:	7c23      	ldrb	r3, [r4, #16]
    51f6:	76ab      	strb	r3, [r5, #26]
    51f8:	8a23      	ldrh	r3, [r4, #16]
    51fa:	0a1b      	lsrs	r3, r3, #8
    51fc:	76eb      	strb	r3, [r5, #27]
    51fe:	8a63      	ldrh	r3, [r4, #18]
    5200:	752b      	strb	r3, [r5, #20]
    5202:	8a63      	ldrh	r3, [r4, #18]
    5204:	0a1b      	lsrs	r3, r3, #8
    5206:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();						/* Update updated time */
    5208:	4b0b      	ldr	r3, [pc, #44]	; (5238 <f_sync+0x84>)
    520a:	4798      	blx	r3
				ST_DWORD(dir+DIR_WrtTime, tim);
    520c:	75a8      	strb	r0, [r5, #22]
    520e:	0a03      	lsrs	r3, r0, #8
    5210:	75eb      	strb	r3, [r5, #23]
    5212:	0c03      	lsrs	r3, r0, #16
    5214:	762b      	strb	r3, [r5, #24]
    5216:	0e00      	lsrs	r0, r0, #24
    5218:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
    521a:	79a3      	ldrb	r3, [r4, #6]
    521c:	2220      	movs	r2, #32
    521e:	4393      	bics	r3, r2
    5220:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
    5222:	2301      	movs	r3, #1
    5224:	6822      	ldr	r2, [r4, #0]
    5226:	7113      	strb	r3, [r2, #4]
				res = sync(fp->fs);
    5228:	6820      	ldr	r0, [r4, #0]
    522a:	4b04      	ldr	r3, [pc, #16]	; (523c <f_sync+0x88>)
    522c:	4798      	blx	r3
    522e:	e7cc      	b.n	51ca <f_sync+0x16>
    5230:	000038fd 	.word	0x000038fd
    5234:	00003d81 	.word	0x00003d81
    5238:	00003851 	.word	0x00003851
    523c:	000047d9 	.word	0x000047d9

00005240 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    5240:	b510      	push	{r4, lr}
    5242:	0004      	movs	r4, r0
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    5244:	4b03      	ldr	r3, [pc, #12]	; (5254 <f_close+0x14>)
    5246:	4798      	blx	r3
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    5248:	2800      	cmp	r0, #0
    524a:	d101      	bne.n	5250 <f_close+0x10>
    524c:	2300      	movs	r3, #0
    524e:	6023      	str	r3, [r4, #0]
	return res;
#endif
}
    5250:	bd10      	pop	{r4, pc}
    5252:	46c0      	nop			; (mov r8, r8)
    5254:	000051b5 	.word	0x000051b5

00005258 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
    5258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    525a:	46de      	mov	lr, fp
    525c:	4657      	mov	r7, sl
    525e:	464e      	mov	r6, r9
    5260:	4645      	mov	r5, r8
    5262:	b5e0      	push	{r5, r6, r7, lr}
    5264:	0004      	movs	r4, r0
    5266:	000e      	movs	r6, r1
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    5268:	8881      	ldrh	r1, [r0, #4]
    526a:	6800      	ldr	r0, [r0, #0]
    526c:	4b57      	ldr	r3, [pc, #348]	; (53cc <f_lseek+0x174>)
    526e:	4798      	blx	r3
    5270:	1e05      	subs	r5, r0, #0
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    5272:	d000      	beq.n	5276 <f_lseek+0x1e>
    5274:	e0a2      	b.n	53bc <f_lseek+0x164>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
    5276:	79a3      	ldrb	r3, [r4, #6]
    5278:	b25a      	sxtb	r2, r3
    527a:	2a00      	cmp	r2, #0
    527c:	da00      	bge.n	5280 <f_lseek+0x28>
    527e:	e09c      	b.n	53ba <f_lseek+0x162>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
    5280:	68e2      	ldr	r2, [r4, #12]
    5282:	42b2      	cmp	r2, r6
    5284:	d202      	bcs.n	528c <f_lseek+0x34>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
    5286:	079b      	lsls	r3, r3, #30
    5288:	d400      	bmi.n	528c <f_lseek+0x34>
#endif
			) ofs = fp->fsize;
    528a:	0016      	movs	r6, r2

		ifptr = fp->fptr;
    528c:	68a0      	ldr	r0, [r4, #8]
		fp->fptr = nsect = 0;
    528e:	2300      	movs	r3, #0
    5290:	60a3      	str	r3, [r4, #8]
		if (ofs) {
    5292:	2e00      	cmp	r6, #0
    5294:	d100      	bne.n	5298 <f_lseek+0x40>
    5296:	e091      	b.n	53bc <f_lseek+0x164>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
    5298:	6823      	ldr	r3, [r4, #0]
    529a:	4699      	mov	r9, r3
    529c:	789f      	ldrb	r7, [r3, #2]
    529e:	027f      	lsls	r7, r7, #9
			if (ifptr > 0 &&
    52a0:	2800      	cmp	r0, #0
    52a2:	d013      	beq.n	52cc <f_lseek+0x74>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    52a4:	1e43      	subs	r3, r0, #1
    52a6:	4698      	mov	r8, r3
    52a8:	1e70      	subs	r0, r6, #1
    52aa:	4b49      	ldr	r3, [pc, #292]	; (53d0 <f_lseek+0x178>)
    52ac:	469a      	mov	sl, r3
    52ae:	0039      	movs	r1, r7
    52b0:	4798      	blx	r3
    52b2:	4683      	mov	fp, r0
    52b4:	0039      	movs	r1, r7
    52b6:	4640      	mov	r0, r8
    52b8:	47d0      	blx	sl
			if (ifptr > 0 &&
    52ba:	4583      	cmp	fp, r0
    52bc:	d306      	bcc.n	52cc <f_lseek+0x74>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
    52be:	4278      	negs	r0, r7
    52c0:	4643      	mov	r3, r8
    52c2:	4003      	ands	r3, r0
    52c4:	60a3      	str	r3, [r4, #8]
				ofs -= fp->fptr;
    52c6:	1af6      	subs	r6, r6, r3
				clst = fp->clust;
    52c8:	6960      	ldr	r0, [r4, #20]
    52ca:	e003      	b.n	52d4 <f_lseek+0x7c>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
    52cc:	6920      	ldr	r0, [r4, #16]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    52ce:	2800      	cmp	r0, #0
    52d0:	d00b      	beq.n	52ea <f_lseek+0x92>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
					fp->sclust = clst;
				}
#endif
				fp->clust = clst;
    52d2:	6160      	str	r0, [r4, #20]
			}
			if (clst != 0) {
    52d4:	2800      	cmp	r0, #0
    52d6:	d060      	beq.n	539a <f_lseek+0x142>
				while (ofs > bcs) {						/* Cluster following loop */
    52d8:	42be      	cmp	r6, r7
    52da:	d93a      	bls.n	5352 <f_lseek+0xfa>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    52dc:	2302      	movs	r3, #2
    52de:	4698      	mov	r8, r3
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    52e0:	4b3c      	ldr	r3, [pc, #240]	; (53d4 <f_lseek+0x17c>)
    52e2:	469a      	mov	sl, r3
						if (clst == 0) {				/* When disk gets full, clip file size */
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    52e4:	4b3c      	ldr	r3, [pc, #240]	; (53d8 <f_lseek+0x180>)
    52e6:	4699      	mov	r9, r3
    52e8:	e029      	b.n	533e <f_lseek+0xe6>
					clst = create_chain(fp->fs, 0);
    52ea:	2100      	movs	r1, #0
    52ec:	4648      	mov	r0, r9
    52ee:	4b39      	ldr	r3, [pc, #228]	; (53d4 <f_lseek+0x17c>)
    52f0:	4798      	blx	r3
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    52f2:	2801      	cmp	r0, #1
    52f4:	d003      	beq.n	52fe <f_lseek+0xa6>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    52f6:	1c43      	adds	r3, r0, #1
    52f8:	d008      	beq.n	530c <f_lseek+0xb4>
					fp->sclust = clst;
    52fa:	6120      	str	r0, [r4, #16]
    52fc:	e7e9      	b.n	52d2 <f_lseek+0x7a>
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    52fe:	79a2      	ldrb	r2, [r4, #6]
    5300:	2380      	movs	r3, #128	; 0x80
    5302:	425b      	negs	r3, r3
    5304:	4313      	orrs	r3, r2
    5306:	71a3      	strb	r3, [r4, #6]
    5308:	2502      	movs	r5, #2
    530a:	e057      	b.n	53bc <f_lseek+0x164>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    530c:	79a2      	ldrb	r2, [r4, #6]
    530e:	2380      	movs	r3, #128	; 0x80
    5310:	425b      	negs	r3, r3
    5312:	4313      	orrs	r3, r2
    5314:	71a3      	strb	r3, [r4, #6]
    5316:	2501      	movs	r5, #1
    5318:	e050      	b.n	53bc <f_lseek+0x164>
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
    531a:	0001      	movs	r1, r0
    531c:	6820      	ldr	r0, [r4, #0]
    531e:	47c8      	blx	r9
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5320:	1c43      	adds	r3, r0, #1
    5322:	d028      	beq.n	5376 <f_lseek+0x11e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    5324:	2801      	cmp	r0, #1
    5326:	d92d      	bls.n	5384 <f_lseek+0x12c>
    5328:	6823      	ldr	r3, [r4, #0]
    532a:	699b      	ldr	r3, [r3, #24]
    532c:	4298      	cmp	r0, r3
    532e:	d229      	bcs.n	5384 <f_lseek+0x12c>
					fp->clust = clst;
    5330:	6160      	str	r0, [r4, #20]
					fp->fptr += bcs;
    5332:	68a3      	ldr	r3, [r4, #8]
    5334:	19db      	adds	r3, r3, r7
    5336:	60a3      	str	r3, [r4, #8]
					ofs -= bcs;
    5338:	1bf6      	subs	r6, r6, r7
				while (ofs > bcs) {						/* Cluster following loop */
    533a:	42b7      	cmp	r7, r6
    533c:	d209      	bcs.n	5352 <f_lseek+0xfa>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    533e:	79a3      	ldrb	r3, [r4, #6]
    5340:	4642      	mov	r2, r8
    5342:	421a      	tst	r2, r3
    5344:	d0e9      	beq.n	531a <f_lseek+0xc2>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
    5346:	0001      	movs	r1, r0
    5348:	6820      	ldr	r0, [r4, #0]
    534a:	47d0      	blx	sl
						if (clst == 0) {				/* When disk gets full, clip file size */
    534c:	2800      	cmp	r0, #0
    534e:	d1e7      	bne.n	5320 <f_lseek+0xc8>
							ofs = bcs; break;
    5350:	003e      	movs	r6, r7
				}
				fp->fptr += ofs;
    5352:	68a3      	ldr	r3, [r4, #8]
    5354:	199b      	adds	r3, r3, r6
    5356:	60a3      	str	r3, [r4, #8]
				if (ofs % SS(fp->fs)) {
    5358:	05f3      	lsls	r3, r6, #23
    535a:	d01d      	beq.n	5398 <f_lseek+0x140>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
    535c:	0001      	movs	r1, r0
    535e:	6820      	ldr	r0, [r4, #0]
    5360:	4b1e      	ldr	r3, [pc, #120]	; (53dc <f_lseek+0x184>)
    5362:	4798      	blx	r3
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
    5364:	2800      	cmp	r0, #0
    5366:	d114      	bne.n	5392 <f_lseek+0x13a>
    5368:	79a2      	ldrb	r2, [r4, #6]
    536a:	2380      	movs	r3, #128	; 0x80
    536c:	425b      	negs	r3, r3
    536e:	4313      	orrs	r3, r2
    5370:	71a3      	strb	r3, [r4, #6]
    5372:	2502      	movs	r5, #2
    5374:	e022      	b.n	53bc <f_lseek+0x164>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    5376:	79a2      	ldrb	r2, [r4, #6]
    5378:	2380      	movs	r3, #128	; 0x80
    537a:	425b      	negs	r3, r3
    537c:	4313      	orrs	r3, r2
    537e:	71a3      	strb	r3, [r4, #6]
    5380:	2501      	movs	r5, #1
    5382:	e01b      	b.n	53bc <f_lseek+0x164>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
    5384:	79a2      	ldrb	r2, [r4, #6]
    5386:	2380      	movs	r3, #128	; 0x80
    5388:	425b      	negs	r3, r3
    538a:	4313      	orrs	r3, r2
    538c:	71a3      	strb	r3, [r4, #6]
    538e:	2502      	movs	r5, #2
    5390:	e014      	b.n	53bc <f_lseek+0x164>
					nsect += ofs / SS(fp->fs);
    5392:	0a76      	lsrs	r6, r6, #9
    5394:	1830      	adds	r0, r6, r0
    5396:	e000      	b.n	539a <f_lseek+0x142>
		fp->fptr = nsect = 0;
    5398:	2000      	movs	r0, #0
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
    539a:	68a3      	ldr	r3, [r4, #8]
    539c:	05da      	lsls	r2, r3, #23
    539e:	d003      	beq.n	53a8 <f_lseek+0x150>
    53a0:	69a2      	ldr	r2, [r4, #24]
    53a2:	4290      	cmp	r0, r2
    53a4:	d000      	beq.n	53a8 <f_lseek+0x150>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
    53a6:	61a0      	str	r0, [r4, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
    53a8:	68e2      	ldr	r2, [r4, #12]
    53aa:	4293      	cmp	r3, r2
    53ac:	d906      	bls.n	53bc <f_lseek+0x164>
			fp->fsize = fp->fptr;
    53ae:	60e3      	str	r3, [r4, #12]
			fp->flag |= FA__WRITTEN;
    53b0:	79a3      	ldrb	r3, [r4, #6]
    53b2:	2220      	movs	r2, #32
    53b4:	4313      	orrs	r3, r2
    53b6:	71a3      	strb	r3, [r4, #6]
    53b8:	e000      	b.n	53bc <f_lseek+0x164>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    53ba:	2502      	movs	r5, #2
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
    53bc:	0028      	movs	r0, r5
    53be:	bc3c      	pop	{r2, r3, r4, r5}
    53c0:	4690      	mov	r8, r2
    53c2:	4699      	mov	r9, r3
    53c4:	46a2      	mov	sl, r4
    53c6:	46ab      	mov	fp, r5
    53c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53ca:	46c0      	nop			; (mov r8, r8)
    53cc:	000038fd 	.word	0x000038fd
    53d0:	00005be5 	.word	0x00005be5
    53d4:	000040fd 	.word	0x000040fd
    53d8:	00003e21 	.word	0x00003e21
    53dc:	000038c7 	.word	0x000038c7

000053e0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fil		/* Pointer to the file object */
)
{
    53e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    53e2:	46c6      	mov	lr, r8
    53e4:	b500      	push	{lr}
    53e6:	b084      	sub	sp, #16
    53e8:	0007      	movs	r7, r0
    53ea:	9201      	str	r2, [sp, #4]
	int n = 0;
	TCHAR c, *p = buff;
    53ec:	0005      	movs	r5, r0
	int n = 0;
    53ee:	2400      	movs	r4, #0
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    53f0:	1e4b      	subs	r3, r1, #1
    53f2:	4698      	mov	r8, r3
		f_read(fil, s, 1, &rc);
    53f4:	4e0e      	ldr	r6, [pc, #56]	; (5430 <f_gets+0x50>)
	while (n < len - 1) {			/* Read bytes until buffer gets filled */
    53f6:	4544      	cmp	r4, r8
    53f8:	da0e      	bge.n	5418 <f_gets+0x38>
		f_read(fil, s, 1, &rc);
    53fa:	ab02      	add	r3, sp, #8
    53fc:	2201      	movs	r2, #1
    53fe:	a903      	add	r1, sp, #12
    5400:	9801      	ldr	r0, [sp, #4]
    5402:	47b0      	blx	r6
		if (rc != 1) break;			/* Break on EOF or error */
    5404:	9b02      	ldr	r3, [sp, #8]
    5406:	2b01      	cmp	r3, #1
    5408:	d106      	bne.n	5418 <f_gets+0x38>
		c = s[0];
    540a:	ab03      	add	r3, sp, #12
    540c:	781b      	ldrb	r3, [r3, #0]
		}
#endif
#if _USE_STRFUNC >= 2
		if (c == '\r') continue;	/* Strip '\r' */
#endif
		*p++ = c;
    540e:	3501      	adds	r5, #1
    5410:	553b      	strb	r3, [r7, r4]
		n++;
    5412:	3401      	adds	r4, #1
		if (c == '\n') break;		/* Break on EOL */
    5414:	2b0a      	cmp	r3, #10
    5416:	d1ee      	bne.n	53f6 <f_gets+0x16>
	}
	*p = 0;
    5418:	2300      	movs	r3, #0
    541a:	702b      	strb	r3, [r5, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    541c:	1e63      	subs	r3, r4, #1
    541e:	419c      	sbcs	r4, r3
    5420:	4264      	negs	r4, r4
    5422:	4027      	ands	r7, r4
}
    5424:	0038      	movs	r0, r7
    5426:	b004      	add	sp, #16
    5428:	bc04      	pop	{r2}
    542a:	4690      	mov	r8, r2
    542c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    542e:	46c0      	nop			; (mov r8, r8)
    5430:	00004dc9 	.word	0x00004dc9

00005434 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    5434:	b510      	push	{r4, lr}
    5436:	b082      	sub	sp, #8
    5438:	000c      	movs	r4, r1
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    543a:	466b      	mov	r3, sp
    543c:	7018      	strb	r0, [r3, #0]
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    543e:	ab01      	add	r3, sp, #4
    5440:	2201      	movs	r2, #1
    5442:	4669      	mov	r1, sp
    5444:	0020      	movs	r0, r4
    5446:	4c05      	ldr	r4, [pc, #20]	; (545c <f_putc+0x28>)
    5448:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    544a:	9b01      	ldr	r3, [sp, #4]
    544c:	1e58      	subs	r0, r3, #1
    544e:	1e43      	subs	r3, r0, #1
    5450:	4198      	sbcs	r0, r3
    5452:	4240      	negs	r0, r0
    5454:	2301      	movs	r3, #1
    5456:	4318      	orrs	r0, r3
}
    5458:	b002      	add	sp, #8
    545a:	bd10      	pop	{r4, pc}
    545c:	00004f7d 	.word	0x00004f7d

00005460 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    5460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5462:	0006      	movs	r6, r0
    5464:	000d      	movs	r5, r1
	int n;


	for (n = 0; *str; str++, n++) {
    5466:	7800      	ldrb	r0, [r0, #0]
    5468:	2800      	cmp	r0, #0
    546a:	d00b      	beq.n	5484 <f_puts+0x24>
    546c:	2400      	movs	r4, #0
		if (f_putc(*str, fil) == EOF) return EOF;
    546e:	4f06      	ldr	r7, [pc, #24]	; (5488 <f_puts+0x28>)
    5470:	0029      	movs	r1, r5
    5472:	47b8      	blx	r7
    5474:	1c43      	adds	r3, r0, #1
    5476:	d004      	beq.n	5482 <f_puts+0x22>
	for (n = 0; *str; str++, n++) {
    5478:	3401      	adds	r4, #1
    547a:	5d30      	ldrb	r0, [r6, r4]
    547c:	2800      	cmp	r0, #0
    547e:	d1f7      	bne.n	5470 <f_puts+0x10>
    5480:	0020      	movs	r0, r4
	}
	return n;
}
    5482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (n = 0; *str; str++, n++) {
    5484:	2000      	movs	r0, #0
    5486:	e7fc      	b.n	5482 <f_puts+0x22>
    5488:	00005435 	.word	0x00005435

0000548c <ff_convert>:
{
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
		c = src;
    548c:	0003      	movs	r3, r0
	if (src < 0x80) {	/* ASCII */
    548e:	287f      	cmp	r0, #127	; 0x7f
    5490:	d911      	bls.n	54b6 <ff_convert+0x2a>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    5492:	2900      	cmp	r1, #0
    5494:	d111      	bne.n	54ba <ff_convert+0x2e>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
				if (src == Tbl[c]) break;
    5496:	28c7      	cmp	r0, #199	; 0xc7
    5498:	d017      	beq.n	54ca <ff_convert+0x3e>
    549a:	4a0d      	ldr	r2, [pc, #52]	; (54d0 <ff_convert+0x44>)
    549c:	3202      	adds	r2, #2
			for (c = 0; c < 0x80; c++) {
    549e:	2301      	movs	r3, #1
				if (src == Tbl[c]) break;
    54a0:	8811      	ldrh	r1, [r2, #0]
    54a2:	4281      	cmp	r1, r0
    54a4:	d004      	beq.n	54b0 <ff_convert+0x24>
			for (c = 0; c < 0x80; c++) {
    54a6:	3301      	adds	r3, #1
    54a8:	b29b      	uxth	r3, r3
    54aa:	3202      	adds	r2, #2
    54ac:	2b80      	cmp	r3, #128	; 0x80
    54ae:	d1f7      	bne.n	54a0 <ff_convert+0x14>
			}
			c = (c + 0x80) & 0xFF;
    54b0:	3380      	adds	r3, #128	; 0x80
    54b2:	20ff      	movs	r0, #255	; 0xff
    54b4:	4003      	ands	r3, r0
		}
	}

	return c;
}
    54b6:	0018      	movs	r0, r3
    54b8:	4770      	bx	lr
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    54ba:	2300      	movs	r3, #0
    54bc:	28ff      	cmp	r0, #255	; 0xff
    54be:	d8fa      	bhi.n	54b6 <ff_convert+0x2a>
    54c0:	3880      	subs	r0, #128	; 0x80
    54c2:	0040      	lsls	r0, r0, #1
    54c4:	4b02      	ldr	r3, [pc, #8]	; (54d0 <ff_convert+0x44>)
    54c6:	5ac3      	ldrh	r3, [r0, r3]
    54c8:	e7f5      	b.n	54b6 <ff_convert+0x2a>
				if (src == Tbl[c]) break;
    54ca:	2300      	movs	r3, #0
    54cc:	e7f0      	b.n	54b0 <ff_convert+0x24>
    54ce:	46c0      	nop			; (mov r8, r8)
    54d0:	00006e30 	.word	0x00006e30

000054d4 <ff_wtoupper>:
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    54d4:	2861      	cmp	r0, #97	; 0x61
    54d6:	d014      	beq.n	5502 <ff_wtoupper+0x2e>
    54d8:	4b0b      	ldr	r3, [pc, #44]	; (5508 <ff_wtoupper+0x34>)
    54da:	3304      	adds	r3, #4
    54dc:	2101      	movs	r1, #1
    54de:	2262      	movs	r2, #98	; 0x62
    54e0:	4290      	cmp	r0, r2
    54e2:	d007      	beq.n	54f4 <ff_wtoupper+0x20>
    54e4:	3101      	adds	r1, #1
    54e6:	3302      	adds	r3, #2
    54e8:	1e9a      	subs	r2, r3, #2
    54ea:	8812      	ldrh	r2, [r2, #0]
    54ec:	2a00      	cmp	r2, #0
    54ee:	d1f7      	bne.n	54e0 <ff_wtoupper+0xc>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    54f0:	0003      	movs	r3, r0
    54f2:	e004      	b.n	54fe <ff_wtoupper+0x2a>
    54f4:	1e03      	subs	r3, r0, #0
    54f6:	d002      	beq.n	54fe <ff_wtoupper+0x2a>
    54f8:	0049      	lsls	r1, r1, #1
    54fa:	4b04      	ldr	r3, [pc, #16]	; (550c <ff_wtoupper+0x38>)
    54fc:	5acb      	ldrh	r3, [r1, r3]
}
    54fe:	0018      	movs	r0, r3
    5500:	4770      	bx	lr
	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    5502:	2100      	movs	r1, #0
    5504:	e7f8      	b.n	54f8 <ff_wtoupper+0x24>
    5506:	46c0      	nop			; (mov r8, r8)
    5508:	00006f30 	.word	0x00006f30
    550c:	00007110 	.word	0x00007110

00005510 <jumpToApplication>:
		bootloader();
	}
}


static void jumpToApplication(void) {
    5510:	b580      	push	{r7, lr}
    5512:	af00      	add	r7, sp, #0

	void (*applicationCodeEntry)(void);
	__set_MSP(*(uint32_t *) APP_START_ADDRESS); /// Rebase stack pointer
    5514:	23b0      	movs	r3, #176	; 0xb0
    5516:	021b      	lsls	r3, r3, #8
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    5518:	681a      	ldr	r2, [r3, #0]
    551a:	f382 8808 	msr	MSP, r2
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk); /// Rebase vector table
    551e:	4a03      	ldr	r2, [pc, #12]	; (552c <jumpToApplication+0x1c>)
    5520:	6093      	str	r3, [r2, #8]
	applicationCodeEntry = /// Set pointer to application section
	(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    5522:	4b03      	ldr	r3, [pc, #12]	; (5530 <jumpToApplication+0x20>)

	applicationCodeEntry();
    5524:	681b      	ldr	r3, [r3, #0]
    5526:	4798      	blx	r3
}
    5528:	46bd      	mov	sp, r7
    552a:	bd80      	pop	{r7, pc}
    552c:	e000ed00 	.word	0xe000ed00
    5530:	0000b004 	.word	0x0000b004

00005534 <setFlashFlag>:
	f_close(&file_object);
	flag = atoi(flagBuffer);
	return flag;
}

void setFlashFlag(void){
    5534:	b570      	push	{r4, r5, r6, lr}
		char flagBuffer[5];
		TCHAR* flag = "1";

		res = f_open(&file_object, "0:flag.txt", FA_WRITE);
    5536:	2202      	movs	r2, #2
    5538:	490d      	ldr	r1, [pc, #52]	; (5570 <setFlashFlag+0x3c>)
    553a:	480e      	ldr	r0, [pc, #56]	; (5574 <setFlashFlag+0x40>)
    553c:	4b0e      	ldr	r3, [pc, #56]	; (5578 <setFlashFlag+0x44>)
    553e:	4798      	blx	r3
    5540:	4b0e      	ldr	r3, [pc, #56]	; (557c <setFlashFlag+0x48>)
    5542:	7018      	strb	r0, [r3, #0]
		if (res != FR_OK) {
    5544:	2800      	cmp	r0, #0
    5546:	d10f      	bne.n	5568 <setFlashFlag+0x34>
			SerialConsoleWriteString("Couldn't open flag file on SD.\r\n");
		}
		res = f_lseek(&file_object, 0);
    5548:	4c0a      	ldr	r4, [pc, #40]	; (5574 <setFlashFlag+0x40>)
    554a:	2100      	movs	r1, #0
    554c:	0020      	movs	r0, r4
    554e:	4b0c      	ldr	r3, [pc, #48]	; (5580 <setFlashFlag+0x4c>)
    5550:	4798      	blx	r3
    5552:	4d0a      	ldr	r5, [pc, #40]	; (557c <setFlashFlag+0x48>)
    5554:	7028      	strb	r0, [r5, #0]
		
		//res = f_puts(" ", &file_object);
		//res = f_lseek(&file_object, 0);
		res = f_puts(flag, &file_object);
    5556:	0021      	movs	r1, r4
    5558:	480a      	ldr	r0, [pc, #40]	; (5584 <setFlashFlag+0x50>)
    555a:	4b0b      	ldr	r3, [pc, #44]	; (5588 <setFlashFlag+0x54>)
    555c:	4798      	blx	r3
    555e:	7028      	strb	r0, [r5, #0]
		f_close(&file_object);
    5560:	0020      	movs	r0, r4
    5562:	4b0a      	ldr	r3, [pc, #40]	; (558c <setFlashFlag+0x58>)
    5564:	4798      	blx	r3
}
    5566:	bd70      	pop	{r4, r5, r6, pc}
			SerialConsoleWriteString("Couldn't open flag file on SD.\r\n");
    5568:	4809      	ldr	r0, [pc, #36]	; (5590 <setFlashFlag+0x5c>)
    556a:	4b0a      	ldr	r3, [pc, #40]	; (5594 <setFlashFlag+0x60>)
    556c:	4798      	blx	r3
    556e:	e7eb      	b.n	5548 <setFlashFlag+0x14>
    5570:	00007534 	.word	0x00007534
    5574:	20000df8 	.word	0x20000df8
    5578:	00004c41 	.word	0x00004c41
    557c:	20000e90 	.word	0x20000e90
    5580:	00005259 	.word	0x00005259
    5584:	00007564 	.word	0x00007564
    5588:	00005461 	.word	0x00005461
    558c:	00005241 	.word	0x00005241
    5590:	00007540 	.word	0x00007540
    5594:	00000785 	.word	0x00000785

00005598 <bootloader>:
		
		res = f_puts(newVerBuffer, &file_object);
		f_close(&file_object);
}

void bootloader(void){
    5598:	b5f0      	push	{r4, r5, r6, r7, lr}
    559a:	46d6      	mov	lr, sl
    559c:	464f      	mov	r7, r9
    559e:	4646      	mov	r6, r8
    55a0:	b5c0      	push	{r6, r7, lr}
    55a2:	b0cc      	sub	sp, #304	; 0x130
	
	SerialConsoleWriteString("ESE516 - BOOTLOADER running!\r\n");	
    55a4:	48d9      	ldr	r0, [pc, #868]	; (590c <bootloader+0x374>)
    55a6:	4bda      	ldr	r3, [pc, #872]	; (5910 <bootloader+0x378>)
    55a8:	4798      	blx	r3
   int versionNVM;
   int versionSD;
   uint32_t* bytesRead = (uint32_t*)malloc(sizeof(uint32_t));
    55aa:	2004      	movs	r0, #4
    55ac:	4bd9      	ldr	r3, [pc, #868]	; (5914 <bootloader+0x37c>)
    55ae:	4798      	blx	r3
    55b0:	9000      	str	r0, [sp, #0]
   
   char versionBufferSD[5];
   char versionBufferNVM[5];
   
   res = f_open(&file_object, (char const*)version_file, FA_READ);
    55b2:	2201      	movs	r2, #1
    55b4:	49d8      	ldr	r1, [pc, #864]	; (5918 <bootloader+0x380>)
    55b6:	48d9      	ldr	r0, [pc, #868]	; (591c <bootloader+0x384>)
    55b8:	4bd9      	ldr	r3, [pc, #868]	; (5920 <bootloader+0x388>)
    55ba:	4798      	blx	r3
    55bc:	4bd9      	ldr	r3, [pc, #868]	; (5924 <bootloader+0x38c>)
    55be:	7018      	strb	r0, [r3, #0]
   if (res != FR_OK) {
    55c0:	2800      	cmp	r0, #0
    55c2:	d000      	beq.n	55c6 <bootloader+0x2e>
    55c4:	e094      	b.n	56f0 <bootloader+0x158>
	   SerialConsoleWriteString("Couldn't open version file on SD.\r\n");
   }
   f_gets(versionBufferSD, sizeof(versionBufferSD), &file_object);
    55c6:	4cd5      	ldr	r4, [pc, #852]	; (591c <bootloader+0x384>)
    55c8:	0022      	movs	r2, r4
    55ca:	2105      	movs	r1, #5
    55cc:	a84a      	add	r0, sp, #296	; 0x128
    55ce:	4bd6      	ldr	r3, [pc, #856]	; (5928 <bootloader+0x390>)
    55d0:	4798      	blx	r3
   f_close(&file_object);
    55d2:	0020      	movs	r0, r4
    55d4:	4bd5      	ldr	r3, [pc, #852]	; (592c <bootloader+0x394>)
    55d6:	4798      	blx	r3
   versionSD = atoi(versionBufferSD);
    55d8:	a84a      	add	r0, sp, #296	; 0x128
    55da:	4bd5      	ldr	r3, [pc, #852]	; (5930 <bootloader+0x398>)
    55dc:	4798      	blx	r3
    55de:	9001      	str	r0, [sp, #4]
   
   res = f_open(&file_object, (char const*)versionNVM_file, FA_READ);
    55e0:	2201      	movs	r2, #1
    55e2:	49d4      	ldr	r1, [pc, #848]	; (5934 <bootloader+0x39c>)
    55e4:	0020      	movs	r0, r4
    55e6:	4bce      	ldr	r3, [pc, #824]	; (5920 <bootloader+0x388>)
    55e8:	4798      	blx	r3
    55ea:	4bce      	ldr	r3, [pc, #824]	; (5924 <bootloader+0x38c>)
    55ec:	7018      	strb	r0, [r3, #0]
   if (res != FR_OK) {
    55ee:	2800      	cmp	r0, #0
    55f0:	d000      	beq.n	55f4 <bootloader+0x5c>
    55f2:	e081      	b.n	56f8 <bootloader+0x160>
	   SerialConsoleWriteString("Couldn't open version file on SD.\r\n");
   }
   f_gets(versionBufferNVM, sizeof(versionBufferNVM), &file_object);
    55f4:	4cc9      	ldr	r4, [pc, #804]	; (591c <bootloader+0x384>)
    55f6:	0022      	movs	r2, r4
    55f8:	2105      	movs	r1, #5
    55fa:	a848      	add	r0, sp, #288	; 0x120
    55fc:	4bca      	ldr	r3, [pc, #808]	; (5928 <bootloader+0x390>)
    55fe:	4798      	blx	r3
   f_close(&file_object);
    5600:	0020      	movs	r0, r4
    5602:	4bca      	ldr	r3, [pc, #808]	; (592c <bootloader+0x394>)
    5604:	4798      	blx	r3
   versionNVM = atoi(versionBufferNVM);
    5606:	a848      	add	r0, sp, #288	; 0x120
    5608:	4bc9      	ldr	r3, [pc, #804]	; (5930 <bootloader+0x398>)
    560a:	4798      	blx	r3
    560c:	0004      	movs	r4, r0
   
   int print1 = sprintf(out1, "SD Firmware: %d\r\n", versionSD);
    560e:	4eca      	ldr	r6, [pc, #808]	; (5938 <bootloader+0x3a0>)
    5610:	9a01      	ldr	r2, [sp, #4]
    5612:	49ca      	ldr	r1, [pc, #808]	; (593c <bootloader+0x3a4>)
    5614:	0030      	movs	r0, r6
    5616:	4fca      	ldr	r7, [pc, #808]	; (5940 <bootloader+0x3a8>)
    5618:	47b8      	blx	r7
   int print2 = sprintf(out2, "NVM Firmware: %d\r\n", versionNVM);
    561a:	4dca      	ldr	r5, [pc, #808]	; (5944 <bootloader+0x3ac>)
    561c:	0022      	movs	r2, r4
    561e:	49ca      	ldr	r1, [pc, #808]	; (5948 <bootloader+0x3b0>)
    5620:	0028      	movs	r0, r5
    5622:	47b8      	blx	r7
   SerialConsoleWriteString(out1);
    5624:	0030      	movs	r0, r6
    5626:	4eba      	ldr	r6, [pc, #744]	; (5910 <bootloader+0x378>)
    5628:	47b0      	blx	r6
   SerialConsoleWriteString(out2);
    562a:	0028      	movs	r0, r5
    562c:	47b0      	blx	r6


	if (versionSD > versionNVM){
    562e:	9b01      	ldr	r3, [sp, #4]
    5630:	42a3      	cmp	r3, r4
    5632:	dc00      	bgt.n	5636 <bootloader+0x9e>
    5634:	e146      	b.n	58c4 <bootloader+0x32c>
	
		//Open the new firmware file

		res = f_open(&file_object, "0:app.bin", FA_READ);
    5636:	2201      	movs	r2, #1
    5638:	49c4      	ldr	r1, [pc, #784]	; (594c <bootloader+0x3b4>)
    563a:	48b8      	ldr	r0, [pc, #736]	; (591c <bootloader+0x384>)
    563c:	4bb8      	ldr	r3, [pc, #736]	; (5920 <bootloader+0x388>)
    563e:	4798      	blx	r3
    5640:	4bb8      	ldr	r3, [pc, #736]	; (5924 <bootloader+0x38c>)
    5642:	7018      	strb	r0, [r3, #0]
		if (res != FR_OK) {
    5644:	2800      	cmp	r0, #0
    5646:	d15b      	bne.n	5700 <bootloader+0x168>
			int print3 = sprintf(outError, "The result log is %d.\r\n", res);
			SerialConsoleWriteString(outError);

		}

		int fileSize = f_size(&file_object);
    5648:	4bb4      	ldr	r3, [pc, #720]	; (591c <bootloader+0x384>)
    564a:	68de      	ldr	r6, [r3, #12]
		int print3 = sprintf(out3, "The size of the firmware file is %d bytes.\r\n", fileSize);
    564c:	4cc0      	ldr	r4, [pc, #768]	; (5950 <bootloader+0x3b8>)
    564e:	0032      	movs	r2, r6
    5650:	49c0      	ldr	r1, [pc, #768]	; (5954 <bootloader+0x3bc>)
    5652:	0020      	movs	r0, r4
    5654:	4bba      	ldr	r3, [pc, #744]	; (5940 <bootloader+0x3a8>)
    5656:	4798      	blx	r3
		SerialConsoleWriteString(out3); 
    5658:	0020      	movs	r0, r4
    565a:	4bad      	ldr	r3, [pc, #692]	; (5910 <bootloader+0x378>)
    565c:	4798      	blx	r3

		//Erase the old firmware
		
		max_erased_row = (fileSize / (NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE)) + 1;
    565e:	17f3      	asrs	r3, r6, #31
    5660:	b2da      	uxtb	r2, r3
    5662:	1992      	adds	r2, r2, r6
    5664:	1212      	asrs	r2, r2, #8
    5666:	3201      	adds	r2, #1
    5668:	49bb      	ldr	r1, [pc, #748]	; (5958 <bootloader+0x3c0>)
    566a:	600a      	str	r2, [r1, #0]
		max_read_row = (fileSize / NVMCTRL_PAGE_SIZE) + 1;
    566c:	213f      	movs	r1, #63	; 0x3f
    566e:	400b      	ands	r3, r1
    5670:	199b      	adds	r3, r3, r6
    5672:	119b      	asrs	r3, r3, #6
    5674:	3301      	adds	r3, #1
    5676:	49b9      	ldr	r1, [pc, #740]	; (595c <bootloader+0x3c4>)
    5678:	600b      	str	r3, [r1, #0]
		
		for (eraseCounter = 0; eraseCounter < max_erased_row; eraseCounter++){
    567a:	2100      	movs	r1, #0
    567c:	4bb8      	ldr	r3, [pc, #736]	; (5960 <bootloader+0x3c8>)
    567e:	6019      	str	r1, [r3, #0]
    5680:	428a      	cmp	r2, r1
    5682:	dd14      	ble.n	56ae <bootloader+0x116>
			do{
			error_code = nvm_erase_row(APP_START_ADDRESS + (NVMCTRL_ROW_PAGES * NVMCTRL_PAGE_SIZE * eraseCounter));
    5684:	4fb6      	ldr	r7, [pc, #728]	; (5960 <bootloader+0x3c8>)
    5686:	4db7      	ldr	r5, [pc, #732]	; (5964 <bootloader+0x3cc>)
    5688:	4cb7      	ldr	r4, [pc, #732]	; (5968 <bootloader+0x3d0>)
    568a:	683b      	ldr	r3, [r7, #0]
    568c:	0218      	lsls	r0, r3, #8
    568e:	23b0      	movs	r3, #176	; 0xb0
    5690:	021b      	lsls	r3, r3, #8
    5692:	469c      	mov	ip, r3
    5694:	4460      	add	r0, ip
    5696:	47a8      	blx	r5
    5698:	7020      	strb	r0, [r4, #0]
			} while (error_code == STATUS_BUSY);
    569a:	2805      	cmp	r0, #5
    569c:	d0f5      	beq.n	568a <bootloader+0xf2>
		for (eraseCounter = 0; eraseCounter < max_erased_row; eraseCounter++){
    569e:	4ab0      	ldr	r2, [pc, #704]	; (5960 <bootloader+0x3c8>)
    56a0:	6813      	ldr	r3, [r2, #0]
    56a2:	3301      	adds	r3, #1
    56a4:	6013      	str	r3, [r2, #0]
    56a6:	4aac      	ldr	r2, [pc, #688]	; (5958 <bootloader+0x3c0>)
    56a8:	6812      	ldr	r2, [r2, #0]
    56aa:	429a      	cmp	r2, r3
    56ac:	dced      	bgt.n	568a <bootloader+0xf2>
		uint32_t *crc_sd;
		uint32_t *crc_nvm;
		
		char transferBuffer[NVMCTRL_PAGE_SIZE];
		char readBackBuffer[NVMCTRL_PAGE_SIZE]; 
		delay_s(1);
    56ae:	2000      	movs	r0, #0
    56b0:	4bae      	ldr	r3, [pc, #696]	; (596c <bootloader+0x3d4>)
    56b2:	4798      	blx	r3
    56b4:	22fa      	movs	r2, #250	; 0xfa
    56b6:	0092      	lsls	r2, r2, #2
    56b8:	2300      	movs	r3, #0
    56ba:	2100      	movs	r1, #0
    56bc:	4cac      	ldr	r4, [pc, #688]	; (5970 <bootloader+0x3d8>)
    56be:	47a0      	blx	r4
    56c0:	4aac      	ldr	r2, [pc, #688]	; (5974 <bootloader+0x3dc>)
    56c2:	2300      	movs	r3, #0
    56c4:	1880      	adds	r0, r0, r2
    56c6:	4159      	adcs	r1, r3
    56c8:	4aab      	ldr	r2, [pc, #684]	; (5978 <bootloader+0x3e0>)
    56ca:	2300      	movs	r3, #0
    56cc:	4cab      	ldr	r4, [pc, #684]	; (597c <bootloader+0x3e4>)
    56ce:	47a0      	blx	r4
    56d0:	4bab      	ldr	r3, [pc, #684]	; (5980 <bootloader+0x3e8>)
    56d2:	4798      	blx	r3
		for (int read_counter = 0; read_counter < max_read_row; read_counter++){
    56d4:	4ba1      	ldr	r3, [pc, #644]	; (595c <bootloader+0x3c4>)
    56d6:	681b      	ldr	r3, [r3, #0]
    56d8:	2b00      	cmp	r3, #0
    56da:	dc00      	bgt.n	56de <bootloader+0x146>
    56dc:	e08a      	b.n	57f4 <bootloader+0x25c>
    56de:	b2b3      	uxth	r3, r6
    56e0:	469a      	mov	sl, r3
    56e2:	24b0      	movs	r4, #176	; 0xb0
    56e4:	0224      	lsls	r4, r4, #8
    56e6:	2300      	movs	r3, #0
    56e8:	4698      	mov	r8, r3
			
			num_bytes_read = NVMCTRL_PAGE_SIZE * read_counter; //track number of bytes read in
    56ea:	4ba6      	ldr	r3, [pc, #664]	; (5984 <bootloader+0x3ec>)
    56ec:	4699      	mov	r9, r3
    56ee:	e049      	b.n	5784 <bootloader+0x1ec>
	   SerialConsoleWriteString("Couldn't open version file on SD.\r\n");
    56f0:	48a5      	ldr	r0, [pc, #660]	; (5988 <bootloader+0x3f0>)
    56f2:	4b87      	ldr	r3, [pc, #540]	; (5910 <bootloader+0x378>)
    56f4:	4798      	blx	r3
    56f6:	e766      	b.n	55c6 <bootloader+0x2e>
	   SerialConsoleWriteString("Couldn't open version file on SD.\r\n");
    56f8:	48a3      	ldr	r0, [pc, #652]	; (5988 <bootloader+0x3f0>)
    56fa:	4b85      	ldr	r3, [pc, #532]	; (5910 <bootloader+0x378>)
    56fc:	4798      	blx	r3
    56fe:	e779      	b.n	55f4 <bootloader+0x5c>
			SerialConsoleWriteString("Failed to open new firmware file...\r\n");
    5700:	48a2      	ldr	r0, [pc, #648]	; (598c <bootloader+0x3f4>)
    5702:	4c83      	ldr	r4, [pc, #524]	; (5910 <bootloader+0x378>)
    5704:	47a0      	blx	r4
			int print3 = sprintf(outError, "The result log is %d.\r\n", res);
    5706:	4b87      	ldr	r3, [pc, #540]	; (5924 <bootloader+0x38c>)
    5708:	781a      	ldrb	r2, [r3, #0]
    570a:	4da1      	ldr	r5, [pc, #644]	; (5990 <bootloader+0x3f8>)
    570c:	49a1      	ldr	r1, [pc, #644]	; (5994 <bootloader+0x3fc>)
    570e:	0028      	movs	r0, r5
    5710:	4b8b      	ldr	r3, [pc, #556]	; (5940 <bootloader+0x3a8>)
    5712:	4798      	blx	r3
			SerialConsoleWriteString(outError);
    5714:	0028      	movs	r0, r5
    5716:	47a0      	blx	r4
    5718:	e796      	b.n	5648 <bootloader+0xb0>
					transferBuffer, remainingFileToBeRead);
					dsu_crc32_cal(&transferBuffer, remainingFileToBeRead, &crc_nvm); 
				} while (error_code == STATUS_BUSY);
			}
			else { 
				result = f_read(&file_object, transferBuffer, NVMCTRL_PAGE_SIZE, bytesRead); 
    571a:	ad06      	add	r5, sp, #24
    571c:	9b00      	ldr	r3, [sp, #0]
    571e:	2240      	movs	r2, #64	; 0x40
    5720:	0029      	movs	r1, r5
    5722:	487e      	ldr	r0, [pc, #504]	; (591c <bootloader+0x384>)
    5724:	4f9c      	ldr	r7, [pc, #624]	; (5998 <bootloader+0x400>)
    5726:	47b8      	blx	r7
    5728:	4f9c      	ldr	r7, [pc, #624]	; (599c <bootloader+0x404>)
    572a:	7038      	strb	r0, [r7, #0]
			 

				dsu_crc32_cal(&transferBuffer, bytesRead, &crc_sd);
    572c:	002e      	movs	r6, r5
    572e:	aa04      	add	r2, sp, #16
    5730:	9900      	ldr	r1, [sp, #0]
    5732:	0028      	movs	r0, r5
    5734:	4b9a      	ldr	r3, [pc, #616]	; (59a0 <bootloader+0x408>)
    5736:	4798      	blx	r3

			if (result == 0){
    5738:	783b      	ldrb	r3, [r7, #0]
    573a:	2b00      	cmp	r3, #0
    573c:	d156      	bne.n	57ec <bootloader+0x254>
				do{
					
					error_code = nvm_write_buffer(APP_START_ADDRESS + NVMCTRL_PAGE_SIZE*read_counter, transferBuffer, NVMCTRL_PAGE_SIZE);
    573e:	4f99      	ldr	r7, [pc, #612]	; (59a4 <bootloader+0x40c>)
    5740:	4d89      	ldr	r5, [pc, #548]	; (5968 <bootloader+0x3d0>)
    5742:	2240      	movs	r2, #64	; 0x40
    5744:	a906      	add	r1, sp, #24
    5746:	0020      	movs	r0, r4
    5748:	47b8      	blx	r7
    574a:	7028      	strb	r0, [r5, #0]
				} while (error_code == STATUS_BUSY);
    574c:	2805      	cmp	r0, #5
    574e:	d0f8      	beq.n	5742 <bootloader+0x1aa>
				
				do {
					error_code = nvm_read_buffer(APP_START_ADDRESS + NVMCTRL_PAGE_SIZE*read_counter, transferBuffer, NVMCTRL_PAGE_SIZE);
    5750:	4f95      	ldr	r7, [pc, #596]	; (59a8 <bootloader+0x410>)
    5752:	4d85      	ldr	r5, [pc, #532]	; (5968 <bootloader+0x3d0>)
    5754:	2240      	movs	r2, #64	; 0x40
    5756:	a906      	add	r1, sp, #24
    5758:	0020      	movs	r0, r4
    575a:	47b8      	blx	r7
    575c:	7028      	strb	r0, [r5, #0]
				} while (error_code == STATUS_BUSY);
    575e:	2805      	cmp	r0, #5
    5760:	d0f8      	beq.n	5754 <bootloader+0x1bc>
				
				dsu_crc32_cal(&transferBuffer, bytesRead, &crc_nvm);
    5762:	aa05      	add	r2, sp, #20
    5764:	9900      	ldr	r1, [sp, #0]
    5766:	0030      	movs	r0, r6
    5768:	4b8d      	ldr	r3, [pc, #564]	; (59a0 <bootloader+0x408>)
    576a:	4798      	blx	r3
		for (int read_counter = 0; read_counter < max_read_row; read_counter++){
    576c:	2301      	movs	r3, #1
    576e:	469c      	mov	ip, r3
    5770:	44e0      	add	r8, ip
    5772:	4656      	mov	r6, sl
    5774:	3e40      	subs	r6, #64	; 0x40
    5776:	b2b3      	uxth	r3, r6
    5778:	469a      	mov	sl, r3
    577a:	3440      	adds	r4, #64	; 0x40
    577c:	4b77      	ldr	r3, [pc, #476]	; (595c <bootloader+0x3c4>)
    577e:	681b      	ldr	r3, [r3, #0]
    5780:	4543      	cmp	r3, r8
    5782:	dd37      	ble.n	57f4 <bootloader+0x25c>
			num_bytes_read = NVMCTRL_PAGE_SIZE * read_counter; //track number of bytes read in
    5784:	4643      	mov	r3, r8
    5786:	019b      	lsls	r3, r3, #6
    5788:	464a      	mov	r2, r9
    578a:	6013      	str	r3, [r2, #0]
			remainingFileToBeRead = fileSize - num_bytes_read; 
    578c:	4b87      	ldr	r3, [pc, #540]	; (59ac <bootloader+0x414>)
    578e:	4652      	mov	r2, sl
    5790:	801a      	strh	r2, [r3, #0]
			if (remainingFileToBeRead < NVMCTRL_PAGE_SIZE && remainingFileToBeRead >= 0) { 
    5792:	4653      	mov	r3, sl
    5794:	2b3f      	cmp	r3, #63	; 0x3f
    5796:	d8c0      	bhi.n	571a <bootloader+0x182>
				result = f_read(&file_object, transferBuffer, remainingFileToBeRead, &num_bytes_read);
    5798:	ad06      	add	r5, sp, #24
    579a:	4b7a      	ldr	r3, [pc, #488]	; (5984 <bootloader+0x3ec>)
    579c:	4652      	mov	r2, sl
    579e:	0029      	movs	r1, r5
    57a0:	485e      	ldr	r0, [pc, #376]	; (591c <bootloader+0x384>)
    57a2:	4f7d      	ldr	r7, [pc, #500]	; (5998 <bootloader+0x400>)
    57a4:	47b8      	blx	r7
    57a6:	4b7d      	ldr	r3, [pc, #500]	; (599c <bootloader+0x404>)
    57a8:	7018      	strb	r0, [r3, #0]
				dsu_crc32_cal(&transferBuffer, remainingFileToBeRead, &crc_sd); 
    57aa:	4b80      	ldr	r3, [pc, #512]	; (59ac <bootloader+0x414>)
    57ac:	8819      	ldrh	r1, [r3, #0]
    57ae:	aa04      	add	r2, sp, #16
    57b0:	0028      	movs	r0, r5
    57b2:	4b7b      	ldr	r3, [pc, #492]	; (59a0 <bootloader+0x408>)
    57b4:	4798      	blx	r3
					error_code = nvm_write_buffer(APP_START_ADDRESS + NVMCTRL_PAGE_SIZE*read_counter, 
    57b6:	4f7d      	ldr	r7, [pc, #500]	; (59ac <bootloader+0x414>)
    57b8:	4e7a      	ldr	r6, [pc, #488]	; (59a4 <bootloader+0x40c>)
    57ba:	4d6b      	ldr	r5, [pc, #428]	; (5968 <bootloader+0x3d0>)
    57bc:	883a      	ldrh	r2, [r7, #0]
    57be:	a906      	add	r1, sp, #24
    57c0:	0020      	movs	r0, r4
    57c2:	47b0      	blx	r6
    57c4:	7028      	strb	r0, [r5, #0]
				} while (error_code	== STATUS_BUSY);
    57c6:	2805      	cmp	r0, #5
    57c8:	d0f8      	beq.n	57bc <bootloader+0x224>
					error_code = nvm_read_buffer(APP_START_ADDRESS + NVMCTRL_PAGE_SIZE*read_counter,
    57ca:	4e78      	ldr	r6, [pc, #480]	; (59ac <bootloader+0x414>)
    57cc:	4f76      	ldr	r7, [pc, #472]	; (59a8 <bootloader+0x410>)
    57ce:	4d66      	ldr	r5, [pc, #408]	; (5968 <bootloader+0x3d0>)
    57d0:	8832      	ldrh	r2, [r6, #0]
    57d2:	a906      	add	r1, sp, #24
    57d4:	0020      	movs	r0, r4
    57d6:	47b8      	blx	r7
    57d8:	7028      	strb	r0, [r5, #0]
					dsu_crc32_cal(&transferBuffer, remainingFileToBeRead, &crc_nvm); 
    57da:	8831      	ldrh	r1, [r6, #0]
    57dc:	aa05      	add	r2, sp, #20
    57de:	a806      	add	r0, sp, #24
    57e0:	4b6f      	ldr	r3, [pc, #444]	; (59a0 <bootloader+0x408>)
    57e2:	4798      	blx	r3
				} while (error_code == STATUS_BUSY);
    57e4:	782b      	ldrb	r3, [r5, #0]
    57e6:	2b05      	cmp	r3, #5
    57e8:	d0f2      	beq.n	57d0 <bootloader+0x238>
    57ea:	e7bf      	b.n	576c <bootloader+0x1d4>
				
			} else{
				SerialConsoleWriteString("Error with result.\r\n");
    57ec:	4870      	ldr	r0, [pc, #448]	; (59b0 <bootloader+0x418>)
    57ee:	4b48      	ldr	r3, [pc, #288]	; (5910 <bootloader+0x378>)
    57f0:	4798      	blx	r3
    57f2:	e7bb      	b.n	576c <bootloader+0x1d4>
			}	
		}
					}
		f_close(&file_object);
    57f4:	4c49      	ldr	r4, [pc, #292]	; (591c <bootloader+0x384>)
    57f6:	0020      	movs	r0, r4
    57f8:	4b4c      	ldr	r3, [pc, #304]	; (592c <bootloader+0x394>)
    57fa:	4798      	blx	r3
		char crcnvmout[100];
		char crcsdout[100];

		sprintf(crcsdout, "CRC SD: %d\r\n", crc_sd);
    57fc:	9a04      	ldr	r2, [sp, #16]
    57fe:	496d      	ldr	r1, [pc, #436]	; (59b4 <bootloader+0x41c>)
    5800:	a82f      	add	r0, sp, #188	; 0xbc
    5802:	4d4f      	ldr	r5, [pc, #316]	; (5940 <bootloader+0x3a8>)
    5804:	47a8      	blx	r5
		SerialConsoleWriteString(crcsdout);		
    5806:	a82f      	add	r0, sp, #188	; 0xbc
    5808:	4e41      	ldr	r6, [pc, #260]	; (5910 <bootloader+0x378>)
    580a:	47b0      	blx	r6
		
		sprintf(crcnvmout, "CRC NVM: %d\r\n", crc_nvm);
    580c:	9a05      	ldr	r2, [sp, #20]
    580e:	496a      	ldr	r1, [pc, #424]	; (59b8 <bootloader+0x420>)
    5810:	a816      	add	r0, sp, #88	; 0x58
    5812:	47a8      	blx	r5
		SerialConsoleWriteString(crcnvmout);
    5814:	a816      	add	r0, sp, #88	; 0x58
    5816:	47b0      	blx	r6
		
		delay_s(1);
    5818:	2000      	movs	r0, #0
    581a:	4b54      	ldr	r3, [pc, #336]	; (596c <bootloader+0x3d4>)
    581c:	4798      	blx	r3
    581e:	22fa      	movs	r2, #250	; 0xfa
    5820:	0092      	lsls	r2, r2, #2
    5822:	2300      	movs	r3, #0
    5824:	2100      	movs	r1, #0
    5826:	4e52      	ldr	r6, [pc, #328]	; (5970 <bootloader+0x3d8>)
    5828:	47b0      	blx	r6
    582a:	4a52      	ldr	r2, [pc, #328]	; (5974 <bootloader+0x3dc>)
    582c:	2300      	movs	r3, #0
    582e:	1880      	adds	r0, r0, r2
    5830:	4159      	adcs	r1, r3
    5832:	4a51      	ldr	r2, [pc, #324]	; (5978 <bootloader+0x3e0>)
    5834:	2300      	movs	r3, #0
    5836:	4e51      	ldr	r6, [pc, #324]	; (597c <bootloader+0x3e4>)
    5838:	47b0      	blx	r6
    583a:	4b51      	ldr	r3, [pc, #324]	; (5980 <bootloader+0x3e8>)
    583c:	4798      	blx	r3
		
		char update[1];
		sprintf(update, "%d", versionSD);
    583e:	9a01      	ldr	r2, [sp, #4]
    5840:	495e      	ldr	r1, [pc, #376]	; (59bc <bootloader+0x424>)
    5842:	a803      	add	r0, sp, #12
    5844:	47a8      	blx	r5

		res = f_open(&file_object, "0:versionNVM.txt", FA_WRITE);
    5846:	2202      	movs	r2, #2
    5848:	495d      	ldr	r1, [pc, #372]	; (59c0 <bootloader+0x428>)
    584a:	0020      	movs	r0, r4
    584c:	4b34      	ldr	r3, [pc, #208]	; (5920 <bootloader+0x388>)
    584e:	4798      	blx	r3
    5850:	4b34      	ldr	r3, [pc, #208]	; (5924 <bootloader+0x38c>)
    5852:	7018      	strb	r0, [r3, #0]
		if (res != FR_OK) {
    5854:	2800      	cmp	r0, #0
    5856:	d131      	bne.n	58bc <bootloader+0x324>
			SerialConsoleWriteString("Couldn't open version NVM file on SD.\r\n");
 		}

		res = f_puts(update, &file_object);
    5858:	4c30      	ldr	r4, [pc, #192]	; (591c <bootloader+0x384>)
    585a:	0021      	movs	r1, r4
    585c:	a803      	add	r0, sp, #12
    585e:	4b59      	ldr	r3, [pc, #356]	; (59c4 <bootloader+0x42c>)
    5860:	4798      	blx	r3
    5862:	4b30      	ldr	r3, [pc, #192]	; (5924 <bootloader+0x38c>)
    5864:	7018      	strb	r0, [r3, #0]
		f_close(&file_object);
    5866:	0020      	movs	r0, r4
    5868:	4b30      	ldr	r3, [pc, #192]	; (592c <bootloader+0x394>)
    586a:	4798      	blx	r3
		
		SerialConsoleWriteString("We updated the firmware!\r\n");
    586c:	4856      	ldr	r0, [pc, #344]	; (59c8 <bootloader+0x430>)
    586e:	4b28      	ldr	r3, [pc, #160]	; (5910 <bootloader+0x378>)
    5870:	4798      	blx	r3

		delay_s(1); //Delay to allow text to print
    5872:	2000      	movs	r0, #0
    5874:	4b3d      	ldr	r3, [pc, #244]	; (596c <bootloader+0x3d4>)
    5876:	4798      	blx	r3
    5878:	2400      	movs	r4, #0
    587a:	22fa      	movs	r2, #250	; 0xfa
    587c:	0092      	lsls	r2, r2, #2
    587e:	2300      	movs	r3, #0
    5880:	0021      	movs	r1, r4
    5882:	4d3b      	ldr	r5, [pc, #236]	; (5970 <bootloader+0x3d8>)
    5884:	47a8      	blx	r5
    5886:	4a3b      	ldr	r2, [pc, #236]	; (5974 <bootloader+0x3dc>)
    5888:	2300      	movs	r3, #0
    588a:	1880      	adds	r0, r0, r2
    588c:	4159      	adcs	r1, r3
    588e:	4a3a      	ldr	r2, [pc, #232]	; (5978 <bootloader+0x3e0>)
    5890:	2300      	movs	r3, #0
    5892:	4d3a      	ldr	r5, [pc, #232]	; (597c <bootloader+0x3e4>)
    5894:	47a8      	blx	r5
    5896:	4b3a      	ldr	r3, [pc, #232]	; (5980 <bootloader+0x3e8>)
    5898:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    589a:	b672      	cpsid	i
    589c:	f3bf 8f5f 	dmb	sy
			
		cpu_irq_disable();
    58a0:	4b4a      	ldr	r3, [pc, #296]	; (59cc <bootloader+0x434>)
    58a2:	701c      	strb	r4, [r3, #0]
		DeinitializeSerialConsole();
    58a4:	4b4a      	ldr	r3, [pc, #296]	; (59d0 <bootloader+0x438>)
    58a6:	4798      	blx	r3
		sd_mmc_deinit();
    58a8:	4b4a      	ldr	r3, [pc, #296]	; (59d4 <bootloader+0x43c>)
    58aa:	4798      	blx	r3
		jumpToApplication();
    58ac:	4b4a      	ldr	r3, [pc, #296]	; (59d8 <bootloader+0x440>)
    58ae:	4798      	blx	r3
		cpu_irq_disable();
		DeinitializeSerialConsole();
		sd_mmc_deinit();
		jumpToApplication();	
	}
}
    58b0:	b04c      	add	sp, #304	; 0x130
    58b2:	bc1c      	pop	{r2, r3, r4}
    58b4:	4690      	mov	r8, r2
    58b6:	4699      	mov	r9, r3
    58b8:	46a2      	mov	sl, r4
    58ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SerialConsoleWriteString("Couldn't open version NVM file on SD.\r\n");
    58bc:	4847      	ldr	r0, [pc, #284]	; (59dc <bootloader+0x444>)
    58be:	4b14      	ldr	r3, [pc, #80]	; (5910 <bootloader+0x378>)
    58c0:	4798      	blx	r3
    58c2:	e7c9      	b.n	5858 <bootloader+0x2c0>
		SerialConsoleWriteString("Firmware Up-to-Date! Jumping to Application...\r\n");
    58c4:	4846      	ldr	r0, [pc, #280]	; (59e0 <bootloader+0x448>)
    58c6:	4b12      	ldr	r3, [pc, #72]	; (5910 <bootloader+0x378>)
    58c8:	4798      	blx	r3
		delay_s(1);
    58ca:	2000      	movs	r0, #0
    58cc:	4b27      	ldr	r3, [pc, #156]	; (596c <bootloader+0x3d4>)
    58ce:	4798      	blx	r3
    58d0:	2400      	movs	r4, #0
    58d2:	22fa      	movs	r2, #250	; 0xfa
    58d4:	0092      	lsls	r2, r2, #2
    58d6:	2300      	movs	r3, #0
    58d8:	0021      	movs	r1, r4
    58da:	4d25      	ldr	r5, [pc, #148]	; (5970 <bootloader+0x3d8>)
    58dc:	47a8      	blx	r5
    58de:	4a25      	ldr	r2, [pc, #148]	; (5974 <bootloader+0x3dc>)
    58e0:	2300      	movs	r3, #0
    58e2:	1880      	adds	r0, r0, r2
    58e4:	4159      	adcs	r1, r3
    58e6:	4a24      	ldr	r2, [pc, #144]	; (5978 <bootloader+0x3e0>)
    58e8:	2300      	movs	r3, #0
    58ea:	4d24      	ldr	r5, [pc, #144]	; (597c <bootloader+0x3e4>)
    58ec:	47a8      	blx	r5
    58ee:	4b24      	ldr	r3, [pc, #144]	; (5980 <bootloader+0x3e8>)
    58f0:	4798      	blx	r3
    58f2:	b672      	cpsid	i
    58f4:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
    58f8:	4b34      	ldr	r3, [pc, #208]	; (59cc <bootloader+0x434>)
    58fa:	701c      	strb	r4, [r3, #0]
		DeinitializeSerialConsole();
    58fc:	4b34      	ldr	r3, [pc, #208]	; (59d0 <bootloader+0x438>)
    58fe:	4798      	blx	r3
		sd_mmc_deinit();
    5900:	4b34      	ldr	r3, [pc, #208]	; (59d4 <bootloader+0x43c>)
    5902:	4798      	blx	r3
		jumpToApplication();	
    5904:	4b34      	ldr	r3, [pc, #208]	; (59d8 <bootloader+0x440>)
    5906:	4798      	blx	r3
}
    5908:	e7d2      	b.n	58b0 <bootloader+0x318>
    590a:	46c0      	nop			; (mov r8, r8)
    590c:	000072f0 	.word	0x000072f0
    5910:	00000785 	.word	0x00000785
    5914:	0000618d 	.word	0x0000618d
    5918:	20000024 	.word	0x20000024
    591c:	20000df8 	.word	0x20000df8
    5920:	00004c41 	.word	0x00004c41
    5924:	20000e90 	.word	0x20000e90
    5928:	000053e1 	.word	0x000053e1
    592c:	00005241 	.word	0x00005241
    5930:	00006139 	.word	0x00006139
    5934:	20000010 	.word	0x20000010
    5938:	20000e94 	.word	0x20000e94
    593c:	00007334 	.word	0x00007334
    5940:	00006325 	.word	0x00006325
    5944:	20000b98 	.word	0x20000b98
    5948:	00007348 	.word	0x00007348
    594c:	0000735c 	.word	0x0000735c
    5950:	20000e80 	.word	0x20000e80
    5954:	000073a8 	.word	0x000073a8
    5958:	20000314 	.word	0x20000314
    595c:	20000318 	.word	0x20000318
    5960:	20000310 	.word	0x20000310
    5964:	00000421 	.word	0x00000421
    5968:	20000e91 	.word	0x20000e91
    596c:	000032a9 	.word	0x000032a9
    5970:	00005f11 	.word	0x00005f11
    5974:	00001b57 	.word	0x00001b57
    5978:	00001b58 	.word	0x00001b58
    597c:	00005ed1 	.word	0x00005ed1
    5980:	20000001 	.word	0x20000001
    5984:	2000031c 	.word	0x2000031c
    5988:	00007310 	.word	0x00007310
    598c:	00007368 	.word	0x00007368
    5990:	20000e5c 	.word	0x20000e5c
    5994:	00007390 	.word	0x00007390
    5998:	00004dc9 	.word	0x00004dc9
    599c:	20000e7f 	.word	0x20000e7f
    59a0:	0000014d 	.word	0x0000014d
    59a4:	0000030d 	.word	0x0000030d
    59a8:	000003b5 	.word	0x000003b5
    59ac:	20000320 	.word	0x20000320
    59b0:	000073d8 	.word	0x000073d8
    59b4:	000073f0 	.word	0x000073f0
    59b8:	00007400 	.word	0x00007400
    59bc:	00007410 	.word	0x00007410
    59c0:	00007414 	.word	0x00007414
    59c4:	00005461 	.word	0x00005461
    59c8:	00007450 	.word	0x00007450
    59cc:	2000000d 	.word	0x2000000d
    59d0:	0000074d 	.word	0x0000074d
    59d4:	000013fd 	.word	0x000013fd
    59d8:	00005511 	.word	0x00005511
    59dc:	00007428 	.word	0x00007428
    59e0:	0000746c 	.word	0x0000746c

000059e4 <userAppCondition>:
int userAppCondition(void){
    59e4:	b530      	push	{r4, r5, lr}
    59e6:	b091      	sub	sp, #68	; 0x44
		error_code = nvm_read_buffer(APP_START_RESET_VEC_ADDRESS, userAppCheckBuffer, NVMCTRL_PAGE_SIZE);
    59e8:	4d07      	ldr	r5, [pc, #28]	; (5a08 <userAppCondition+0x24>)
    59ea:	4c08      	ldr	r4, [pc, #32]	; (5a0c <userAppCondition+0x28>)
    59ec:	2240      	movs	r2, #64	; 0x40
    59ee:	4669      	mov	r1, sp
    59f0:	4807      	ldr	r0, [pc, #28]	; (5a10 <userAppCondition+0x2c>)
    59f2:	47a8      	blx	r5
    59f4:	7020      	strb	r0, [r4, #0]
	} while (error_code == STATUS_BUSY);
    59f6:	2805      	cmp	r0, #5
    59f8:	d0f8      	beq.n	59ec <userAppCondition+0x8>
	if (userAppCheckBuffer[0] == (uint8_t)0xFF){ //No user application
    59fa:	466b      	mov	r3, sp
    59fc:	7818      	ldrb	r0, [r3, #0]
    59fe:	38ff      	subs	r0, #255	; 0xff
    5a00:	1e43      	subs	r3, r0, #1
    5a02:	4198      	sbcs	r0, r3
}
    5a04:	b011      	add	sp, #68	; 0x44
    5a06:	bd30      	pop	{r4, r5, pc}
    5a08:	000003b5 	.word	0x000003b5
    5a0c:	20000e91 	.word	0x20000e91
    5a10:	0000b004 	.word	0x0000b004

00005a14 <flashFlag>:
int flashFlag(void){
    5a14:	b510      	push	{r4, lr}
    5a16:	b082      	sub	sp, #8
	res = f_open(&file_object, "0:flag.txt", FA_READ);
    5a18:	2201      	movs	r2, #1
    5a1a:	490d      	ldr	r1, [pc, #52]	; (5a50 <flashFlag+0x3c>)
    5a1c:	480d      	ldr	r0, [pc, #52]	; (5a54 <flashFlag+0x40>)
    5a1e:	4b0e      	ldr	r3, [pc, #56]	; (5a58 <flashFlag+0x44>)
    5a20:	4798      	blx	r3
    5a22:	4b0e      	ldr	r3, [pc, #56]	; (5a5c <flashFlag+0x48>)
    5a24:	7018      	strb	r0, [r3, #0]
	if (res != FR_OK) {
    5a26:	2800      	cmp	r0, #0
    5a28:	d10d      	bne.n	5a46 <flashFlag+0x32>
	f_gets(flagBuffer, sizeof(flagBuffer), &file_object);
    5a2a:	4c0a      	ldr	r4, [pc, #40]	; (5a54 <flashFlag+0x40>)
    5a2c:	0022      	movs	r2, r4
    5a2e:	2105      	movs	r1, #5
    5a30:	4668      	mov	r0, sp
    5a32:	4b0b      	ldr	r3, [pc, #44]	; (5a60 <flashFlag+0x4c>)
    5a34:	4798      	blx	r3
	f_close(&file_object);
    5a36:	0020      	movs	r0, r4
    5a38:	4b0a      	ldr	r3, [pc, #40]	; (5a64 <flashFlag+0x50>)
    5a3a:	4798      	blx	r3
	flag = atoi(flagBuffer);
    5a3c:	4668      	mov	r0, sp
    5a3e:	4b0a      	ldr	r3, [pc, #40]	; (5a68 <flashFlag+0x54>)
    5a40:	4798      	blx	r3
}
    5a42:	b002      	add	sp, #8
    5a44:	bd10      	pop	{r4, pc}
		SerialConsoleWriteString("Couldn't open flag file on SD.\r\n");
    5a46:	4809      	ldr	r0, [pc, #36]	; (5a6c <flashFlag+0x58>)
    5a48:	4b09      	ldr	r3, [pc, #36]	; (5a70 <flashFlag+0x5c>)
    5a4a:	4798      	blx	r3
    5a4c:	e7ed      	b.n	5a2a <flashFlag+0x16>
    5a4e:	46c0      	nop			; (mov r8, r8)
    5a50:	00007534 	.word	0x00007534
    5a54:	20000df8 	.word	0x20000df8
    5a58:	00004c41 	.word	0x00004c41
    5a5c:	20000e90 	.word	0x20000e90
    5a60:	000053e1 	.word	0x000053e1
    5a64:	00005241 	.word	0x00005241
    5a68:	00006139 	.word	0x00006139
    5a6c:	00007540 	.word	0x00007540
    5a70:	00000785 	.word	0x00000785

00005a74 <main>:
int main(void){
    5a74:	b570      	push	{r4, r5, r6, lr}
    5a76:	b082      	sub	sp, #8
	system_init();
    5a78:	4b3e      	ldr	r3, [pc, #248]	; (5b74 <main+0x100>)
    5a7a:	4798      	blx	r3
	delay_init();
    5a7c:	4b3e      	ldr	r3, [pc, #248]	; (5b78 <main+0x104>)
    5a7e:	4798      	blx	r3
	InitializeSerialConsole();
    5a80:	4b3e      	ldr	r3, [pc, #248]	; (5b7c <main+0x108>)
    5a82:	4798      	blx	r3
	SerialConsoleWriteString("\x0C\n\r-- ESE516 - Start of project!\r\n");	
    5a84:	483e      	ldr	r0, [pc, #248]	; (5b80 <main+0x10c>)
    5a86:	4b3f      	ldr	r3, [pc, #252]	; (5b84 <main+0x110>)
    5a88:	4798      	blx	r3
	cpu_irq_enable();
    5a8a:	4e3f      	ldr	r6, [pc, #252]	; (5b88 <main+0x114>)
    5a8c:	2501      	movs	r5, #1
    5a8e:	7035      	strb	r5, [r6, #0]
    5a90:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    5a94:	b662      	cpsie	i
	sd_mmc_init();
    5a96:	4b3d      	ldr	r3, [pc, #244]	; (5b8c <main+0x118>)
    5a98:	4798      	blx	r3
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    5a9a:	2400      	movs	r4, #0
    5a9c:	466b      	mov	r3, sp
    5a9e:	701c      	strb	r4, [r3, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    5aa0:	4b3b      	ldr	r3, [pc, #236]	; (5b90 <main+0x11c>)
    5aa2:	685b      	ldr	r3, [r3, #4]
    5aa4:	06db      	lsls	r3, r3, #27
    5aa6:	0f1b      	lsrs	r3, r3, #28
    5aa8:	466a      	mov	r2, sp
    5aaa:	7093      	strb	r3, [r2, #2]
	config->disable_cache     = false;
    5aac:	70d4      	strb	r4, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    5aae:	7114      	strb	r4, [r2, #4]
	config_nvm.manual_page_write = false;
    5ab0:	7054      	strb	r4, [r2, #1]
	nvm_set_config(&config_nvm);
    5ab2:	4668      	mov	r0, sp
    5ab4:	4b37      	ldr	r3, [pc, #220]	; (5b94 <main+0x120>)
    5ab6:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    5ab8:	466b      	mov	r3, sp
    5aba:	701c      	strb	r4, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5abc:	705d      	strb	r5, [r3, #1]
	config->powersave  = false;
    5abe:	709c      	strb	r4, [r3, #2]
	port_pin_set_config(PIN_PB23, &config_port_pin);
    5ac0:	4669      	mov	r1, sp
    5ac2:	2037      	movs	r0, #55	; 0x37
    5ac4:	4c34      	ldr	r4, [pc, #208]	; (5b98 <main+0x124>)
    5ac6:	47a0      	blx	r4
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
    5ac8:	466b      	mov	r3, sp
    5aca:	701d      	strb	r5, [r3, #0]
	port_pin_set_config(PIN_PA23, &config_port_pin);
    5acc:	4669      	mov	r1, sp
    5ace:	2017      	movs	r0, #23
    5ad0:	47a0      	blx	r4
	cpu_irq_enable();
    5ad2:	7035      	strb	r5, [r6, #0]
    5ad4:	f3bf 8f5f 	dmb	sy
    5ad8:	b662      	cpsie	i
		status = sd_mmc_test_unit_ready(0);
    5ada:	4e30      	ldr	r6, [pc, #192]	; (5b9c <main+0x128>)
    5adc:	4d30      	ldr	r5, [pc, #192]	; (5ba0 <main+0x12c>)
    5ade:	e003      	b.n	5ae8 <main+0x74>
	} while (CTRL_GOOD != status);
    5ae0:	4b2f      	ldr	r3, [pc, #188]	; (5ba0 <main+0x12c>)
    5ae2:	781b      	ldrb	r3, [r3, #0]
    5ae4:	2b00      	cmp	r3, #0
    5ae6:	d00f      	beq.n	5b08 <main+0x94>
		status = sd_mmc_test_unit_ready(0);
    5ae8:	2000      	movs	r0, #0
    5aea:	47b0      	blx	r6
    5aec:	7028      	strb	r0, [r5, #0]
		if (CTRL_FAIL == status) {
    5aee:	2801      	cmp	r0, #1
    5af0:	d1f6      	bne.n	5ae0 <main+0x6c>
			SerialConsoleWriteString("Card install FAIL\n\r");
    5af2:	482c      	ldr	r0, [pc, #176]	; (5ba4 <main+0x130>)
    5af4:	4c23      	ldr	r4, [pc, #140]	; (5b84 <main+0x110>)
    5af6:	47a0      	blx	r4
			SerialConsoleWriteString("Please unplug and re-plug the card.\n\r");
    5af8:	482b      	ldr	r0, [pc, #172]	; (5ba8 <main+0x134>)
    5afa:	47a0      	blx	r4
			while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
    5afc:	4c2b      	ldr	r4, [pc, #172]	; (5bac <main+0x138>)
    5afe:	2000      	movs	r0, #0
    5b00:	47a0      	blx	r4
    5b02:	2802      	cmp	r0, #2
    5b04:	d1fb      	bne.n	5afe <main+0x8a>
    5b06:	e7eb      	b.n	5ae0 <main+0x6c>
	SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    5b08:	4829      	ldr	r0, [pc, #164]	; (5bb0 <main+0x13c>)
    5b0a:	4b1e      	ldr	r3, [pc, #120]	; (5b84 <main+0x110>)
    5b0c:	4798      	blx	r3
	memset(&fs, 0, sizeof(FATFS));
    5b0e:	4c29      	ldr	r4, [pc, #164]	; (5bb4 <main+0x140>)
    5b10:	228c      	movs	r2, #140	; 0x8c
    5b12:	0092      	lsls	r2, r2, #2
    5b14:	2100      	movs	r1, #0
    5b16:	0020      	movs	r0, r4
    5b18:	4b27      	ldr	r3, [pc, #156]	; (5bb8 <main+0x144>)
    5b1a:	4798      	blx	r3
	res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
    5b1c:	0021      	movs	r1, r4
    5b1e:	2000      	movs	r0, #0
    5b20:	4b26      	ldr	r3, [pc, #152]	; (5bbc <main+0x148>)
    5b22:	4798      	blx	r3
    5b24:	4b26      	ldr	r3, [pc, #152]	; (5bc0 <main+0x14c>)
    5b26:	7018      	strb	r0, [r3, #0]
	if (FR_INVALID_DRIVE == res) {
    5b28:	280b      	cmp	r0, #11
    5b2a:	d014      	beq.n	5b56 <main+0xe2>
	SerialConsoleWriteString("[OK]\r\n");
    5b2c:	4825      	ldr	r0, [pc, #148]	; (5bc4 <main+0x150>)
    5b2e:	4b15      	ldr	r3, [pc, #84]	; (5b84 <main+0x110>)
    5b30:	4798      	blx	r3
			PM->APBBMASK.reg |= mask;
    5b32:	4a25      	ldr	r2, [pc, #148]	; (5bc8 <main+0x154>)
    5b34:	69d3      	ldr	r3, [r2, #28]
    5b36:	2102      	movs	r1, #2
    5b38:	430b      	orrs	r3, r1
    5b3a:	61d3      	str	r3, [r2, #28]
	if (userAppCondition() == 0) { //If there is no data at application start address
    5b3c:	4b23      	ldr	r3, [pc, #140]	; (5bcc <main+0x158>)
    5b3e:	4798      	blx	r3
    5b40:	2800      	cmp	r0, #0
    5b42:	d00e      	beq.n	5b62 <main+0xee>
		if (flashFlag() == 0){ //If the device has never been flashed with a version number 
    5b44:	4b22      	ldr	r3, [pc, #136]	; (5bd0 <main+0x15c>)
    5b46:	4798      	blx	r3
    5b48:	2800      	cmp	r0, #0
    5b4a:	d00f      	beq.n	5b6c <main+0xf8>
		bootloader();
    5b4c:	4b21      	ldr	r3, [pc, #132]	; (5bd4 <main+0x160>)
    5b4e:	4798      	blx	r3
}
    5b50:	2000      	movs	r0, #0
    5b52:	b002      	add	sp, #8
    5b54:	bd70      	pop	{r4, r5, r6, pc}
		LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    5b56:	220b      	movs	r2, #11
    5b58:	491f      	ldr	r1, [pc, #124]	; (5bd8 <main+0x164>)
    5b5a:	2000      	movs	r0, #0
    5b5c:	4b1f      	ldr	r3, [pc, #124]	; (5bdc <main+0x168>)
    5b5e:	4798      	blx	r3
    5b60:	e7e4      	b.n	5b2c <main+0xb8>
			setFlashFlag();
    5b62:	4b1f      	ldr	r3, [pc, #124]	; (5be0 <main+0x16c>)
    5b64:	4798      	blx	r3
			bootloader();
    5b66:	4b1b      	ldr	r3, [pc, #108]	; (5bd4 <main+0x160>)
    5b68:	4798      	blx	r3
    5b6a:	e7f1      	b.n	5b50 <main+0xdc>
			setFlashFlag();
    5b6c:	4b1c      	ldr	r3, [pc, #112]	; (5be0 <main+0x16c>)
    5b6e:	4798      	blx	r3
    5b70:	e7ec      	b.n	5b4c <main+0xd8>
    5b72:	46c0      	nop			; (mov r8, r8)
    5b74:	000034ed 	.word	0x000034ed
    5b78:	00001925 	.word	0x00001925
    5b7c:	00000625 	.word	0x00000625
    5b80:	000074a0 	.word	0x000074a0
    5b84:	00000785 	.word	0x00000785
    5b88:	2000000d 	.word	0x2000000d
    5b8c:	00000979 	.word	0x00000979
    5b90:	41004000 	.word	0x41004000
    5b94:	000001e5 	.word	0x000001e5
    5b98:	00001a2d 	.word	0x00001a2d
    5b9c:	000010ad 	.word	0x000010ad
    5ba0:	20000ea4 	.word	0x20000ea4
    5ba4:	000074c4 	.word	0x000074c4
    5ba8:	000074d8 	.word	0x000074d8
    5bac:	00000999 	.word	0x00000999
    5bb0:	00007500 	.word	0x00007500
    5bb4:	20000bc4 	.word	0x20000bc4
    5bb8:	000061a1 	.word	0x000061a1
    5bbc:	00004c11 	.word	0x00004c11
    5bc0:	20000e90 	.word	0x20000e90
    5bc4:	0000752c 	.word	0x0000752c
    5bc8:	40000400 	.word	0x40000400
    5bcc:	000059e5 	.word	0x000059e5
    5bd0:	00005a15 	.word	0x00005a15
    5bd4:	00005599 	.word	0x00005599
    5bd8:	0000751c 	.word	0x0000751c
    5bdc:	0000084d 	.word	0x0000084d
    5be0:	00005535 	.word	0x00005535

00005be4 <__udivsi3>:
    5be4:	2200      	movs	r2, #0
    5be6:	0843      	lsrs	r3, r0, #1
    5be8:	428b      	cmp	r3, r1
    5bea:	d374      	bcc.n	5cd6 <__udivsi3+0xf2>
    5bec:	0903      	lsrs	r3, r0, #4
    5bee:	428b      	cmp	r3, r1
    5bf0:	d35f      	bcc.n	5cb2 <__udivsi3+0xce>
    5bf2:	0a03      	lsrs	r3, r0, #8
    5bf4:	428b      	cmp	r3, r1
    5bf6:	d344      	bcc.n	5c82 <__udivsi3+0x9e>
    5bf8:	0b03      	lsrs	r3, r0, #12
    5bfa:	428b      	cmp	r3, r1
    5bfc:	d328      	bcc.n	5c50 <__udivsi3+0x6c>
    5bfe:	0c03      	lsrs	r3, r0, #16
    5c00:	428b      	cmp	r3, r1
    5c02:	d30d      	bcc.n	5c20 <__udivsi3+0x3c>
    5c04:	22ff      	movs	r2, #255	; 0xff
    5c06:	0209      	lsls	r1, r1, #8
    5c08:	ba12      	rev	r2, r2
    5c0a:	0c03      	lsrs	r3, r0, #16
    5c0c:	428b      	cmp	r3, r1
    5c0e:	d302      	bcc.n	5c16 <__udivsi3+0x32>
    5c10:	1212      	asrs	r2, r2, #8
    5c12:	0209      	lsls	r1, r1, #8
    5c14:	d065      	beq.n	5ce2 <__udivsi3+0xfe>
    5c16:	0b03      	lsrs	r3, r0, #12
    5c18:	428b      	cmp	r3, r1
    5c1a:	d319      	bcc.n	5c50 <__udivsi3+0x6c>
    5c1c:	e000      	b.n	5c20 <__udivsi3+0x3c>
    5c1e:	0a09      	lsrs	r1, r1, #8
    5c20:	0bc3      	lsrs	r3, r0, #15
    5c22:	428b      	cmp	r3, r1
    5c24:	d301      	bcc.n	5c2a <__udivsi3+0x46>
    5c26:	03cb      	lsls	r3, r1, #15
    5c28:	1ac0      	subs	r0, r0, r3
    5c2a:	4152      	adcs	r2, r2
    5c2c:	0b83      	lsrs	r3, r0, #14
    5c2e:	428b      	cmp	r3, r1
    5c30:	d301      	bcc.n	5c36 <__udivsi3+0x52>
    5c32:	038b      	lsls	r3, r1, #14
    5c34:	1ac0      	subs	r0, r0, r3
    5c36:	4152      	adcs	r2, r2
    5c38:	0b43      	lsrs	r3, r0, #13
    5c3a:	428b      	cmp	r3, r1
    5c3c:	d301      	bcc.n	5c42 <__udivsi3+0x5e>
    5c3e:	034b      	lsls	r3, r1, #13
    5c40:	1ac0      	subs	r0, r0, r3
    5c42:	4152      	adcs	r2, r2
    5c44:	0b03      	lsrs	r3, r0, #12
    5c46:	428b      	cmp	r3, r1
    5c48:	d301      	bcc.n	5c4e <__udivsi3+0x6a>
    5c4a:	030b      	lsls	r3, r1, #12
    5c4c:	1ac0      	subs	r0, r0, r3
    5c4e:	4152      	adcs	r2, r2
    5c50:	0ac3      	lsrs	r3, r0, #11
    5c52:	428b      	cmp	r3, r1
    5c54:	d301      	bcc.n	5c5a <__udivsi3+0x76>
    5c56:	02cb      	lsls	r3, r1, #11
    5c58:	1ac0      	subs	r0, r0, r3
    5c5a:	4152      	adcs	r2, r2
    5c5c:	0a83      	lsrs	r3, r0, #10
    5c5e:	428b      	cmp	r3, r1
    5c60:	d301      	bcc.n	5c66 <__udivsi3+0x82>
    5c62:	028b      	lsls	r3, r1, #10
    5c64:	1ac0      	subs	r0, r0, r3
    5c66:	4152      	adcs	r2, r2
    5c68:	0a43      	lsrs	r3, r0, #9
    5c6a:	428b      	cmp	r3, r1
    5c6c:	d301      	bcc.n	5c72 <__udivsi3+0x8e>
    5c6e:	024b      	lsls	r3, r1, #9
    5c70:	1ac0      	subs	r0, r0, r3
    5c72:	4152      	adcs	r2, r2
    5c74:	0a03      	lsrs	r3, r0, #8
    5c76:	428b      	cmp	r3, r1
    5c78:	d301      	bcc.n	5c7e <__udivsi3+0x9a>
    5c7a:	020b      	lsls	r3, r1, #8
    5c7c:	1ac0      	subs	r0, r0, r3
    5c7e:	4152      	adcs	r2, r2
    5c80:	d2cd      	bcs.n	5c1e <__udivsi3+0x3a>
    5c82:	09c3      	lsrs	r3, r0, #7
    5c84:	428b      	cmp	r3, r1
    5c86:	d301      	bcc.n	5c8c <__udivsi3+0xa8>
    5c88:	01cb      	lsls	r3, r1, #7
    5c8a:	1ac0      	subs	r0, r0, r3
    5c8c:	4152      	adcs	r2, r2
    5c8e:	0983      	lsrs	r3, r0, #6
    5c90:	428b      	cmp	r3, r1
    5c92:	d301      	bcc.n	5c98 <__udivsi3+0xb4>
    5c94:	018b      	lsls	r3, r1, #6
    5c96:	1ac0      	subs	r0, r0, r3
    5c98:	4152      	adcs	r2, r2
    5c9a:	0943      	lsrs	r3, r0, #5
    5c9c:	428b      	cmp	r3, r1
    5c9e:	d301      	bcc.n	5ca4 <__udivsi3+0xc0>
    5ca0:	014b      	lsls	r3, r1, #5
    5ca2:	1ac0      	subs	r0, r0, r3
    5ca4:	4152      	adcs	r2, r2
    5ca6:	0903      	lsrs	r3, r0, #4
    5ca8:	428b      	cmp	r3, r1
    5caa:	d301      	bcc.n	5cb0 <__udivsi3+0xcc>
    5cac:	010b      	lsls	r3, r1, #4
    5cae:	1ac0      	subs	r0, r0, r3
    5cb0:	4152      	adcs	r2, r2
    5cb2:	08c3      	lsrs	r3, r0, #3
    5cb4:	428b      	cmp	r3, r1
    5cb6:	d301      	bcc.n	5cbc <__udivsi3+0xd8>
    5cb8:	00cb      	lsls	r3, r1, #3
    5cba:	1ac0      	subs	r0, r0, r3
    5cbc:	4152      	adcs	r2, r2
    5cbe:	0883      	lsrs	r3, r0, #2
    5cc0:	428b      	cmp	r3, r1
    5cc2:	d301      	bcc.n	5cc8 <__udivsi3+0xe4>
    5cc4:	008b      	lsls	r3, r1, #2
    5cc6:	1ac0      	subs	r0, r0, r3
    5cc8:	4152      	adcs	r2, r2
    5cca:	0843      	lsrs	r3, r0, #1
    5ccc:	428b      	cmp	r3, r1
    5cce:	d301      	bcc.n	5cd4 <__udivsi3+0xf0>
    5cd0:	004b      	lsls	r3, r1, #1
    5cd2:	1ac0      	subs	r0, r0, r3
    5cd4:	4152      	adcs	r2, r2
    5cd6:	1a41      	subs	r1, r0, r1
    5cd8:	d200      	bcs.n	5cdc <__udivsi3+0xf8>
    5cda:	4601      	mov	r1, r0
    5cdc:	4152      	adcs	r2, r2
    5cde:	4610      	mov	r0, r2
    5ce0:	4770      	bx	lr
    5ce2:	e7ff      	b.n	5ce4 <__udivsi3+0x100>
    5ce4:	b501      	push	{r0, lr}
    5ce6:	2000      	movs	r0, #0
    5ce8:	f000 f8f0 	bl	5ecc <__aeabi_idiv0>
    5cec:	bd02      	pop	{r1, pc}
    5cee:	46c0      	nop			; (mov r8, r8)

00005cf0 <__aeabi_uidivmod>:
    5cf0:	2900      	cmp	r1, #0
    5cf2:	d0f7      	beq.n	5ce4 <__udivsi3+0x100>
    5cf4:	e776      	b.n	5be4 <__udivsi3>
    5cf6:	4770      	bx	lr

00005cf8 <__divsi3>:
    5cf8:	4603      	mov	r3, r0
    5cfa:	430b      	orrs	r3, r1
    5cfc:	d47f      	bmi.n	5dfe <__divsi3+0x106>
    5cfe:	2200      	movs	r2, #0
    5d00:	0843      	lsrs	r3, r0, #1
    5d02:	428b      	cmp	r3, r1
    5d04:	d374      	bcc.n	5df0 <__divsi3+0xf8>
    5d06:	0903      	lsrs	r3, r0, #4
    5d08:	428b      	cmp	r3, r1
    5d0a:	d35f      	bcc.n	5dcc <__divsi3+0xd4>
    5d0c:	0a03      	lsrs	r3, r0, #8
    5d0e:	428b      	cmp	r3, r1
    5d10:	d344      	bcc.n	5d9c <__divsi3+0xa4>
    5d12:	0b03      	lsrs	r3, r0, #12
    5d14:	428b      	cmp	r3, r1
    5d16:	d328      	bcc.n	5d6a <__divsi3+0x72>
    5d18:	0c03      	lsrs	r3, r0, #16
    5d1a:	428b      	cmp	r3, r1
    5d1c:	d30d      	bcc.n	5d3a <__divsi3+0x42>
    5d1e:	22ff      	movs	r2, #255	; 0xff
    5d20:	0209      	lsls	r1, r1, #8
    5d22:	ba12      	rev	r2, r2
    5d24:	0c03      	lsrs	r3, r0, #16
    5d26:	428b      	cmp	r3, r1
    5d28:	d302      	bcc.n	5d30 <__divsi3+0x38>
    5d2a:	1212      	asrs	r2, r2, #8
    5d2c:	0209      	lsls	r1, r1, #8
    5d2e:	d065      	beq.n	5dfc <__divsi3+0x104>
    5d30:	0b03      	lsrs	r3, r0, #12
    5d32:	428b      	cmp	r3, r1
    5d34:	d319      	bcc.n	5d6a <__divsi3+0x72>
    5d36:	e000      	b.n	5d3a <__divsi3+0x42>
    5d38:	0a09      	lsrs	r1, r1, #8
    5d3a:	0bc3      	lsrs	r3, r0, #15
    5d3c:	428b      	cmp	r3, r1
    5d3e:	d301      	bcc.n	5d44 <__divsi3+0x4c>
    5d40:	03cb      	lsls	r3, r1, #15
    5d42:	1ac0      	subs	r0, r0, r3
    5d44:	4152      	adcs	r2, r2
    5d46:	0b83      	lsrs	r3, r0, #14
    5d48:	428b      	cmp	r3, r1
    5d4a:	d301      	bcc.n	5d50 <__divsi3+0x58>
    5d4c:	038b      	lsls	r3, r1, #14
    5d4e:	1ac0      	subs	r0, r0, r3
    5d50:	4152      	adcs	r2, r2
    5d52:	0b43      	lsrs	r3, r0, #13
    5d54:	428b      	cmp	r3, r1
    5d56:	d301      	bcc.n	5d5c <__divsi3+0x64>
    5d58:	034b      	lsls	r3, r1, #13
    5d5a:	1ac0      	subs	r0, r0, r3
    5d5c:	4152      	adcs	r2, r2
    5d5e:	0b03      	lsrs	r3, r0, #12
    5d60:	428b      	cmp	r3, r1
    5d62:	d301      	bcc.n	5d68 <__divsi3+0x70>
    5d64:	030b      	lsls	r3, r1, #12
    5d66:	1ac0      	subs	r0, r0, r3
    5d68:	4152      	adcs	r2, r2
    5d6a:	0ac3      	lsrs	r3, r0, #11
    5d6c:	428b      	cmp	r3, r1
    5d6e:	d301      	bcc.n	5d74 <__divsi3+0x7c>
    5d70:	02cb      	lsls	r3, r1, #11
    5d72:	1ac0      	subs	r0, r0, r3
    5d74:	4152      	adcs	r2, r2
    5d76:	0a83      	lsrs	r3, r0, #10
    5d78:	428b      	cmp	r3, r1
    5d7a:	d301      	bcc.n	5d80 <__divsi3+0x88>
    5d7c:	028b      	lsls	r3, r1, #10
    5d7e:	1ac0      	subs	r0, r0, r3
    5d80:	4152      	adcs	r2, r2
    5d82:	0a43      	lsrs	r3, r0, #9
    5d84:	428b      	cmp	r3, r1
    5d86:	d301      	bcc.n	5d8c <__divsi3+0x94>
    5d88:	024b      	lsls	r3, r1, #9
    5d8a:	1ac0      	subs	r0, r0, r3
    5d8c:	4152      	adcs	r2, r2
    5d8e:	0a03      	lsrs	r3, r0, #8
    5d90:	428b      	cmp	r3, r1
    5d92:	d301      	bcc.n	5d98 <__divsi3+0xa0>
    5d94:	020b      	lsls	r3, r1, #8
    5d96:	1ac0      	subs	r0, r0, r3
    5d98:	4152      	adcs	r2, r2
    5d9a:	d2cd      	bcs.n	5d38 <__divsi3+0x40>
    5d9c:	09c3      	lsrs	r3, r0, #7
    5d9e:	428b      	cmp	r3, r1
    5da0:	d301      	bcc.n	5da6 <__divsi3+0xae>
    5da2:	01cb      	lsls	r3, r1, #7
    5da4:	1ac0      	subs	r0, r0, r3
    5da6:	4152      	adcs	r2, r2
    5da8:	0983      	lsrs	r3, r0, #6
    5daa:	428b      	cmp	r3, r1
    5dac:	d301      	bcc.n	5db2 <__divsi3+0xba>
    5dae:	018b      	lsls	r3, r1, #6
    5db0:	1ac0      	subs	r0, r0, r3
    5db2:	4152      	adcs	r2, r2
    5db4:	0943      	lsrs	r3, r0, #5
    5db6:	428b      	cmp	r3, r1
    5db8:	d301      	bcc.n	5dbe <__divsi3+0xc6>
    5dba:	014b      	lsls	r3, r1, #5
    5dbc:	1ac0      	subs	r0, r0, r3
    5dbe:	4152      	adcs	r2, r2
    5dc0:	0903      	lsrs	r3, r0, #4
    5dc2:	428b      	cmp	r3, r1
    5dc4:	d301      	bcc.n	5dca <__divsi3+0xd2>
    5dc6:	010b      	lsls	r3, r1, #4
    5dc8:	1ac0      	subs	r0, r0, r3
    5dca:	4152      	adcs	r2, r2
    5dcc:	08c3      	lsrs	r3, r0, #3
    5dce:	428b      	cmp	r3, r1
    5dd0:	d301      	bcc.n	5dd6 <__divsi3+0xde>
    5dd2:	00cb      	lsls	r3, r1, #3
    5dd4:	1ac0      	subs	r0, r0, r3
    5dd6:	4152      	adcs	r2, r2
    5dd8:	0883      	lsrs	r3, r0, #2
    5dda:	428b      	cmp	r3, r1
    5ddc:	d301      	bcc.n	5de2 <__divsi3+0xea>
    5dde:	008b      	lsls	r3, r1, #2
    5de0:	1ac0      	subs	r0, r0, r3
    5de2:	4152      	adcs	r2, r2
    5de4:	0843      	lsrs	r3, r0, #1
    5de6:	428b      	cmp	r3, r1
    5de8:	d301      	bcc.n	5dee <__divsi3+0xf6>
    5dea:	004b      	lsls	r3, r1, #1
    5dec:	1ac0      	subs	r0, r0, r3
    5dee:	4152      	adcs	r2, r2
    5df0:	1a41      	subs	r1, r0, r1
    5df2:	d200      	bcs.n	5df6 <__divsi3+0xfe>
    5df4:	4601      	mov	r1, r0
    5df6:	4152      	adcs	r2, r2
    5df8:	4610      	mov	r0, r2
    5dfa:	4770      	bx	lr
    5dfc:	e05d      	b.n	5eba <__divsi3+0x1c2>
    5dfe:	0fca      	lsrs	r2, r1, #31
    5e00:	d000      	beq.n	5e04 <__divsi3+0x10c>
    5e02:	4249      	negs	r1, r1
    5e04:	1003      	asrs	r3, r0, #32
    5e06:	d300      	bcc.n	5e0a <__divsi3+0x112>
    5e08:	4240      	negs	r0, r0
    5e0a:	4053      	eors	r3, r2
    5e0c:	2200      	movs	r2, #0
    5e0e:	469c      	mov	ip, r3
    5e10:	0903      	lsrs	r3, r0, #4
    5e12:	428b      	cmp	r3, r1
    5e14:	d32d      	bcc.n	5e72 <__divsi3+0x17a>
    5e16:	0a03      	lsrs	r3, r0, #8
    5e18:	428b      	cmp	r3, r1
    5e1a:	d312      	bcc.n	5e42 <__divsi3+0x14a>
    5e1c:	22fc      	movs	r2, #252	; 0xfc
    5e1e:	0189      	lsls	r1, r1, #6
    5e20:	ba12      	rev	r2, r2
    5e22:	0a03      	lsrs	r3, r0, #8
    5e24:	428b      	cmp	r3, r1
    5e26:	d30c      	bcc.n	5e42 <__divsi3+0x14a>
    5e28:	0189      	lsls	r1, r1, #6
    5e2a:	1192      	asrs	r2, r2, #6
    5e2c:	428b      	cmp	r3, r1
    5e2e:	d308      	bcc.n	5e42 <__divsi3+0x14a>
    5e30:	0189      	lsls	r1, r1, #6
    5e32:	1192      	asrs	r2, r2, #6
    5e34:	428b      	cmp	r3, r1
    5e36:	d304      	bcc.n	5e42 <__divsi3+0x14a>
    5e38:	0189      	lsls	r1, r1, #6
    5e3a:	d03a      	beq.n	5eb2 <__divsi3+0x1ba>
    5e3c:	1192      	asrs	r2, r2, #6
    5e3e:	e000      	b.n	5e42 <__divsi3+0x14a>
    5e40:	0989      	lsrs	r1, r1, #6
    5e42:	09c3      	lsrs	r3, r0, #7
    5e44:	428b      	cmp	r3, r1
    5e46:	d301      	bcc.n	5e4c <__divsi3+0x154>
    5e48:	01cb      	lsls	r3, r1, #7
    5e4a:	1ac0      	subs	r0, r0, r3
    5e4c:	4152      	adcs	r2, r2
    5e4e:	0983      	lsrs	r3, r0, #6
    5e50:	428b      	cmp	r3, r1
    5e52:	d301      	bcc.n	5e58 <__divsi3+0x160>
    5e54:	018b      	lsls	r3, r1, #6
    5e56:	1ac0      	subs	r0, r0, r3
    5e58:	4152      	adcs	r2, r2
    5e5a:	0943      	lsrs	r3, r0, #5
    5e5c:	428b      	cmp	r3, r1
    5e5e:	d301      	bcc.n	5e64 <__divsi3+0x16c>
    5e60:	014b      	lsls	r3, r1, #5
    5e62:	1ac0      	subs	r0, r0, r3
    5e64:	4152      	adcs	r2, r2
    5e66:	0903      	lsrs	r3, r0, #4
    5e68:	428b      	cmp	r3, r1
    5e6a:	d301      	bcc.n	5e70 <__divsi3+0x178>
    5e6c:	010b      	lsls	r3, r1, #4
    5e6e:	1ac0      	subs	r0, r0, r3
    5e70:	4152      	adcs	r2, r2
    5e72:	08c3      	lsrs	r3, r0, #3
    5e74:	428b      	cmp	r3, r1
    5e76:	d301      	bcc.n	5e7c <__divsi3+0x184>
    5e78:	00cb      	lsls	r3, r1, #3
    5e7a:	1ac0      	subs	r0, r0, r3
    5e7c:	4152      	adcs	r2, r2
    5e7e:	0883      	lsrs	r3, r0, #2
    5e80:	428b      	cmp	r3, r1
    5e82:	d301      	bcc.n	5e88 <__divsi3+0x190>
    5e84:	008b      	lsls	r3, r1, #2
    5e86:	1ac0      	subs	r0, r0, r3
    5e88:	4152      	adcs	r2, r2
    5e8a:	d2d9      	bcs.n	5e40 <__divsi3+0x148>
    5e8c:	0843      	lsrs	r3, r0, #1
    5e8e:	428b      	cmp	r3, r1
    5e90:	d301      	bcc.n	5e96 <__divsi3+0x19e>
    5e92:	004b      	lsls	r3, r1, #1
    5e94:	1ac0      	subs	r0, r0, r3
    5e96:	4152      	adcs	r2, r2
    5e98:	1a41      	subs	r1, r0, r1
    5e9a:	d200      	bcs.n	5e9e <__divsi3+0x1a6>
    5e9c:	4601      	mov	r1, r0
    5e9e:	4663      	mov	r3, ip
    5ea0:	4152      	adcs	r2, r2
    5ea2:	105b      	asrs	r3, r3, #1
    5ea4:	4610      	mov	r0, r2
    5ea6:	d301      	bcc.n	5eac <__divsi3+0x1b4>
    5ea8:	4240      	negs	r0, r0
    5eaa:	2b00      	cmp	r3, #0
    5eac:	d500      	bpl.n	5eb0 <__divsi3+0x1b8>
    5eae:	4249      	negs	r1, r1
    5eb0:	4770      	bx	lr
    5eb2:	4663      	mov	r3, ip
    5eb4:	105b      	asrs	r3, r3, #1
    5eb6:	d300      	bcc.n	5eba <__divsi3+0x1c2>
    5eb8:	4240      	negs	r0, r0
    5eba:	b501      	push	{r0, lr}
    5ebc:	2000      	movs	r0, #0
    5ebe:	f000 f805 	bl	5ecc <__aeabi_idiv0>
    5ec2:	bd02      	pop	{r1, pc}

00005ec4 <__aeabi_idivmod>:
    5ec4:	2900      	cmp	r1, #0
    5ec6:	d0f8      	beq.n	5eba <__divsi3+0x1c2>
    5ec8:	e716      	b.n	5cf8 <__divsi3>
    5eca:	4770      	bx	lr

00005ecc <__aeabi_idiv0>:
    5ecc:	4770      	bx	lr
    5ece:	46c0      	nop			; (mov r8, r8)

00005ed0 <__aeabi_uldivmod>:
    5ed0:	2b00      	cmp	r3, #0
    5ed2:	d111      	bne.n	5ef8 <__aeabi_uldivmod+0x28>
    5ed4:	2a00      	cmp	r2, #0
    5ed6:	d10f      	bne.n	5ef8 <__aeabi_uldivmod+0x28>
    5ed8:	2900      	cmp	r1, #0
    5eda:	d100      	bne.n	5ede <__aeabi_uldivmod+0xe>
    5edc:	2800      	cmp	r0, #0
    5ede:	d002      	beq.n	5ee6 <__aeabi_uldivmod+0x16>
    5ee0:	2100      	movs	r1, #0
    5ee2:	43c9      	mvns	r1, r1
    5ee4:	1c08      	adds	r0, r1, #0
    5ee6:	b407      	push	{r0, r1, r2}
    5ee8:	4802      	ldr	r0, [pc, #8]	; (5ef4 <__aeabi_uldivmod+0x24>)
    5eea:	a102      	add	r1, pc, #8	; (adr r1, 5ef4 <__aeabi_uldivmod+0x24>)
    5eec:	1840      	adds	r0, r0, r1
    5eee:	9002      	str	r0, [sp, #8]
    5ef0:	bd03      	pop	{r0, r1, pc}
    5ef2:	46c0      	nop			; (mov r8, r8)
    5ef4:	ffffffd9 	.word	0xffffffd9
    5ef8:	b403      	push	{r0, r1}
    5efa:	4668      	mov	r0, sp
    5efc:	b501      	push	{r0, lr}
    5efe:	9802      	ldr	r0, [sp, #8]
    5f00:	f000 f830 	bl	5f64 <__udivmoddi4>
    5f04:	9b01      	ldr	r3, [sp, #4]
    5f06:	469e      	mov	lr, r3
    5f08:	b002      	add	sp, #8
    5f0a:	bc0c      	pop	{r2, r3}
    5f0c:	4770      	bx	lr
    5f0e:	46c0      	nop			; (mov r8, r8)

00005f10 <__aeabi_lmul>:
    5f10:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f12:	46ce      	mov	lr, r9
    5f14:	4647      	mov	r7, r8
    5f16:	0415      	lsls	r5, r2, #16
    5f18:	0c2d      	lsrs	r5, r5, #16
    5f1a:	002e      	movs	r6, r5
    5f1c:	b580      	push	{r7, lr}
    5f1e:	0407      	lsls	r7, r0, #16
    5f20:	0c14      	lsrs	r4, r2, #16
    5f22:	0c3f      	lsrs	r7, r7, #16
    5f24:	4699      	mov	r9, r3
    5f26:	0c03      	lsrs	r3, r0, #16
    5f28:	437e      	muls	r6, r7
    5f2a:	435d      	muls	r5, r3
    5f2c:	4367      	muls	r7, r4
    5f2e:	4363      	muls	r3, r4
    5f30:	197f      	adds	r7, r7, r5
    5f32:	0c34      	lsrs	r4, r6, #16
    5f34:	19e4      	adds	r4, r4, r7
    5f36:	469c      	mov	ip, r3
    5f38:	42a5      	cmp	r5, r4
    5f3a:	d903      	bls.n	5f44 <__aeabi_lmul+0x34>
    5f3c:	2380      	movs	r3, #128	; 0x80
    5f3e:	025b      	lsls	r3, r3, #9
    5f40:	4698      	mov	r8, r3
    5f42:	44c4      	add	ip, r8
    5f44:	464b      	mov	r3, r9
    5f46:	4351      	muls	r1, r2
    5f48:	4343      	muls	r3, r0
    5f4a:	0436      	lsls	r6, r6, #16
    5f4c:	0c36      	lsrs	r6, r6, #16
    5f4e:	0c25      	lsrs	r5, r4, #16
    5f50:	0424      	lsls	r4, r4, #16
    5f52:	4465      	add	r5, ip
    5f54:	19a4      	adds	r4, r4, r6
    5f56:	1859      	adds	r1, r3, r1
    5f58:	1949      	adds	r1, r1, r5
    5f5a:	0020      	movs	r0, r4
    5f5c:	bc0c      	pop	{r2, r3}
    5f5e:	4690      	mov	r8, r2
    5f60:	4699      	mov	r9, r3
    5f62:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005f64 <__udivmoddi4>:
    5f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f66:	4657      	mov	r7, sl
    5f68:	464e      	mov	r6, r9
    5f6a:	4645      	mov	r5, r8
    5f6c:	46de      	mov	lr, fp
    5f6e:	b5e0      	push	{r5, r6, r7, lr}
    5f70:	0004      	movs	r4, r0
    5f72:	b083      	sub	sp, #12
    5f74:	000d      	movs	r5, r1
    5f76:	4692      	mov	sl, r2
    5f78:	4699      	mov	r9, r3
    5f7a:	428b      	cmp	r3, r1
    5f7c:	d82f      	bhi.n	5fde <__udivmoddi4+0x7a>
    5f7e:	d02c      	beq.n	5fda <__udivmoddi4+0x76>
    5f80:	4649      	mov	r1, r9
    5f82:	4650      	mov	r0, sl
    5f84:	f000 f8ae 	bl	60e4 <__clzdi2>
    5f88:	0029      	movs	r1, r5
    5f8a:	0006      	movs	r6, r0
    5f8c:	0020      	movs	r0, r4
    5f8e:	f000 f8a9 	bl	60e4 <__clzdi2>
    5f92:	1a33      	subs	r3, r6, r0
    5f94:	4698      	mov	r8, r3
    5f96:	3b20      	subs	r3, #32
    5f98:	469b      	mov	fp, r3
    5f9a:	d500      	bpl.n	5f9e <__udivmoddi4+0x3a>
    5f9c:	e074      	b.n	6088 <__udivmoddi4+0x124>
    5f9e:	4653      	mov	r3, sl
    5fa0:	465a      	mov	r2, fp
    5fa2:	4093      	lsls	r3, r2
    5fa4:	001f      	movs	r7, r3
    5fa6:	4653      	mov	r3, sl
    5fa8:	4642      	mov	r2, r8
    5faa:	4093      	lsls	r3, r2
    5fac:	001e      	movs	r6, r3
    5fae:	42af      	cmp	r7, r5
    5fb0:	d829      	bhi.n	6006 <__udivmoddi4+0xa2>
    5fb2:	d026      	beq.n	6002 <__udivmoddi4+0x9e>
    5fb4:	465b      	mov	r3, fp
    5fb6:	1ba4      	subs	r4, r4, r6
    5fb8:	41bd      	sbcs	r5, r7
    5fba:	2b00      	cmp	r3, #0
    5fbc:	da00      	bge.n	5fc0 <__udivmoddi4+0x5c>
    5fbe:	e079      	b.n	60b4 <__udivmoddi4+0x150>
    5fc0:	2200      	movs	r2, #0
    5fc2:	2300      	movs	r3, #0
    5fc4:	9200      	str	r2, [sp, #0]
    5fc6:	9301      	str	r3, [sp, #4]
    5fc8:	2301      	movs	r3, #1
    5fca:	465a      	mov	r2, fp
    5fcc:	4093      	lsls	r3, r2
    5fce:	9301      	str	r3, [sp, #4]
    5fd0:	2301      	movs	r3, #1
    5fd2:	4642      	mov	r2, r8
    5fd4:	4093      	lsls	r3, r2
    5fd6:	9300      	str	r3, [sp, #0]
    5fd8:	e019      	b.n	600e <__udivmoddi4+0xaa>
    5fda:	4282      	cmp	r2, r0
    5fdc:	d9d0      	bls.n	5f80 <__udivmoddi4+0x1c>
    5fde:	2200      	movs	r2, #0
    5fe0:	2300      	movs	r3, #0
    5fe2:	9200      	str	r2, [sp, #0]
    5fe4:	9301      	str	r3, [sp, #4]
    5fe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5fe8:	2b00      	cmp	r3, #0
    5fea:	d001      	beq.n	5ff0 <__udivmoddi4+0x8c>
    5fec:	601c      	str	r4, [r3, #0]
    5fee:	605d      	str	r5, [r3, #4]
    5ff0:	9800      	ldr	r0, [sp, #0]
    5ff2:	9901      	ldr	r1, [sp, #4]
    5ff4:	b003      	add	sp, #12
    5ff6:	bc3c      	pop	{r2, r3, r4, r5}
    5ff8:	4690      	mov	r8, r2
    5ffa:	4699      	mov	r9, r3
    5ffc:	46a2      	mov	sl, r4
    5ffe:	46ab      	mov	fp, r5
    6000:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6002:	42a3      	cmp	r3, r4
    6004:	d9d6      	bls.n	5fb4 <__udivmoddi4+0x50>
    6006:	2200      	movs	r2, #0
    6008:	2300      	movs	r3, #0
    600a:	9200      	str	r2, [sp, #0]
    600c:	9301      	str	r3, [sp, #4]
    600e:	4643      	mov	r3, r8
    6010:	2b00      	cmp	r3, #0
    6012:	d0e8      	beq.n	5fe6 <__udivmoddi4+0x82>
    6014:	07fb      	lsls	r3, r7, #31
    6016:	0872      	lsrs	r2, r6, #1
    6018:	431a      	orrs	r2, r3
    601a:	4646      	mov	r6, r8
    601c:	087b      	lsrs	r3, r7, #1
    601e:	e00e      	b.n	603e <__udivmoddi4+0xda>
    6020:	42ab      	cmp	r3, r5
    6022:	d101      	bne.n	6028 <__udivmoddi4+0xc4>
    6024:	42a2      	cmp	r2, r4
    6026:	d80c      	bhi.n	6042 <__udivmoddi4+0xde>
    6028:	1aa4      	subs	r4, r4, r2
    602a:	419d      	sbcs	r5, r3
    602c:	2001      	movs	r0, #1
    602e:	1924      	adds	r4, r4, r4
    6030:	416d      	adcs	r5, r5
    6032:	2100      	movs	r1, #0
    6034:	3e01      	subs	r6, #1
    6036:	1824      	adds	r4, r4, r0
    6038:	414d      	adcs	r5, r1
    603a:	2e00      	cmp	r6, #0
    603c:	d006      	beq.n	604c <__udivmoddi4+0xe8>
    603e:	42ab      	cmp	r3, r5
    6040:	d9ee      	bls.n	6020 <__udivmoddi4+0xbc>
    6042:	3e01      	subs	r6, #1
    6044:	1924      	adds	r4, r4, r4
    6046:	416d      	adcs	r5, r5
    6048:	2e00      	cmp	r6, #0
    604a:	d1f8      	bne.n	603e <__udivmoddi4+0xda>
    604c:	465b      	mov	r3, fp
    604e:	9800      	ldr	r0, [sp, #0]
    6050:	9901      	ldr	r1, [sp, #4]
    6052:	1900      	adds	r0, r0, r4
    6054:	4169      	adcs	r1, r5
    6056:	2b00      	cmp	r3, #0
    6058:	db22      	blt.n	60a0 <__udivmoddi4+0x13c>
    605a:	002b      	movs	r3, r5
    605c:	465a      	mov	r2, fp
    605e:	40d3      	lsrs	r3, r2
    6060:	002a      	movs	r2, r5
    6062:	4644      	mov	r4, r8
    6064:	40e2      	lsrs	r2, r4
    6066:	001c      	movs	r4, r3
    6068:	465b      	mov	r3, fp
    606a:	0015      	movs	r5, r2
    606c:	2b00      	cmp	r3, #0
    606e:	db2c      	blt.n	60ca <__udivmoddi4+0x166>
    6070:	0026      	movs	r6, r4
    6072:	409e      	lsls	r6, r3
    6074:	0033      	movs	r3, r6
    6076:	0026      	movs	r6, r4
    6078:	4647      	mov	r7, r8
    607a:	40be      	lsls	r6, r7
    607c:	0032      	movs	r2, r6
    607e:	1a80      	subs	r0, r0, r2
    6080:	4199      	sbcs	r1, r3
    6082:	9000      	str	r0, [sp, #0]
    6084:	9101      	str	r1, [sp, #4]
    6086:	e7ae      	b.n	5fe6 <__udivmoddi4+0x82>
    6088:	4642      	mov	r2, r8
    608a:	2320      	movs	r3, #32
    608c:	1a9b      	subs	r3, r3, r2
    608e:	4652      	mov	r2, sl
    6090:	40da      	lsrs	r2, r3
    6092:	4641      	mov	r1, r8
    6094:	0013      	movs	r3, r2
    6096:	464a      	mov	r2, r9
    6098:	408a      	lsls	r2, r1
    609a:	0017      	movs	r7, r2
    609c:	431f      	orrs	r7, r3
    609e:	e782      	b.n	5fa6 <__udivmoddi4+0x42>
    60a0:	4642      	mov	r2, r8
    60a2:	2320      	movs	r3, #32
    60a4:	1a9b      	subs	r3, r3, r2
    60a6:	002a      	movs	r2, r5
    60a8:	4646      	mov	r6, r8
    60aa:	409a      	lsls	r2, r3
    60ac:	0023      	movs	r3, r4
    60ae:	40f3      	lsrs	r3, r6
    60b0:	4313      	orrs	r3, r2
    60b2:	e7d5      	b.n	6060 <__udivmoddi4+0xfc>
    60b4:	4642      	mov	r2, r8
    60b6:	2320      	movs	r3, #32
    60b8:	2100      	movs	r1, #0
    60ba:	1a9b      	subs	r3, r3, r2
    60bc:	2200      	movs	r2, #0
    60be:	9100      	str	r1, [sp, #0]
    60c0:	9201      	str	r2, [sp, #4]
    60c2:	2201      	movs	r2, #1
    60c4:	40da      	lsrs	r2, r3
    60c6:	9201      	str	r2, [sp, #4]
    60c8:	e782      	b.n	5fd0 <__udivmoddi4+0x6c>
    60ca:	4642      	mov	r2, r8
    60cc:	2320      	movs	r3, #32
    60ce:	0026      	movs	r6, r4
    60d0:	1a9b      	subs	r3, r3, r2
    60d2:	40de      	lsrs	r6, r3
    60d4:	002f      	movs	r7, r5
    60d6:	46b4      	mov	ip, r6
    60d8:	4097      	lsls	r7, r2
    60da:	4666      	mov	r6, ip
    60dc:	003b      	movs	r3, r7
    60de:	4333      	orrs	r3, r6
    60e0:	e7c9      	b.n	6076 <__udivmoddi4+0x112>
    60e2:	46c0      	nop			; (mov r8, r8)

000060e4 <__clzdi2>:
    60e4:	b510      	push	{r4, lr}
    60e6:	2900      	cmp	r1, #0
    60e8:	d103      	bne.n	60f2 <__clzdi2+0xe>
    60ea:	f000 f807 	bl	60fc <__clzsi2>
    60ee:	3020      	adds	r0, #32
    60f0:	e002      	b.n	60f8 <__clzdi2+0x14>
    60f2:	1c08      	adds	r0, r1, #0
    60f4:	f000 f802 	bl	60fc <__clzsi2>
    60f8:	bd10      	pop	{r4, pc}
    60fa:	46c0      	nop			; (mov r8, r8)

000060fc <__clzsi2>:
    60fc:	211c      	movs	r1, #28
    60fe:	2301      	movs	r3, #1
    6100:	041b      	lsls	r3, r3, #16
    6102:	4298      	cmp	r0, r3
    6104:	d301      	bcc.n	610a <__clzsi2+0xe>
    6106:	0c00      	lsrs	r0, r0, #16
    6108:	3910      	subs	r1, #16
    610a:	0a1b      	lsrs	r3, r3, #8
    610c:	4298      	cmp	r0, r3
    610e:	d301      	bcc.n	6114 <__clzsi2+0x18>
    6110:	0a00      	lsrs	r0, r0, #8
    6112:	3908      	subs	r1, #8
    6114:	091b      	lsrs	r3, r3, #4
    6116:	4298      	cmp	r0, r3
    6118:	d301      	bcc.n	611e <__clzsi2+0x22>
    611a:	0900      	lsrs	r0, r0, #4
    611c:	3904      	subs	r1, #4
    611e:	a202      	add	r2, pc, #8	; (adr r2, 6128 <__clzsi2+0x2c>)
    6120:	5c10      	ldrb	r0, [r2, r0]
    6122:	1840      	adds	r0, r0, r1
    6124:	4770      	bx	lr
    6126:	46c0      	nop			; (mov r8, r8)
    6128:	02020304 	.word	0x02020304
    612c:	01010101 	.word	0x01010101
	...

00006138 <atoi>:
    6138:	b510      	push	{r4, lr}
    613a:	220a      	movs	r2, #10
    613c:	2100      	movs	r1, #0
    613e:	f000 f9a1 	bl	6484 <strtol>
    6142:	bd10      	pop	{r4, pc}

00006144 <__libc_init_array>:
    6144:	b570      	push	{r4, r5, r6, lr}
    6146:	2600      	movs	r6, #0
    6148:	4d0c      	ldr	r5, [pc, #48]	; (617c <__libc_init_array+0x38>)
    614a:	4c0d      	ldr	r4, [pc, #52]	; (6180 <__libc_init_array+0x3c>)
    614c:	1b64      	subs	r4, r4, r5
    614e:	10a4      	asrs	r4, r4, #2
    6150:	42a6      	cmp	r6, r4
    6152:	d109      	bne.n	6168 <__libc_init_array+0x24>
    6154:	2600      	movs	r6, #0
    6156:	f001 faa7 	bl	76a8 <_init>
    615a:	4d0a      	ldr	r5, [pc, #40]	; (6184 <__libc_init_array+0x40>)
    615c:	4c0a      	ldr	r4, [pc, #40]	; (6188 <__libc_init_array+0x44>)
    615e:	1b64      	subs	r4, r4, r5
    6160:	10a4      	asrs	r4, r4, #2
    6162:	42a6      	cmp	r6, r4
    6164:	d105      	bne.n	6172 <__libc_init_array+0x2e>
    6166:	bd70      	pop	{r4, r5, r6, pc}
    6168:	00b3      	lsls	r3, r6, #2
    616a:	58eb      	ldr	r3, [r5, r3]
    616c:	4798      	blx	r3
    616e:	3601      	adds	r6, #1
    6170:	e7ee      	b.n	6150 <__libc_init_array+0xc>
    6172:	00b3      	lsls	r3, r6, #2
    6174:	58eb      	ldr	r3, [r5, r3]
    6176:	4798      	blx	r3
    6178:	3601      	adds	r6, #1
    617a:	e7f2      	b.n	6162 <__libc_init_array+0x1e>
    617c:	000076b4 	.word	0x000076b4
    6180:	000076b4 	.word	0x000076b4
    6184:	000076b4 	.word	0x000076b4
    6188:	000076b8 	.word	0x000076b8

0000618c <malloc>:
    618c:	b510      	push	{r4, lr}
    618e:	4b03      	ldr	r3, [pc, #12]	; (619c <malloc+0x10>)
    6190:	0001      	movs	r1, r0
    6192:	6818      	ldr	r0, [r3, #0]
    6194:	f000 f856 	bl	6244 <_malloc_r>
    6198:	bd10      	pop	{r4, pc}
    619a:	46c0      	nop			; (mov r8, r8)
    619c:	20000034 	.word	0x20000034

000061a0 <memset>:
    61a0:	0003      	movs	r3, r0
    61a2:	1882      	adds	r2, r0, r2
    61a4:	4293      	cmp	r3, r2
    61a6:	d100      	bne.n	61aa <memset+0xa>
    61a8:	4770      	bx	lr
    61aa:	7019      	strb	r1, [r3, #0]
    61ac:	3301      	adds	r3, #1
    61ae:	e7f9      	b.n	61a4 <memset+0x4>

000061b0 <_free_r>:
    61b0:	b570      	push	{r4, r5, r6, lr}
    61b2:	0005      	movs	r5, r0
    61b4:	2900      	cmp	r1, #0
    61b6:	d010      	beq.n	61da <_free_r+0x2a>
    61b8:	1f0c      	subs	r4, r1, #4
    61ba:	6823      	ldr	r3, [r4, #0]
    61bc:	2b00      	cmp	r3, #0
    61be:	da00      	bge.n	61c2 <_free_r+0x12>
    61c0:	18e4      	adds	r4, r4, r3
    61c2:	0028      	movs	r0, r5
    61c4:	f000 f987 	bl	64d6 <__malloc_lock>
    61c8:	4a1d      	ldr	r2, [pc, #116]	; (6240 <_free_r+0x90>)
    61ca:	6813      	ldr	r3, [r2, #0]
    61cc:	2b00      	cmp	r3, #0
    61ce:	d105      	bne.n	61dc <_free_r+0x2c>
    61d0:	6063      	str	r3, [r4, #4]
    61d2:	6014      	str	r4, [r2, #0]
    61d4:	0028      	movs	r0, r5
    61d6:	f000 f97f 	bl	64d8 <__malloc_unlock>
    61da:	bd70      	pop	{r4, r5, r6, pc}
    61dc:	42a3      	cmp	r3, r4
    61de:	d909      	bls.n	61f4 <_free_r+0x44>
    61e0:	6821      	ldr	r1, [r4, #0]
    61e2:	1860      	adds	r0, r4, r1
    61e4:	4283      	cmp	r3, r0
    61e6:	d1f3      	bne.n	61d0 <_free_r+0x20>
    61e8:	6818      	ldr	r0, [r3, #0]
    61ea:	685b      	ldr	r3, [r3, #4]
    61ec:	1841      	adds	r1, r0, r1
    61ee:	6021      	str	r1, [r4, #0]
    61f0:	e7ee      	b.n	61d0 <_free_r+0x20>
    61f2:	0013      	movs	r3, r2
    61f4:	685a      	ldr	r2, [r3, #4]
    61f6:	2a00      	cmp	r2, #0
    61f8:	d001      	beq.n	61fe <_free_r+0x4e>
    61fa:	42a2      	cmp	r2, r4
    61fc:	d9f9      	bls.n	61f2 <_free_r+0x42>
    61fe:	6819      	ldr	r1, [r3, #0]
    6200:	1858      	adds	r0, r3, r1
    6202:	42a0      	cmp	r0, r4
    6204:	d10b      	bne.n	621e <_free_r+0x6e>
    6206:	6820      	ldr	r0, [r4, #0]
    6208:	1809      	adds	r1, r1, r0
    620a:	1858      	adds	r0, r3, r1
    620c:	6019      	str	r1, [r3, #0]
    620e:	4282      	cmp	r2, r0
    6210:	d1e0      	bne.n	61d4 <_free_r+0x24>
    6212:	6810      	ldr	r0, [r2, #0]
    6214:	6852      	ldr	r2, [r2, #4]
    6216:	1841      	adds	r1, r0, r1
    6218:	6019      	str	r1, [r3, #0]
    621a:	605a      	str	r2, [r3, #4]
    621c:	e7da      	b.n	61d4 <_free_r+0x24>
    621e:	42a0      	cmp	r0, r4
    6220:	d902      	bls.n	6228 <_free_r+0x78>
    6222:	230c      	movs	r3, #12
    6224:	602b      	str	r3, [r5, #0]
    6226:	e7d5      	b.n	61d4 <_free_r+0x24>
    6228:	6821      	ldr	r1, [r4, #0]
    622a:	1860      	adds	r0, r4, r1
    622c:	4282      	cmp	r2, r0
    622e:	d103      	bne.n	6238 <_free_r+0x88>
    6230:	6810      	ldr	r0, [r2, #0]
    6232:	6852      	ldr	r2, [r2, #4]
    6234:	1841      	adds	r1, r0, r1
    6236:	6021      	str	r1, [r4, #0]
    6238:	6062      	str	r2, [r4, #4]
    623a:	605c      	str	r4, [r3, #4]
    623c:	e7ca      	b.n	61d4 <_free_r+0x24>
    623e:	46c0      	nop			; (mov r8, r8)
    6240:	20000324 	.word	0x20000324

00006244 <_malloc_r>:
    6244:	2303      	movs	r3, #3
    6246:	b570      	push	{r4, r5, r6, lr}
    6248:	1ccd      	adds	r5, r1, #3
    624a:	439d      	bics	r5, r3
    624c:	3508      	adds	r5, #8
    624e:	0006      	movs	r6, r0
    6250:	2d0c      	cmp	r5, #12
    6252:	d21e      	bcs.n	6292 <_malloc_r+0x4e>
    6254:	250c      	movs	r5, #12
    6256:	42a9      	cmp	r1, r5
    6258:	d81d      	bhi.n	6296 <_malloc_r+0x52>
    625a:	0030      	movs	r0, r6
    625c:	f000 f93b 	bl	64d6 <__malloc_lock>
    6260:	4a25      	ldr	r2, [pc, #148]	; (62f8 <_malloc_r+0xb4>)
    6262:	6814      	ldr	r4, [r2, #0]
    6264:	0021      	movs	r1, r4
    6266:	2900      	cmp	r1, #0
    6268:	d119      	bne.n	629e <_malloc_r+0x5a>
    626a:	4c24      	ldr	r4, [pc, #144]	; (62fc <_malloc_r+0xb8>)
    626c:	6823      	ldr	r3, [r4, #0]
    626e:	2b00      	cmp	r3, #0
    6270:	d103      	bne.n	627a <_malloc_r+0x36>
    6272:	0030      	movs	r0, r6
    6274:	f000 f844 	bl	6300 <_sbrk_r>
    6278:	6020      	str	r0, [r4, #0]
    627a:	0029      	movs	r1, r5
    627c:	0030      	movs	r0, r6
    627e:	f000 f83f 	bl	6300 <_sbrk_r>
    6282:	1c43      	adds	r3, r0, #1
    6284:	d12c      	bne.n	62e0 <_malloc_r+0x9c>
    6286:	230c      	movs	r3, #12
    6288:	0030      	movs	r0, r6
    628a:	6033      	str	r3, [r6, #0]
    628c:	f000 f924 	bl	64d8 <__malloc_unlock>
    6290:	e003      	b.n	629a <_malloc_r+0x56>
    6292:	2d00      	cmp	r5, #0
    6294:	dadf      	bge.n	6256 <_malloc_r+0x12>
    6296:	230c      	movs	r3, #12
    6298:	6033      	str	r3, [r6, #0]
    629a:	2000      	movs	r0, #0
    629c:	bd70      	pop	{r4, r5, r6, pc}
    629e:	680b      	ldr	r3, [r1, #0]
    62a0:	1b5b      	subs	r3, r3, r5
    62a2:	d41a      	bmi.n	62da <_malloc_r+0x96>
    62a4:	2b0b      	cmp	r3, #11
    62a6:	d903      	bls.n	62b0 <_malloc_r+0x6c>
    62a8:	600b      	str	r3, [r1, #0]
    62aa:	18cc      	adds	r4, r1, r3
    62ac:	6025      	str	r5, [r4, #0]
    62ae:	e003      	b.n	62b8 <_malloc_r+0x74>
    62b0:	428c      	cmp	r4, r1
    62b2:	d10e      	bne.n	62d2 <_malloc_r+0x8e>
    62b4:	6863      	ldr	r3, [r4, #4]
    62b6:	6013      	str	r3, [r2, #0]
    62b8:	0030      	movs	r0, r6
    62ba:	f000 f90d 	bl	64d8 <__malloc_unlock>
    62be:	0020      	movs	r0, r4
    62c0:	2207      	movs	r2, #7
    62c2:	300b      	adds	r0, #11
    62c4:	1d23      	adds	r3, r4, #4
    62c6:	4390      	bics	r0, r2
    62c8:	1ac3      	subs	r3, r0, r3
    62ca:	d0e7      	beq.n	629c <_malloc_r+0x58>
    62cc:	425a      	negs	r2, r3
    62ce:	50e2      	str	r2, [r4, r3]
    62d0:	e7e4      	b.n	629c <_malloc_r+0x58>
    62d2:	684b      	ldr	r3, [r1, #4]
    62d4:	6063      	str	r3, [r4, #4]
    62d6:	000c      	movs	r4, r1
    62d8:	e7ee      	b.n	62b8 <_malloc_r+0x74>
    62da:	000c      	movs	r4, r1
    62dc:	6849      	ldr	r1, [r1, #4]
    62de:	e7c2      	b.n	6266 <_malloc_r+0x22>
    62e0:	2303      	movs	r3, #3
    62e2:	1cc4      	adds	r4, r0, #3
    62e4:	439c      	bics	r4, r3
    62e6:	42a0      	cmp	r0, r4
    62e8:	d0e0      	beq.n	62ac <_malloc_r+0x68>
    62ea:	1a21      	subs	r1, r4, r0
    62ec:	0030      	movs	r0, r6
    62ee:	f000 f807 	bl	6300 <_sbrk_r>
    62f2:	1c43      	adds	r3, r0, #1
    62f4:	d1da      	bne.n	62ac <_malloc_r+0x68>
    62f6:	e7c6      	b.n	6286 <_malloc_r+0x42>
    62f8:	20000324 	.word	0x20000324
    62fc:	20000328 	.word	0x20000328

00006300 <_sbrk_r>:
    6300:	2300      	movs	r3, #0
    6302:	b570      	push	{r4, r5, r6, lr}
    6304:	4c06      	ldr	r4, [pc, #24]	; (6320 <_sbrk_r+0x20>)
    6306:	0005      	movs	r5, r0
    6308:	0008      	movs	r0, r1
    630a:	6023      	str	r3, [r4, #0]
    630c:	f7fd f978 	bl	3600 <_sbrk>
    6310:	1c43      	adds	r3, r0, #1
    6312:	d103      	bne.n	631c <_sbrk_r+0x1c>
    6314:	6823      	ldr	r3, [r4, #0]
    6316:	2b00      	cmp	r3, #0
    6318:	d000      	beq.n	631c <_sbrk_r+0x1c>
    631a:	602b      	str	r3, [r5, #0]
    631c:	bd70      	pop	{r4, r5, r6, pc}
    631e:	46c0      	nop			; (mov r8, r8)
    6320:	20000ea8 	.word	0x20000ea8

00006324 <siprintf>:
    6324:	b40e      	push	{r1, r2, r3}
    6326:	b510      	push	{r4, lr}
    6328:	b09d      	sub	sp, #116	; 0x74
    632a:	a902      	add	r1, sp, #8
    632c:	9002      	str	r0, [sp, #8]
    632e:	6108      	str	r0, [r1, #16]
    6330:	480b      	ldr	r0, [pc, #44]	; (6360 <siprintf+0x3c>)
    6332:	2482      	movs	r4, #130	; 0x82
    6334:	6088      	str	r0, [r1, #8]
    6336:	6148      	str	r0, [r1, #20]
    6338:	2001      	movs	r0, #1
    633a:	4240      	negs	r0, r0
    633c:	ab1f      	add	r3, sp, #124	; 0x7c
    633e:	81c8      	strh	r0, [r1, #14]
    6340:	4808      	ldr	r0, [pc, #32]	; (6364 <siprintf+0x40>)
    6342:	cb04      	ldmia	r3!, {r2}
    6344:	00a4      	lsls	r4, r4, #2
    6346:	6800      	ldr	r0, [r0, #0]
    6348:	9301      	str	r3, [sp, #4]
    634a:	818c      	strh	r4, [r1, #12]
    634c:	f000 f928 	bl	65a0 <_svfiprintf_r>
    6350:	2300      	movs	r3, #0
    6352:	9a02      	ldr	r2, [sp, #8]
    6354:	7013      	strb	r3, [r2, #0]
    6356:	b01d      	add	sp, #116	; 0x74
    6358:	bc10      	pop	{r4}
    635a:	bc08      	pop	{r3}
    635c:	b003      	add	sp, #12
    635e:	4718      	bx	r3
    6360:	7fffffff 	.word	0x7fffffff
    6364:	20000034 	.word	0x20000034

00006368 <strlen>:
    6368:	2300      	movs	r3, #0
    636a:	5cc2      	ldrb	r2, [r0, r3]
    636c:	3301      	adds	r3, #1
    636e:	2a00      	cmp	r2, #0
    6370:	d1fb      	bne.n	636a <strlen+0x2>
    6372:	1e58      	subs	r0, r3, #1
    6374:	4770      	bx	lr
	...

00006378 <_strtol_l.isra.0>:
    6378:	b5f0      	push	{r4, r5, r6, r7, lr}
    637a:	001f      	movs	r7, r3
    637c:	000e      	movs	r6, r1
    637e:	b087      	sub	sp, #28
    6380:	9005      	str	r0, [sp, #20]
    6382:	9103      	str	r1, [sp, #12]
    6384:	9202      	str	r2, [sp, #8]
    6386:	980c      	ldr	r0, [sp, #48]	; 0x30
    6388:	7834      	ldrb	r4, [r6, #0]
    638a:	f000 f88f 	bl	64ac <__locale_ctype_ptr_l>
    638e:	2208      	movs	r2, #8
    6390:	1900      	adds	r0, r0, r4
    6392:	7843      	ldrb	r3, [r0, #1]
    6394:	1c75      	adds	r5, r6, #1
    6396:	4013      	ands	r3, r2
    6398:	d10c      	bne.n	63b4 <_strtol_l.isra.0+0x3c>
    639a:	2c2d      	cmp	r4, #45	; 0x2d
    639c:	d10c      	bne.n	63b8 <_strtol_l.isra.0+0x40>
    639e:	3301      	adds	r3, #1
    63a0:	782c      	ldrb	r4, [r5, #0]
    63a2:	9301      	str	r3, [sp, #4]
    63a4:	1cb5      	adds	r5, r6, #2
    63a6:	2f00      	cmp	r7, #0
    63a8:	d00c      	beq.n	63c4 <_strtol_l.isra.0+0x4c>
    63aa:	2f10      	cmp	r7, #16
    63ac:	d114      	bne.n	63d8 <_strtol_l.isra.0+0x60>
    63ae:	2c30      	cmp	r4, #48	; 0x30
    63b0:	d00a      	beq.n	63c8 <_strtol_l.isra.0+0x50>
    63b2:	e011      	b.n	63d8 <_strtol_l.isra.0+0x60>
    63b4:	002e      	movs	r6, r5
    63b6:	e7e6      	b.n	6386 <_strtol_l.isra.0+0xe>
    63b8:	9301      	str	r3, [sp, #4]
    63ba:	2c2b      	cmp	r4, #43	; 0x2b
    63bc:	d1f3      	bne.n	63a6 <_strtol_l.isra.0+0x2e>
    63be:	782c      	ldrb	r4, [r5, #0]
    63c0:	1cb5      	adds	r5, r6, #2
    63c2:	e7f0      	b.n	63a6 <_strtol_l.isra.0+0x2e>
    63c4:	2c30      	cmp	r4, #48	; 0x30
    63c6:	d12f      	bne.n	6428 <_strtol_l.isra.0+0xb0>
    63c8:	2220      	movs	r2, #32
    63ca:	782b      	ldrb	r3, [r5, #0]
    63cc:	4393      	bics	r3, r2
    63ce:	2b58      	cmp	r3, #88	; 0x58
    63d0:	d151      	bne.n	6476 <_strtol_l.isra.0+0xfe>
    63d2:	2710      	movs	r7, #16
    63d4:	786c      	ldrb	r4, [r5, #1]
    63d6:	3502      	adds	r5, #2
    63d8:	9b01      	ldr	r3, [sp, #4]
    63da:	4a29      	ldr	r2, [pc, #164]	; (6480 <_strtol_l.isra.0+0x108>)
    63dc:	0039      	movs	r1, r7
    63de:	189e      	adds	r6, r3, r2
    63e0:	0030      	movs	r0, r6
    63e2:	f7ff fc85 	bl	5cf0 <__aeabi_uidivmod>
    63e6:	0030      	movs	r0, r6
    63e8:	9104      	str	r1, [sp, #16]
    63ea:	0039      	movs	r1, r7
    63ec:	f7ff fbfa 	bl	5be4 <__udivsi3>
    63f0:	2101      	movs	r1, #1
    63f2:	2300      	movs	r3, #0
    63f4:	4249      	negs	r1, r1
    63f6:	0002      	movs	r2, r0
    63f8:	468c      	mov	ip, r1
    63fa:	0018      	movs	r0, r3
    63fc:	0021      	movs	r1, r4
    63fe:	3930      	subs	r1, #48	; 0x30
    6400:	2909      	cmp	r1, #9
    6402:	d813      	bhi.n	642c <_strtol_l.isra.0+0xb4>
    6404:	000c      	movs	r4, r1
    6406:	42a7      	cmp	r7, r4
    6408:	dd1c      	ble.n	6444 <_strtol_l.isra.0+0xcc>
    640a:	1c59      	adds	r1, r3, #1
    640c:	d009      	beq.n	6422 <_strtol_l.isra.0+0xaa>
    640e:	4663      	mov	r3, ip
    6410:	4282      	cmp	r2, r0
    6412:	d306      	bcc.n	6422 <_strtol_l.isra.0+0xaa>
    6414:	d102      	bne.n	641c <_strtol_l.isra.0+0xa4>
    6416:	9904      	ldr	r1, [sp, #16]
    6418:	42a1      	cmp	r1, r4
    641a:	db02      	blt.n	6422 <_strtol_l.isra.0+0xaa>
    641c:	2301      	movs	r3, #1
    641e:	4378      	muls	r0, r7
    6420:	1820      	adds	r0, r4, r0
    6422:	782c      	ldrb	r4, [r5, #0]
    6424:	3501      	adds	r5, #1
    6426:	e7e9      	b.n	63fc <_strtol_l.isra.0+0x84>
    6428:	270a      	movs	r7, #10
    642a:	e7d5      	b.n	63d8 <_strtol_l.isra.0+0x60>
    642c:	0021      	movs	r1, r4
    642e:	3941      	subs	r1, #65	; 0x41
    6430:	2919      	cmp	r1, #25
    6432:	d801      	bhi.n	6438 <_strtol_l.isra.0+0xc0>
    6434:	3c37      	subs	r4, #55	; 0x37
    6436:	e7e6      	b.n	6406 <_strtol_l.isra.0+0x8e>
    6438:	0021      	movs	r1, r4
    643a:	3961      	subs	r1, #97	; 0x61
    643c:	2919      	cmp	r1, #25
    643e:	d801      	bhi.n	6444 <_strtol_l.isra.0+0xcc>
    6440:	3c57      	subs	r4, #87	; 0x57
    6442:	e7e0      	b.n	6406 <_strtol_l.isra.0+0x8e>
    6444:	1c5a      	adds	r2, r3, #1
    6446:	d108      	bne.n	645a <_strtol_l.isra.0+0xe2>
    6448:	9a05      	ldr	r2, [sp, #20]
    644a:	3323      	adds	r3, #35	; 0x23
    644c:	6013      	str	r3, [r2, #0]
    644e:	9b02      	ldr	r3, [sp, #8]
    6450:	0030      	movs	r0, r6
    6452:	2b00      	cmp	r3, #0
    6454:	d10b      	bne.n	646e <_strtol_l.isra.0+0xf6>
    6456:	b007      	add	sp, #28
    6458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    645a:	9a01      	ldr	r2, [sp, #4]
    645c:	2a00      	cmp	r2, #0
    645e:	d000      	beq.n	6462 <_strtol_l.isra.0+0xea>
    6460:	4240      	negs	r0, r0
    6462:	9a02      	ldr	r2, [sp, #8]
    6464:	2a00      	cmp	r2, #0
    6466:	d0f6      	beq.n	6456 <_strtol_l.isra.0+0xde>
    6468:	9a03      	ldr	r2, [sp, #12]
    646a:	2b00      	cmp	r3, #0
    646c:	d000      	beq.n	6470 <_strtol_l.isra.0+0xf8>
    646e:	1e6a      	subs	r2, r5, #1
    6470:	9b02      	ldr	r3, [sp, #8]
    6472:	601a      	str	r2, [r3, #0]
    6474:	e7ef      	b.n	6456 <_strtol_l.isra.0+0xde>
    6476:	2430      	movs	r4, #48	; 0x30
    6478:	2f00      	cmp	r7, #0
    647a:	d1ad      	bne.n	63d8 <_strtol_l.isra.0+0x60>
    647c:	3708      	adds	r7, #8
    647e:	e7ab      	b.n	63d8 <_strtol_l.isra.0+0x60>
    6480:	7fffffff 	.word	0x7fffffff

00006484 <strtol>:
    6484:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6486:	0013      	movs	r3, r2
    6488:	4a06      	ldr	r2, [pc, #24]	; (64a4 <strtol+0x20>)
    648a:	0005      	movs	r5, r0
    648c:	6810      	ldr	r0, [r2, #0]
    648e:	6a04      	ldr	r4, [r0, #32]
    6490:	2c00      	cmp	r4, #0
    6492:	d100      	bne.n	6496 <strtol+0x12>
    6494:	4c04      	ldr	r4, [pc, #16]	; (64a8 <strtol+0x24>)
    6496:	000a      	movs	r2, r1
    6498:	9400      	str	r4, [sp, #0]
    649a:	0029      	movs	r1, r5
    649c:	f7ff ff6c 	bl	6378 <_strtol_l.isra.0>
    64a0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    64a2:	46c0      	nop			; (mov r8, r8)
    64a4:	20000034 	.word	0x20000034
    64a8:	20000098 	.word	0x20000098

000064ac <__locale_ctype_ptr_l>:
    64ac:	30ec      	adds	r0, #236	; 0xec
    64ae:	6800      	ldr	r0, [r0, #0]
    64b0:	4770      	bx	lr

000064b2 <__ascii_mbtowc>:
    64b2:	b082      	sub	sp, #8
    64b4:	2900      	cmp	r1, #0
    64b6:	d100      	bne.n	64ba <__ascii_mbtowc+0x8>
    64b8:	a901      	add	r1, sp, #4
    64ba:	1e10      	subs	r0, r2, #0
    64bc:	d006      	beq.n	64cc <__ascii_mbtowc+0x1a>
    64be:	2b00      	cmp	r3, #0
    64c0:	d006      	beq.n	64d0 <__ascii_mbtowc+0x1e>
    64c2:	7813      	ldrb	r3, [r2, #0]
    64c4:	600b      	str	r3, [r1, #0]
    64c6:	7810      	ldrb	r0, [r2, #0]
    64c8:	1e43      	subs	r3, r0, #1
    64ca:	4198      	sbcs	r0, r3
    64cc:	b002      	add	sp, #8
    64ce:	4770      	bx	lr
    64d0:	2002      	movs	r0, #2
    64d2:	4240      	negs	r0, r0
    64d4:	e7fa      	b.n	64cc <__ascii_mbtowc+0x1a>

000064d6 <__malloc_lock>:
    64d6:	4770      	bx	lr

000064d8 <__malloc_unlock>:
    64d8:	4770      	bx	lr
	...

000064dc <__ssputs_r>:
    64dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    64de:	688e      	ldr	r6, [r1, #8]
    64e0:	b085      	sub	sp, #20
    64e2:	0007      	movs	r7, r0
    64e4:	000c      	movs	r4, r1
    64e6:	9203      	str	r2, [sp, #12]
    64e8:	9301      	str	r3, [sp, #4]
    64ea:	429e      	cmp	r6, r3
    64ec:	d839      	bhi.n	6562 <__ssputs_r+0x86>
    64ee:	2390      	movs	r3, #144	; 0x90
    64f0:	898a      	ldrh	r2, [r1, #12]
    64f2:	00db      	lsls	r3, r3, #3
    64f4:	421a      	tst	r2, r3
    64f6:	d034      	beq.n	6562 <__ssputs_r+0x86>
    64f8:	2503      	movs	r5, #3
    64fa:	6909      	ldr	r1, [r1, #16]
    64fc:	6823      	ldr	r3, [r4, #0]
    64fe:	1a5b      	subs	r3, r3, r1
    6500:	9302      	str	r3, [sp, #8]
    6502:	6963      	ldr	r3, [r4, #20]
    6504:	9802      	ldr	r0, [sp, #8]
    6506:	435d      	muls	r5, r3
    6508:	0feb      	lsrs	r3, r5, #31
    650a:	195d      	adds	r5, r3, r5
    650c:	9b01      	ldr	r3, [sp, #4]
    650e:	106d      	asrs	r5, r5, #1
    6510:	3301      	adds	r3, #1
    6512:	181b      	adds	r3, r3, r0
    6514:	42ab      	cmp	r3, r5
    6516:	d900      	bls.n	651a <__ssputs_r+0x3e>
    6518:	001d      	movs	r5, r3
    651a:	0553      	lsls	r3, r2, #21
    651c:	d532      	bpl.n	6584 <__ssputs_r+0xa8>
    651e:	0029      	movs	r1, r5
    6520:	0038      	movs	r0, r7
    6522:	f7ff fe8f 	bl	6244 <_malloc_r>
    6526:	1e06      	subs	r6, r0, #0
    6528:	d109      	bne.n	653e <__ssputs_r+0x62>
    652a:	230c      	movs	r3, #12
    652c:	603b      	str	r3, [r7, #0]
    652e:	2340      	movs	r3, #64	; 0x40
    6530:	2001      	movs	r0, #1
    6532:	89a2      	ldrh	r2, [r4, #12]
    6534:	4240      	negs	r0, r0
    6536:	4313      	orrs	r3, r2
    6538:	81a3      	strh	r3, [r4, #12]
    653a:	b005      	add	sp, #20
    653c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    653e:	9a02      	ldr	r2, [sp, #8]
    6540:	6921      	ldr	r1, [r4, #16]
    6542:	f000 fad0 	bl	6ae6 <memcpy>
    6546:	89a3      	ldrh	r3, [r4, #12]
    6548:	4a14      	ldr	r2, [pc, #80]	; (659c <__ssputs_r+0xc0>)
    654a:	401a      	ands	r2, r3
    654c:	2380      	movs	r3, #128	; 0x80
    654e:	4313      	orrs	r3, r2
    6550:	81a3      	strh	r3, [r4, #12]
    6552:	9b02      	ldr	r3, [sp, #8]
    6554:	6126      	str	r6, [r4, #16]
    6556:	18f6      	adds	r6, r6, r3
    6558:	6026      	str	r6, [r4, #0]
    655a:	6165      	str	r5, [r4, #20]
    655c:	9e01      	ldr	r6, [sp, #4]
    655e:	1aed      	subs	r5, r5, r3
    6560:	60a5      	str	r5, [r4, #8]
    6562:	9b01      	ldr	r3, [sp, #4]
    6564:	42b3      	cmp	r3, r6
    6566:	d200      	bcs.n	656a <__ssputs_r+0x8e>
    6568:	001e      	movs	r6, r3
    656a:	0032      	movs	r2, r6
    656c:	9903      	ldr	r1, [sp, #12]
    656e:	6820      	ldr	r0, [r4, #0]
    6570:	f000 fac2 	bl	6af8 <memmove>
    6574:	68a3      	ldr	r3, [r4, #8]
    6576:	2000      	movs	r0, #0
    6578:	1b9b      	subs	r3, r3, r6
    657a:	60a3      	str	r3, [r4, #8]
    657c:	6823      	ldr	r3, [r4, #0]
    657e:	199e      	adds	r6, r3, r6
    6580:	6026      	str	r6, [r4, #0]
    6582:	e7da      	b.n	653a <__ssputs_r+0x5e>
    6584:	002a      	movs	r2, r5
    6586:	0038      	movs	r0, r7
    6588:	f000 fac8 	bl	6b1c <_realloc_r>
    658c:	1e06      	subs	r6, r0, #0
    658e:	d1e0      	bne.n	6552 <__ssputs_r+0x76>
    6590:	6921      	ldr	r1, [r4, #16]
    6592:	0038      	movs	r0, r7
    6594:	f7ff fe0c 	bl	61b0 <_free_r>
    6598:	e7c7      	b.n	652a <__ssputs_r+0x4e>
    659a:	46c0      	nop			; (mov r8, r8)
    659c:	fffffb7f 	.word	0xfffffb7f

000065a0 <_svfiprintf_r>:
    65a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    65a2:	b09f      	sub	sp, #124	; 0x7c
    65a4:	9002      	str	r0, [sp, #8]
    65a6:	9305      	str	r3, [sp, #20]
    65a8:	898b      	ldrh	r3, [r1, #12]
    65aa:	000f      	movs	r7, r1
    65ac:	0016      	movs	r6, r2
    65ae:	061b      	lsls	r3, r3, #24
    65b0:	d511      	bpl.n	65d6 <_svfiprintf_r+0x36>
    65b2:	690b      	ldr	r3, [r1, #16]
    65b4:	2b00      	cmp	r3, #0
    65b6:	d10e      	bne.n	65d6 <_svfiprintf_r+0x36>
    65b8:	2140      	movs	r1, #64	; 0x40
    65ba:	f7ff fe43 	bl	6244 <_malloc_r>
    65be:	6038      	str	r0, [r7, #0]
    65c0:	6138      	str	r0, [r7, #16]
    65c2:	2800      	cmp	r0, #0
    65c4:	d105      	bne.n	65d2 <_svfiprintf_r+0x32>
    65c6:	230c      	movs	r3, #12
    65c8:	9a02      	ldr	r2, [sp, #8]
    65ca:	3801      	subs	r0, #1
    65cc:	6013      	str	r3, [r2, #0]
    65ce:	b01f      	add	sp, #124	; 0x7c
    65d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    65d2:	2340      	movs	r3, #64	; 0x40
    65d4:	617b      	str	r3, [r7, #20]
    65d6:	2300      	movs	r3, #0
    65d8:	ad06      	add	r5, sp, #24
    65da:	616b      	str	r3, [r5, #20]
    65dc:	3320      	adds	r3, #32
    65de:	766b      	strb	r3, [r5, #25]
    65e0:	3310      	adds	r3, #16
    65e2:	76ab      	strb	r3, [r5, #26]
    65e4:	0034      	movs	r4, r6
    65e6:	7823      	ldrb	r3, [r4, #0]
    65e8:	2b00      	cmp	r3, #0
    65ea:	d147      	bne.n	667c <_svfiprintf_r+0xdc>
    65ec:	1ba3      	subs	r3, r4, r6
    65ee:	9304      	str	r3, [sp, #16]
    65f0:	d00d      	beq.n	660e <_svfiprintf_r+0x6e>
    65f2:	1ba3      	subs	r3, r4, r6
    65f4:	0032      	movs	r2, r6
    65f6:	0039      	movs	r1, r7
    65f8:	9802      	ldr	r0, [sp, #8]
    65fa:	f7ff ff6f 	bl	64dc <__ssputs_r>
    65fe:	1c43      	adds	r3, r0, #1
    6600:	d100      	bne.n	6604 <_svfiprintf_r+0x64>
    6602:	e0b5      	b.n	6770 <_svfiprintf_r+0x1d0>
    6604:	696a      	ldr	r2, [r5, #20]
    6606:	9b04      	ldr	r3, [sp, #16]
    6608:	4694      	mov	ip, r2
    660a:	4463      	add	r3, ip
    660c:	616b      	str	r3, [r5, #20]
    660e:	7823      	ldrb	r3, [r4, #0]
    6610:	2b00      	cmp	r3, #0
    6612:	d100      	bne.n	6616 <_svfiprintf_r+0x76>
    6614:	e0ac      	b.n	6770 <_svfiprintf_r+0x1d0>
    6616:	2201      	movs	r2, #1
    6618:	2300      	movs	r3, #0
    661a:	4252      	negs	r2, r2
    661c:	606a      	str	r2, [r5, #4]
    661e:	a902      	add	r1, sp, #8
    6620:	3254      	adds	r2, #84	; 0x54
    6622:	1852      	adds	r2, r2, r1
    6624:	3401      	adds	r4, #1
    6626:	602b      	str	r3, [r5, #0]
    6628:	60eb      	str	r3, [r5, #12]
    662a:	60ab      	str	r3, [r5, #8]
    662c:	7013      	strb	r3, [r2, #0]
    662e:	65ab      	str	r3, [r5, #88]	; 0x58
    6630:	4e58      	ldr	r6, [pc, #352]	; (6794 <_svfiprintf_r+0x1f4>)
    6632:	2205      	movs	r2, #5
    6634:	7821      	ldrb	r1, [r4, #0]
    6636:	0030      	movs	r0, r6
    6638:	f000 fa4a 	bl	6ad0 <memchr>
    663c:	1c62      	adds	r2, r4, #1
    663e:	2800      	cmp	r0, #0
    6640:	d120      	bne.n	6684 <_svfiprintf_r+0xe4>
    6642:	6829      	ldr	r1, [r5, #0]
    6644:	06cb      	lsls	r3, r1, #27
    6646:	d504      	bpl.n	6652 <_svfiprintf_r+0xb2>
    6648:	2353      	movs	r3, #83	; 0x53
    664a:	ae02      	add	r6, sp, #8
    664c:	3020      	adds	r0, #32
    664e:	199b      	adds	r3, r3, r6
    6650:	7018      	strb	r0, [r3, #0]
    6652:	070b      	lsls	r3, r1, #28
    6654:	d504      	bpl.n	6660 <_svfiprintf_r+0xc0>
    6656:	2353      	movs	r3, #83	; 0x53
    6658:	202b      	movs	r0, #43	; 0x2b
    665a:	ae02      	add	r6, sp, #8
    665c:	199b      	adds	r3, r3, r6
    665e:	7018      	strb	r0, [r3, #0]
    6660:	7823      	ldrb	r3, [r4, #0]
    6662:	2b2a      	cmp	r3, #42	; 0x2a
    6664:	d016      	beq.n	6694 <_svfiprintf_r+0xf4>
    6666:	2000      	movs	r0, #0
    6668:	210a      	movs	r1, #10
    666a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    666c:	7822      	ldrb	r2, [r4, #0]
    666e:	3a30      	subs	r2, #48	; 0x30
    6670:	2a09      	cmp	r2, #9
    6672:	d955      	bls.n	6720 <_svfiprintf_r+0x180>
    6674:	2800      	cmp	r0, #0
    6676:	d015      	beq.n	66a4 <_svfiprintf_r+0x104>
    6678:	9309      	str	r3, [sp, #36]	; 0x24
    667a:	e013      	b.n	66a4 <_svfiprintf_r+0x104>
    667c:	2b25      	cmp	r3, #37	; 0x25
    667e:	d0b5      	beq.n	65ec <_svfiprintf_r+0x4c>
    6680:	3401      	adds	r4, #1
    6682:	e7b0      	b.n	65e6 <_svfiprintf_r+0x46>
    6684:	2301      	movs	r3, #1
    6686:	1b80      	subs	r0, r0, r6
    6688:	4083      	lsls	r3, r0
    668a:	6829      	ldr	r1, [r5, #0]
    668c:	0014      	movs	r4, r2
    668e:	430b      	orrs	r3, r1
    6690:	602b      	str	r3, [r5, #0]
    6692:	e7cd      	b.n	6630 <_svfiprintf_r+0x90>
    6694:	9b05      	ldr	r3, [sp, #20]
    6696:	1d18      	adds	r0, r3, #4
    6698:	681b      	ldr	r3, [r3, #0]
    669a:	9005      	str	r0, [sp, #20]
    669c:	2b00      	cmp	r3, #0
    669e:	db39      	blt.n	6714 <_svfiprintf_r+0x174>
    66a0:	9309      	str	r3, [sp, #36]	; 0x24
    66a2:	0014      	movs	r4, r2
    66a4:	7823      	ldrb	r3, [r4, #0]
    66a6:	2b2e      	cmp	r3, #46	; 0x2e
    66a8:	d10b      	bne.n	66c2 <_svfiprintf_r+0x122>
    66aa:	7863      	ldrb	r3, [r4, #1]
    66ac:	1c62      	adds	r2, r4, #1
    66ae:	2b2a      	cmp	r3, #42	; 0x2a
    66b0:	d13e      	bne.n	6730 <_svfiprintf_r+0x190>
    66b2:	9b05      	ldr	r3, [sp, #20]
    66b4:	3402      	adds	r4, #2
    66b6:	1d1a      	adds	r2, r3, #4
    66b8:	681b      	ldr	r3, [r3, #0]
    66ba:	9205      	str	r2, [sp, #20]
    66bc:	2b00      	cmp	r3, #0
    66be:	db34      	blt.n	672a <_svfiprintf_r+0x18a>
    66c0:	9307      	str	r3, [sp, #28]
    66c2:	4e35      	ldr	r6, [pc, #212]	; (6798 <_svfiprintf_r+0x1f8>)
    66c4:	7821      	ldrb	r1, [r4, #0]
    66c6:	2203      	movs	r2, #3
    66c8:	0030      	movs	r0, r6
    66ca:	f000 fa01 	bl	6ad0 <memchr>
    66ce:	2800      	cmp	r0, #0
    66d0:	d006      	beq.n	66e0 <_svfiprintf_r+0x140>
    66d2:	2340      	movs	r3, #64	; 0x40
    66d4:	1b80      	subs	r0, r0, r6
    66d6:	4083      	lsls	r3, r0
    66d8:	682a      	ldr	r2, [r5, #0]
    66da:	3401      	adds	r4, #1
    66dc:	4313      	orrs	r3, r2
    66de:	602b      	str	r3, [r5, #0]
    66e0:	7821      	ldrb	r1, [r4, #0]
    66e2:	2206      	movs	r2, #6
    66e4:	482d      	ldr	r0, [pc, #180]	; (679c <_svfiprintf_r+0x1fc>)
    66e6:	1c66      	adds	r6, r4, #1
    66e8:	7629      	strb	r1, [r5, #24]
    66ea:	f000 f9f1 	bl	6ad0 <memchr>
    66ee:	2800      	cmp	r0, #0
    66f0:	d046      	beq.n	6780 <_svfiprintf_r+0x1e0>
    66f2:	4b2b      	ldr	r3, [pc, #172]	; (67a0 <_svfiprintf_r+0x200>)
    66f4:	2b00      	cmp	r3, #0
    66f6:	d12f      	bne.n	6758 <_svfiprintf_r+0x1b8>
    66f8:	6829      	ldr	r1, [r5, #0]
    66fa:	9b05      	ldr	r3, [sp, #20]
    66fc:	2207      	movs	r2, #7
    66fe:	05c9      	lsls	r1, r1, #23
    6700:	d528      	bpl.n	6754 <_svfiprintf_r+0x1b4>
    6702:	189b      	adds	r3, r3, r2
    6704:	4393      	bics	r3, r2
    6706:	3308      	adds	r3, #8
    6708:	9305      	str	r3, [sp, #20]
    670a:	696b      	ldr	r3, [r5, #20]
    670c:	9a03      	ldr	r2, [sp, #12]
    670e:	189b      	adds	r3, r3, r2
    6710:	616b      	str	r3, [r5, #20]
    6712:	e767      	b.n	65e4 <_svfiprintf_r+0x44>
    6714:	425b      	negs	r3, r3
    6716:	60eb      	str	r3, [r5, #12]
    6718:	2302      	movs	r3, #2
    671a:	430b      	orrs	r3, r1
    671c:	602b      	str	r3, [r5, #0]
    671e:	e7c0      	b.n	66a2 <_svfiprintf_r+0x102>
    6720:	434b      	muls	r3, r1
    6722:	3401      	adds	r4, #1
    6724:	189b      	adds	r3, r3, r2
    6726:	2001      	movs	r0, #1
    6728:	e7a0      	b.n	666c <_svfiprintf_r+0xcc>
    672a:	2301      	movs	r3, #1
    672c:	425b      	negs	r3, r3
    672e:	e7c7      	b.n	66c0 <_svfiprintf_r+0x120>
    6730:	2300      	movs	r3, #0
    6732:	0014      	movs	r4, r2
    6734:	200a      	movs	r0, #10
    6736:	001a      	movs	r2, r3
    6738:	606b      	str	r3, [r5, #4]
    673a:	7821      	ldrb	r1, [r4, #0]
    673c:	3930      	subs	r1, #48	; 0x30
    673e:	2909      	cmp	r1, #9
    6740:	d903      	bls.n	674a <_svfiprintf_r+0x1aa>
    6742:	2b00      	cmp	r3, #0
    6744:	d0bd      	beq.n	66c2 <_svfiprintf_r+0x122>
    6746:	9207      	str	r2, [sp, #28]
    6748:	e7bb      	b.n	66c2 <_svfiprintf_r+0x122>
    674a:	4342      	muls	r2, r0
    674c:	3401      	adds	r4, #1
    674e:	1852      	adds	r2, r2, r1
    6750:	2301      	movs	r3, #1
    6752:	e7f2      	b.n	673a <_svfiprintf_r+0x19a>
    6754:	3307      	adds	r3, #7
    6756:	e7d5      	b.n	6704 <_svfiprintf_r+0x164>
    6758:	ab05      	add	r3, sp, #20
    675a:	9300      	str	r3, [sp, #0]
    675c:	003a      	movs	r2, r7
    675e:	4b11      	ldr	r3, [pc, #68]	; (67a4 <_svfiprintf_r+0x204>)
    6760:	0029      	movs	r1, r5
    6762:	9802      	ldr	r0, [sp, #8]
    6764:	e000      	b.n	6768 <_svfiprintf_r+0x1c8>
    6766:	bf00      	nop
    6768:	9003      	str	r0, [sp, #12]
    676a:	9b03      	ldr	r3, [sp, #12]
    676c:	3301      	adds	r3, #1
    676e:	d1cc      	bne.n	670a <_svfiprintf_r+0x16a>
    6770:	89bb      	ldrh	r3, [r7, #12]
    6772:	980b      	ldr	r0, [sp, #44]	; 0x2c
    6774:	065b      	lsls	r3, r3, #25
    6776:	d400      	bmi.n	677a <_svfiprintf_r+0x1da>
    6778:	e729      	b.n	65ce <_svfiprintf_r+0x2e>
    677a:	2001      	movs	r0, #1
    677c:	4240      	negs	r0, r0
    677e:	e726      	b.n	65ce <_svfiprintf_r+0x2e>
    6780:	ab05      	add	r3, sp, #20
    6782:	9300      	str	r3, [sp, #0]
    6784:	003a      	movs	r2, r7
    6786:	4b07      	ldr	r3, [pc, #28]	; (67a4 <_svfiprintf_r+0x204>)
    6788:	0029      	movs	r1, r5
    678a:	9802      	ldr	r0, [sp, #8]
    678c:	f000 f87a 	bl	6884 <_printf_i>
    6790:	e7ea      	b.n	6768 <_svfiprintf_r+0x1c8>
    6792:	46c0      	nop			; (mov r8, r8)
    6794:	00007572 	.word	0x00007572
    6798:	00007578 	.word	0x00007578
    679c:	0000757c 	.word	0x0000757c
    67a0:	00000000 	.word	0x00000000
    67a4:	000064dd 	.word	0x000064dd

000067a8 <_printf_common>:
    67a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    67aa:	0015      	movs	r5, r2
    67ac:	9301      	str	r3, [sp, #4]
    67ae:	688a      	ldr	r2, [r1, #8]
    67b0:	690b      	ldr	r3, [r1, #16]
    67b2:	9000      	str	r0, [sp, #0]
    67b4:	000c      	movs	r4, r1
    67b6:	4293      	cmp	r3, r2
    67b8:	da00      	bge.n	67bc <_printf_common+0x14>
    67ba:	0013      	movs	r3, r2
    67bc:	0022      	movs	r2, r4
    67be:	602b      	str	r3, [r5, #0]
    67c0:	3243      	adds	r2, #67	; 0x43
    67c2:	7812      	ldrb	r2, [r2, #0]
    67c4:	2a00      	cmp	r2, #0
    67c6:	d001      	beq.n	67cc <_printf_common+0x24>
    67c8:	3301      	adds	r3, #1
    67ca:	602b      	str	r3, [r5, #0]
    67cc:	6823      	ldr	r3, [r4, #0]
    67ce:	069b      	lsls	r3, r3, #26
    67d0:	d502      	bpl.n	67d8 <_printf_common+0x30>
    67d2:	682b      	ldr	r3, [r5, #0]
    67d4:	3302      	adds	r3, #2
    67d6:	602b      	str	r3, [r5, #0]
    67d8:	2706      	movs	r7, #6
    67da:	6823      	ldr	r3, [r4, #0]
    67dc:	401f      	ands	r7, r3
    67de:	d027      	beq.n	6830 <_printf_common+0x88>
    67e0:	0023      	movs	r3, r4
    67e2:	3343      	adds	r3, #67	; 0x43
    67e4:	781b      	ldrb	r3, [r3, #0]
    67e6:	1e5a      	subs	r2, r3, #1
    67e8:	4193      	sbcs	r3, r2
    67ea:	6822      	ldr	r2, [r4, #0]
    67ec:	0692      	lsls	r2, r2, #26
    67ee:	d430      	bmi.n	6852 <_printf_common+0xaa>
    67f0:	0022      	movs	r2, r4
    67f2:	9901      	ldr	r1, [sp, #4]
    67f4:	3243      	adds	r2, #67	; 0x43
    67f6:	9800      	ldr	r0, [sp, #0]
    67f8:	9e08      	ldr	r6, [sp, #32]
    67fa:	47b0      	blx	r6
    67fc:	1c43      	adds	r3, r0, #1
    67fe:	d025      	beq.n	684c <_printf_common+0xa4>
    6800:	2306      	movs	r3, #6
    6802:	6820      	ldr	r0, [r4, #0]
    6804:	682a      	ldr	r2, [r5, #0]
    6806:	68e1      	ldr	r1, [r4, #12]
    6808:	4003      	ands	r3, r0
    680a:	2500      	movs	r5, #0
    680c:	2b04      	cmp	r3, #4
    680e:	d103      	bne.n	6818 <_printf_common+0x70>
    6810:	1a8d      	subs	r5, r1, r2
    6812:	43eb      	mvns	r3, r5
    6814:	17db      	asrs	r3, r3, #31
    6816:	401d      	ands	r5, r3
    6818:	68a3      	ldr	r3, [r4, #8]
    681a:	6922      	ldr	r2, [r4, #16]
    681c:	4293      	cmp	r3, r2
    681e:	dd01      	ble.n	6824 <_printf_common+0x7c>
    6820:	1a9b      	subs	r3, r3, r2
    6822:	18ed      	adds	r5, r5, r3
    6824:	2700      	movs	r7, #0
    6826:	42bd      	cmp	r5, r7
    6828:	d120      	bne.n	686c <_printf_common+0xc4>
    682a:	2000      	movs	r0, #0
    682c:	e010      	b.n	6850 <_printf_common+0xa8>
    682e:	3701      	adds	r7, #1
    6830:	68e3      	ldr	r3, [r4, #12]
    6832:	682a      	ldr	r2, [r5, #0]
    6834:	1a9b      	subs	r3, r3, r2
    6836:	429f      	cmp	r7, r3
    6838:	dad2      	bge.n	67e0 <_printf_common+0x38>
    683a:	0022      	movs	r2, r4
    683c:	2301      	movs	r3, #1
    683e:	3219      	adds	r2, #25
    6840:	9901      	ldr	r1, [sp, #4]
    6842:	9800      	ldr	r0, [sp, #0]
    6844:	9e08      	ldr	r6, [sp, #32]
    6846:	47b0      	blx	r6
    6848:	1c43      	adds	r3, r0, #1
    684a:	d1f0      	bne.n	682e <_printf_common+0x86>
    684c:	2001      	movs	r0, #1
    684e:	4240      	negs	r0, r0
    6850:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6852:	2030      	movs	r0, #48	; 0x30
    6854:	18e1      	adds	r1, r4, r3
    6856:	3143      	adds	r1, #67	; 0x43
    6858:	7008      	strb	r0, [r1, #0]
    685a:	0021      	movs	r1, r4
    685c:	1c5a      	adds	r2, r3, #1
    685e:	3145      	adds	r1, #69	; 0x45
    6860:	7809      	ldrb	r1, [r1, #0]
    6862:	18a2      	adds	r2, r4, r2
    6864:	3243      	adds	r2, #67	; 0x43
    6866:	3302      	adds	r3, #2
    6868:	7011      	strb	r1, [r2, #0]
    686a:	e7c1      	b.n	67f0 <_printf_common+0x48>
    686c:	0022      	movs	r2, r4
    686e:	2301      	movs	r3, #1
    6870:	321a      	adds	r2, #26
    6872:	9901      	ldr	r1, [sp, #4]
    6874:	9800      	ldr	r0, [sp, #0]
    6876:	9e08      	ldr	r6, [sp, #32]
    6878:	47b0      	blx	r6
    687a:	1c43      	adds	r3, r0, #1
    687c:	d0e6      	beq.n	684c <_printf_common+0xa4>
    687e:	3701      	adds	r7, #1
    6880:	e7d1      	b.n	6826 <_printf_common+0x7e>
	...

00006884 <_printf_i>:
    6884:	b5f0      	push	{r4, r5, r6, r7, lr}
    6886:	b08b      	sub	sp, #44	; 0x2c
    6888:	9206      	str	r2, [sp, #24]
    688a:	000a      	movs	r2, r1
    688c:	3243      	adds	r2, #67	; 0x43
    688e:	9307      	str	r3, [sp, #28]
    6890:	9005      	str	r0, [sp, #20]
    6892:	9204      	str	r2, [sp, #16]
    6894:	7e0a      	ldrb	r2, [r1, #24]
    6896:	000c      	movs	r4, r1
    6898:	9b10      	ldr	r3, [sp, #64]	; 0x40
    689a:	2a6e      	cmp	r2, #110	; 0x6e
    689c:	d100      	bne.n	68a0 <_printf_i+0x1c>
    689e:	e08f      	b.n	69c0 <_printf_i+0x13c>
    68a0:	d817      	bhi.n	68d2 <_printf_i+0x4e>
    68a2:	2a63      	cmp	r2, #99	; 0x63
    68a4:	d02c      	beq.n	6900 <_printf_i+0x7c>
    68a6:	d808      	bhi.n	68ba <_printf_i+0x36>
    68a8:	2a00      	cmp	r2, #0
    68aa:	d100      	bne.n	68ae <_printf_i+0x2a>
    68ac:	e099      	b.n	69e2 <_printf_i+0x15e>
    68ae:	2a58      	cmp	r2, #88	; 0x58
    68b0:	d054      	beq.n	695c <_printf_i+0xd8>
    68b2:	0026      	movs	r6, r4
    68b4:	3642      	adds	r6, #66	; 0x42
    68b6:	7032      	strb	r2, [r6, #0]
    68b8:	e029      	b.n	690e <_printf_i+0x8a>
    68ba:	2a64      	cmp	r2, #100	; 0x64
    68bc:	d001      	beq.n	68c2 <_printf_i+0x3e>
    68be:	2a69      	cmp	r2, #105	; 0x69
    68c0:	d1f7      	bne.n	68b2 <_printf_i+0x2e>
    68c2:	6821      	ldr	r1, [r4, #0]
    68c4:	681a      	ldr	r2, [r3, #0]
    68c6:	0608      	lsls	r0, r1, #24
    68c8:	d523      	bpl.n	6912 <_printf_i+0x8e>
    68ca:	1d11      	adds	r1, r2, #4
    68cc:	6019      	str	r1, [r3, #0]
    68ce:	6815      	ldr	r5, [r2, #0]
    68d0:	e025      	b.n	691e <_printf_i+0x9a>
    68d2:	2a73      	cmp	r2, #115	; 0x73
    68d4:	d100      	bne.n	68d8 <_printf_i+0x54>
    68d6:	e088      	b.n	69ea <_printf_i+0x166>
    68d8:	d808      	bhi.n	68ec <_printf_i+0x68>
    68da:	2a6f      	cmp	r2, #111	; 0x6f
    68dc:	d029      	beq.n	6932 <_printf_i+0xae>
    68de:	2a70      	cmp	r2, #112	; 0x70
    68e0:	d1e7      	bne.n	68b2 <_printf_i+0x2e>
    68e2:	2220      	movs	r2, #32
    68e4:	6809      	ldr	r1, [r1, #0]
    68e6:	430a      	orrs	r2, r1
    68e8:	6022      	str	r2, [r4, #0]
    68ea:	e003      	b.n	68f4 <_printf_i+0x70>
    68ec:	2a75      	cmp	r2, #117	; 0x75
    68ee:	d020      	beq.n	6932 <_printf_i+0xae>
    68f0:	2a78      	cmp	r2, #120	; 0x78
    68f2:	d1de      	bne.n	68b2 <_printf_i+0x2e>
    68f4:	0022      	movs	r2, r4
    68f6:	2178      	movs	r1, #120	; 0x78
    68f8:	3245      	adds	r2, #69	; 0x45
    68fa:	7011      	strb	r1, [r2, #0]
    68fc:	4a6c      	ldr	r2, [pc, #432]	; (6ab0 <_printf_i+0x22c>)
    68fe:	e030      	b.n	6962 <_printf_i+0xde>
    6900:	000e      	movs	r6, r1
    6902:	681a      	ldr	r2, [r3, #0]
    6904:	3642      	adds	r6, #66	; 0x42
    6906:	1d11      	adds	r1, r2, #4
    6908:	6019      	str	r1, [r3, #0]
    690a:	6813      	ldr	r3, [r2, #0]
    690c:	7033      	strb	r3, [r6, #0]
    690e:	2301      	movs	r3, #1
    6910:	e079      	b.n	6a06 <_printf_i+0x182>
    6912:	0649      	lsls	r1, r1, #25
    6914:	d5d9      	bpl.n	68ca <_printf_i+0x46>
    6916:	1d11      	adds	r1, r2, #4
    6918:	6019      	str	r1, [r3, #0]
    691a:	2300      	movs	r3, #0
    691c:	5ed5      	ldrsh	r5, [r2, r3]
    691e:	2d00      	cmp	r5, #0
    6920:	da03      	bge.n	692a <_printf_i+0xa6>
    6922:	232d      	movs	r3, #45	; 0x2d
    6924:	9a04      	ldr	r2, [sp, #16]
    6926:	426d      	negs	r5, r5
    6928:	7013      	strb	r3, [r2, #0]
    692a:	4b62      	ldr	r3, [pc, #392]	; (6ab4 <_printf_i+0x230>)
    692c:	270a      	movs	r7, #10
    692e:	9303      	str	r3, [sp, #12]
    6930:	e02f      	b.n	6992 <_printf_i+0x10e>
    6932:	6820      	ldr	r0, [r4, #0]
    6934:	6819      	ldr	r1, [r3, #0]
    6936:	0605      	lsls	r5, r0, #24
    6938:	d503      	bpl.n	6942 <_printf_i+0xbe>
    693a:	1d08      	adds	r0, r1, #4
    693c:	6018      	str	r0, [r3, #0]
    693e:	680d      	ldr	r5, [r1, #0]
    6940:	e005      	b.n	694e <_printf_i+0xca>
    6942:	0640      	lsls	r0, r0, #25
    6944:	d5f9      	bpl.n	693a <_printf_i+0xb6>
    6946:	680d      	ldr	r5, [r1, #0]
    6948:	1d08      	adds	r0, r1, #4
    694a:	6018      	str	r0, [r3, #0]
    694c:	b2ad      	uxth	r5, r5
    694e:	4b59      	ldr	r3, [pc, #356]	; (6ab4 <_printf_i+0x230>)
    6950:	2708      	movs	r7, #8
    6952:	9303      	str	r3, [sp, #12]
    6954:	2a6f      	cmp	r2, #111	; 0x6f
    6956:	d018      	beq.n	698a <_printf_i+0x106>
    6958:	270a      	movs	r7, #10
    695a:	e016      	b.n	698a <_printf_i+0x106>
    695c:	3145      	adds	r1, #69	; 0x45
    695e:	700a      	strb	r2, [r1, #0]
    6960:	4a54      	ldr	r2, [pc, #336]	; (6ab4 <_printf_i+0x230>)
    6962:	9203      	str	r2, [sp, #12]
    6964:	681a      	ldr	r2, [r3, #0]
    6966:	6821      	ldr	r1, [r4, #0]
    6968:	1d10      	adds	r0, r2, #4
    696a:	6018      	str	r0, [r3, #0]
    696c:	6815      	ldr	r5, [r2, #0]
    696e:	0608      	lsls	r0, r1, #24
    6970:	d522      	bpl.n	69b8 <_printf_i+0x134>
    6972:	07cb      	lsls	r3, r1, #31
    6974:	d502      	bpl.n	697c <_printf_i+0xf8>
    6976:	2320      	movs	r3, #32
    6978:	4319      	orrs	r1, r3
    697a:	6021      	str	r1, [r4, #0]
    697c:	2710      	movs	r7, #16
    697e:	2d00      	cmp	r5, #0
    6980:	d103      	bne.n	698a <_printf_i+0x106>
    6982:	2320      	movs	r3, #32
    6984:	6822      	ldr	r2, [r4, #0]
    6986:	439a      	bics	r2, r3
    6988:	6022      	str	r2, [r4, #0]
    698a:	0023      	movs	r3, r4
    698c:	2200      	movs	r2, #0
    698e:	3343      	adds	r3, #67	; 0x43
    6990:	701a      	strb	r2, [r3, #0]
    6992:	6863      	ldr	r3, [r4, #4]
    6994:	60a3      	str	r3, [r4, #8]
    6996:	2b00      	cmp	r3, #0
    6998:	db5c      	blt.n	6a54 <_printf_i+0x1d0>
    699a:	2204      	movs	r2, #4
    699c:	6821      	ldr	r1, [r4, #0]
    699e:	4391      	bics	r1, r2
    69a0:	6021      	str	r1, [r4, #0]
    69a2:	2d00      	cmp	r5, #0
    69a4:	d158      	bne.n	6a58 <_printf_i+0x1d4>
    69a6:	9e04      	ldr	r6, [sp, #16]
    69a8:	2b00      	cmp	r3, #0
    69aa:	d064      	beq.n	6a76 <_printf_i+0x1f2>
    69ac:	0026      	movs	r6, r4
    69ae:	9b03      	ldr	r3, [sp, #12]
    69b0:	3642      	adds	r6, #66	; 0x42
    69b2:	781b      	ldrb	r3, [r3, #0]
    69b4:	7033      	strb	r3, [r6, #0]
    69b6:	e05e      	b.n	6a76 <_printf_i+0x1f2>
    69b8:	0648      	lsls	r0, r1, #25
    69ba:	d5da      	bpl.n	6972 <_printf_i+0xee>
    69bc:	b2ad      	uxth	r5, r5
    69be:	e7d8      	b.n	6972 <_printf_i+0xee>
    69c0:	6809      	ldr	r1, [r1, #0]
    69c2:	681a      	ldr	r2, [r3, #0]
    69c4:	0608      	lsls	r0, r1, #24
    69c6:	d505      	bpl.n	69d4 <_printf_i+0x150>
    69c8:	1d11      	adds	r1, r2, #4
    69ca:	6019      	str	r1, [r3, #0]
    69cc:	6813      	ldr	r3, [r2, #0]
    69ce:	6962      	ldr	r2, [r4, #20]
    69d0:	601a      	str	r2, [r3, #0]
    69d2:	e006      	b.n	69e2 <_printf_i+0x15e>
    69d4:	0649      	lsls	r1, r1, #25
    69d6:	d5f7      	bpl.n	69c8 <_printf_i+0x144>
    69d8:	1d11      	adds	r1, r2, #4
    69da:	6019      	str	r1, [r3, #0]
    69dc:	6813      	ldr	r3, [r2, #0]
    69de:	8aa2      	ldrh	r2, [r4, #20]
    69e0:	801a      	strh	r2, [r3, #0]
    69e2:	2300      	movs	r3, #0
    69e4:	9e04      	ldr	r6, [sp, #16]
    69e6:	6123      	str	r3, [r4, #16]
    69e8:	e054      	b.n	6a94 <_printf_i+0x210>
    69ea:	681a      	ldr	r2, [r3, #0]
    69ec:	1d11      	adds	r1, r2, #4
    69ee:	6019      	str	r1, [r3, #0]
    69f0:	6816      	ldr	r6, [r2, #0]
    69f2:	2100      	movs	r1, #0
    69f4:	6862      	ldr	r2, [r4, #4]
    69f6:	0030      	movs	r0, r6
    69f8:	f000 f86a 	bl	6ad0 <memchr>
    69fc:	2800      	cmp	r0, #0
    69fe:	d001      	beq.n	6a04 <_printf_i+0x180>
    6a00:	1b80      	subs	r0, r0, r6
    6a02:	6060      	str	r0, [r4, #4]
    6a04:	6863      	ldr	r3, [r4, #4]
    6a06:	6123      	str	r3, [r4, #16]
    6a08:	2300      	movs	r3, #0
    6a0a:	9a04      	ldr	r2, [sp, #16]
    6a0c:	7013      	strb	r3, [r2, #0]
    6a0e:	e041      	b.n	6a94 <_printf_i+0x210>
    6a10:	6923      	ldr	r3, [r4, #16]
    6a12:	0032      	movs	r2, r6
    6a14:	9906      	ldr	r1, [sp, #24]
    6a16:	9805      	ldr	r0, [sp, #20]
    6a18:	9d07      	ldr	r5, [sp, #28]
    6a1a:	47a8      	blx	r5
    6a1c:	1c43      	adds	r3, r0, #1
    6a1e:	d043      	beq.n	6aa8 <_printf_i+0x224>
    6a20:	6823      	ldr	r3, [r4, #0]
    6a22:	2500      	movs	r5, #0
    6a24:	079b      	lsls	r3, r3, #30
    6a26:	d40f      	bmi.n	6a48 <_printf_i+0x1c4>
    6a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a2a:	68e0      	ldr	r0, [r4, #12]
    6a2c:	4298      	cmp	r0, r3
    6a2e:	da3d      	bge.n	6aac <_printf_i+0x228>
    6a30:	0018      	movs	r0, r3
    6a32:	e03b      	b.n	6aac <_printf_i+0x228>
    6a34:	0022      	movs	r2, r4
    6a36:	2301      	movs	r3, #1
    6a38:	3219      	adds	r2, #25
    6a3a:	9906      	ldr	r1, [sp, #24]
    6a3c:	9805      	ldr	r0, [sp, #20]
    6a3e:	9e07      	ldr	r6, [sp, #28]
    6a40:	47b0      	blx	r6
    6a42:	1c43      	adds	r3, r0, #1
    6a44:	d030      	beq.n	6aa8 <_printf_i+0x224>
    6a46:	3501      	adds	r5, #1
    6a48:	68e3      	ldr	r3, [r4, #12]
    6a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6a4c:	1a9b      	subs	r3, r3, r2
    6a4e:	429d      	cmp	r5, r3
    6a50:	dbf0      	blt.n	6a34 <_printf_i+0x1b0>
    6a52:	e7e9      	b.n	6a28 <_printf_i+0x1a4>
    6a54:	2d00      	cmp	r5, #0
    6a56:	d0a9      	beq.n	69ac <_printf_i+0x128>
    6a58:	9e04      	ldr	r6, [sp, #16]
    6a5a:	0028      	movs	r0, r5
    6a5c:	0039      	movs	r1, r7
    6a5e:	f7ff f947 	bl	5cf0 <__aeabi_uidivmod>
    6a62:	9b03      	ldr	r3, [sp, #12]
    6a64:	3e01      	subs	r6, #1
    6a66:	5c5b      	ldrb	r3, [r3, r1]
    6a68:	0028      	movs	r0, r5
    6a6a:	7033      	strb	r3, [r6, #0]
    6a6c:	0039      	movs	r1, r7
    6a6e:	f7ff f8b9 	bl	5be4 <__udivsi3>
    6a72:	1e05      	subs	r5, r0, #0
    6a74:	d1f1      	bne.n	6a5a <_printf_i+0x1d6>
    6a76:	2f08      	cmp	r7, #8
    6a78:	d109      	bne.n	6a8e <_printf_i+0x20a>
    6a7a:	6823      	ldr	r3, [r4, #0]
    6a7c:	07db      	lsls	r3, r3, #31
    6a7e:	d506      	bpl.n	6a8e <_printf_i+0x20a>
    6a80:	6863      	ldr	r3, [r4, #4]
    6a82:	6922      	ldr	r2, [r4, #16]
    6a84:	4293      	cmp	r3, r2
    6a86:	dc02      	bgt.n	6a8e <_printf_i+0x20a>
    6a88:	2330      	movs	r3, #48	; 0x30
    6a8a:	3e01      	subs	r6, #1
    6a8c:	7033      	strb	r3, [r6, #0]
    6a8e:	9b04      	ldr	r3, [sp, #16]
    6a90:	1b9b      	subs	r3, r3, r6
    6a92:	6123      	str	r3, [r4, #16]
    6a94:	9b07      	ldr	r3, [sp, #28]
    6a96:	aa09      	add	r2, sp, #36	; 0x24
    6a98:	9300      	str	r3, [sp, #0]
    6a9a:	0021      	movs	r1, r4
    6a9c:	9b06      	ldr	r3, [sp, #24]
    6a9e:	9805      	ldr	r0, [sp, #20]
    6aa0:	f7ff fe82 	bl	67a8 <_printf_common>
    6aa4:	1c43      	adds	r3, r0, #1
    6aa6:	d1b3      	bne.n	6a10 <_printf_i+0x18c>
    6aa8:	2001      	movs	r0, #1
    6aaa:	4240      	negs	r0, r0
    6aac:	b00b      	add	sp, #44	; 0x2c
    6aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ab0:	00007594 	.word	0x00007594
    6ab4:	00007583 	.word	0x00007583

00006ab8 <__ascii_wctomb>:
    6ab8:	1e0b      	subs	r3, r1, #0
    6aba:	d004      	beq.n	6ac6 <__ascii_wctomb+0xe>
    6abc:	2aff      	cmp	r2, #255	; 0xff
    6abe:	d904      	bls.n	6aca <__ascii_wctomb+0x12>
    6ac0:	238a      	movs	r3, #138	; 0x8a
    6ac2:	6003      	str	r3, [r0, #0]
    6ac4:	3b8b      	subs	r3, #139	; 0x8b
    6ac6:	0018      	movs	r0, r3
    6ac8:	4770      	bx	lr
    6aca:	700a      	strb	r2, [r1, #0]
    6acc:	2301      	movs	r3, #1
    6ace:	e7fa      	b.n	6ac6 <__ascii_wctomb+0xe>

00006ad0 <memchr>:
    6ad0:	b2c9      	uxtb	r1, r1
    6ad2:	1882      	adds	r2, r0, r2
    6ad4:	4290      	cmp	r0, r2
    6ad6:	d101      	bne.n	6adc <memchr+0xc>
    6ad8:	2000      	movs	r0, #0
    6ada:	4770      	bx	lr
    6adc:	7803      	ldrb	r3, [r0, #0]
    6ade:	428b      	cmp	r3, r1
    6ae0:	d0fb      	beq.n	6ada <memchr+0xa>
    6ae2:	3001      	adds	r0, #1
    6ae4:	e7f6      	b.n	6ad4 <memchr+0x4>

00006ae6 <memcpy>:
    6ae6:	2300      	movs	r3, #0
    6ae8:	b510      	push	{r4, lr}
    6aea:	429a      	cmp	r2, r3
    6aec:	d100      	bne.n	6af0 <memcpy+0xa>
    6aee:	bd10      	pop	{r4, pc}
    6af0:	5ccc      	ldrb	r4, [r1, r3]
    6af2:	54c4      	strb	r4, [r0, r3]
    6af4:	3301      	adds	r3, #1
    6af6:	e7f8      	b.n	6aea <memcpy+0x4>

00006af8 <memmove>:
    6af8:	b510      	push	{r4, lr}
    6afa:	4288      	cmp	r0, r1
    6afc:	d902      	bls.n	6b04 <memmove+0xc>
    6afe:	188b      	adds	r3, r1, r2
    6b00:	4298      	cmp	r0, r3
    6b02:	d308      	bcc.n	6b16 <memmove+0x1e>
    6b04:	2300      	movs	r3, #0
    6b06:	429a      	cmp	r2, r3
    6b08:	d007      	beq.n	6b1a <memmove+0x22>
    6b0a:	5ccc      	ldrb	r4, [r1, r3]
    6b0c:	54c4      	strb	r4, [r0, r3]
    6b0e:	3301      	adds	r3, #1
    6b10:	e7f9      	b.n	6b06 <memmove+0xe>
    6b12:	5c8b      	ldrb	r3, [r1, r2]
    6b14:	5483      	strb	r3, [r0, r2]
    6b16:	3a01      	subs	r2, #1
    6b18:	d2fb      	bcs.n	6b12 <memmove+0x1a>
    6b1a:	bd10      	pop	{r4, pc}

00006b1c <_realloc_r>:
    6b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b1e:	0007      	movs	r7, r0
    6b20:	000d      	movs	r5, r1
    6b22:	0016      	movs	r6, r2
    6b24:	2900      	cmp	r1, #0
    6b26:	d105      	bne.n	6b34 <_realloc_r+0x18>
    6b28:	0011      	movs	r1, r2
    6b2a:	f7ff fb8b 	bl	6244 <_malloc_r>
    6b2e:	0004      	movs	r4, r0
    6b30:	0020      	movs	r0, r4
    6b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b34:	2a00      	cmp	r2, #0
    6b36:	d103      	bne.n	6b40 <_realloc_r+0x24>
    6b38:	f7ff fb3a 	bl	61b0 <_free_r>
    6b3c:	0034      	movs	r4, r6
    6b3e:	e7f7      	b.n	6b30 <_realloc_r+0x14>
    6b40:	f000 f812 	bl	6b68 <_malloc_usable_size_r>
    6b44:	002c      	movs	r4, r5
    6b46:	4286      	cmp	r6, r0
    6b48:	d9f2      	bls.n	6b30 <_realloc_r+0x14>
    6b4a:	0031      	movs	r1, r6
    6b4c:	0038      	movs	r0, r7
    6b4e:	f7ff fb79 	bl	6244 <_malloc_r>
    6b52:	1e04      	subs	r4, r0, #0
    6b54:	d0ec      	beq.n	6b30 <_realloc_r+0x14>
    6b56:	0029      	movs	r1, r5
    6b58:	0032      	movs	r2, r6
    6b5a:	f7ff ffc4 	bl	6ae6 <memcpy>
    6b5e:	0029      	movs	r1, r5
    6b60:	0038      	movs	r0, r7
    6b62:	f7ff fb25 	bl	61b0 <_free_r>
    6b66:	e7e3      	b.n	6b30 <_realloc_r+0x14>

00006b68 <_malloc_usable_size_r>:
    6b68:	1f0b      	subs	r3, r1, #4
    6b6a:	681b      	ldr	r3, [r3, #0]
    6b6c:	1f18      	subs	r0, r3, #4
    6b6e:	2b00      	cmp	r3, #0
    6b70:	da01      	bge.n	6b76 <_malloc_usable_size_r+0xe>
    6b72:	580b      	ldr	r3, [r1, r0]
    6b74:	18c0      	adds	r0, r0, r3
    6b76:	4770      	bx	lr
    6b78:	000002f4 	.word	0x000002f4
    6b7c:	000002f4 	.word	0x000002f4
    6b80:	000002d0 	.word	0x000002d0
    6b84:	000002f4 	.word	0x000002f4
    6b88:	000002d0 	.word	0x000002d0
    6b8c:	000002b6 	.word	0x000002b6
    6b90:	000002b6 	.word	0x000002b6
    6b94:	000002f4 	.word	0x000002f4
    6b98:	000002f4 	.word	0x000002f4
    6b9c:	000002f4 	.word	0x000002f4
    6ba0:	000002f4 	.word	0x000002f4
    6ba4:	000002f4 	.word	0x000002f4
    6ba8:	000002f4 	.word	0x000002f4
    6bac:	000002f4 	.word	0x000002f4
    6bb0:	000002f4 	.word	0x000002f4
    6bb4:	000002f4 	.word	0x000002f4
    6bb8:	000002f4 	.word	0x000002f4
    6bbc:	000002f4 	.word	0x000002f4
    6bc0:	000002f4 	.word	0x000002f4
    6bc4:	000002f4 	.word	0x000002f4
    6bc8:	000002f4 	.word	0x000002f4
    6bcc:	000002f4 	.word	0x000002f4
    6bd0:	000002f4 	.word	0x000002f4
    6bd4:	000002f4 	.word	0x000002f4
    6bd8:	000002f4 	.word	0x000002f4
    6bdc:	000002f4 	.word	0x000002f4
    6be0:	000002f4 	.word	0x000002f4
    6be4:	000002f4 	.word	0x000002f4
    6be8:	000002f4 	.word	0x000002f4
    6bec:	000002f4 	.word	0x000002f4
    6bf0:	000002f4 	.word	0x000002f4
    6bf4:	000002f4 	.word	0x000002f4
    6bf8:	000002f4 	.word	0x000002f4
    6bfc:	000002f4 	.word	0x000002f4
    6c00:	000002f4 	.word	0x000002f4
    6c04:	000002f4 	.word	0x000002f4
    6c08:	000002f4 	.word	0x000002f4
    6c0c:	000002f4 	.word	0x000002f4
    6c10:	000002f4 	.word	0x000002f4
    6c14:	000002f4 	.word	0x000002f4
    6c18:	000002f4 	.word	0x000002f4
    6c1c:	000002f4 	.word	0x000002f4
    6c20:	000002f4 	.word	0x000002f4
    6c24:	000002f4 	.word	0x000002f4
    6c28:	000002f4 	.word	0x000002f4
    6c2c:	000002f4 	.word	0x000002f4
    6c30:	000002f4 	.word	0x000002f4
    6c34:	000002f4 	.word	0x000002f4
    6c38:	000002f4 	.word	0x000002f4
    6c3c:	000002f4 	.word	0x000002f4
    6c40:	000002f4 	.word	0x000002f4
    6c44:	000002f4 	.word	0x000002f4
    6c48:	000002f4 	.word	0x000002f4
    6c4c:	000002f4 	.word	0x000002f4
    6c50:	000002f4 	.word	0x000002f4
    6c54:	000002f4 	.word	0x000002f4
    6c58:	000002f4 	.word	0x000002f4
    6c5c:	000002f4 	.word	0x000002f4
    6c60:	000002f4 	.word	0x000002f4
    6c64:	000002f4 	.word	0x000002f4
    6c68:	000002f4 	.word	0x000002f4
    6c6c:	000002f4 	.word	0x000002f4
    6c70:	000002f4 	.word	0x000002f4
    6c74:	000002f4 	.word	0x000002f4
    6c78:	000002d0 	.word	0x000002d0
    6c7c:	000002d0 	.word	0x000002d0
    6c80:	000002d8 	.word	0x000002d8
    6c84:	000002d8 	.word	0x000002d8
    6c88:	000002d8 	.word	0x000002d8
    6c8c:	000002d8 	.word	0x000002d8

00006c90 <mmc_trans_multipliers>:
    6c90:	00000000 0000000a 0000000c 0000000d     ................
    6ca0:	0000000f 00000014 0000001a 0000001e     ................
    6cb0:	00000023 00000028 0000002d 00000034     #...(...-...4...
    6cc0:	00000037 0000003c 00000046 00000050     7...<...F...P...

00006cd0 <sd_mmc_trans_units>:
    6cd0:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00006cec <sd_trans_multipliers>:
    6cec:	00000000 0000000a 0000000c 0000000d     ................
    6cfc:	0000000f 00000014 00000019 0000001e     ................
    6d0c:	00000023 00000028 0000002d 00000032     #...(...-...2...
    6d1c:	00000037 0000003c 00000046 00000050     7...<...F...P...
    6d2c:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    6d3c:	42001800 42001c00 00002d96 00002d92     ...B...B.-...-..
    6d4c:	00002d92 00002df8 00002df8 00002daa     .-...-...-...-..
    6d5c:	00002d9c 00002db0 00002de6 00002fb8     .-...-...-.../..
    6d6c:	00002f98 00002f98 00003024 00002faa     ./.../..$0.../..
    6d7c:	00002fc6 00002f9c 00002fd4 00003014     ./.../.../...0..

00006d8c <LfnOfs>:
    6d8c:	07050301 12100e09 1c181614 0000001e     ................

00006d9c <excvt.4558>:
    6d9c:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    6dac:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    6dbc:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    6dcc:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    6ddc:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    6dec:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    6dfc:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    6e0c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    6e1c:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    6e2c:	00005d5b                                []..

00006e30 <Tbl>:
    6e30:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    6e40:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    6e50:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    6e60:	00d600ff 00f800dc 00d800a3 019200d7     ................
    6e70:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    6e80:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    6e90:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    6ea0:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    6eb0:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    6ec0:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    6ed0:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    6ee0:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    6ef0:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    6f00:	00da00de 00d900db 00dd00fd 00b400af     ................
    6f10:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    6f20:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

00006f30 <tbl_lower.4308>:
    6f30:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    6f40:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    6f50:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    6f60:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    6f70:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    6f80:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    6f90:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    6fa0:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    6fb0:	01050103 01090107 010d010b 0111010f     ................
    6fc0:	01150113 01190117 011d011b 0121011f     ..............!.
    6fd0:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    6fe0:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    6ff0:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    7000:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    7010:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    7020:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    7030:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    7040:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    7050:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    7060:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    7070:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    7080:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    7090:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    70a0:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    70b0:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    70c0:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    70d0:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    70e0:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    70f0:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    7100:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

00007110 <tbl_upper.4309>:
    7110:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    7120:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    7130:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    7140:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    7150:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    7160:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    7170:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    7180:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    7190:	01040102 01080106 010c010a 0110010e     ................
    71a0:	01140112 01180116 011c011a 0120011e     .............. .
    71b0:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    71c0:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    71d0:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    71e0:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    71f0:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    7200:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    7210:	03940393 03960395 03980397 039a0399     ................
    7220:	039c039b 039e039d 03a0039f 03a303a1     ................
    7230:	03a503a4 03a703a6 03a903a8 041003aa     ................
    7240:	04120411 04140413 04160415 04180417     ................
    7250:	041a0419 041c041b 041e041d 0420041f     .............. .
    7260:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    7270:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    7280:	04030402 04050404 04070406 04090408     ................
    7290:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    72a0:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    72b0:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    72c0:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    72d0:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    72e0:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    72f0:	35455345 2d203631 4f4f4220 414f4c54     ESE516 - BOOTLOA
    7300:	20524544 6e6e7572 21676e69 00000a0d     DER running!....
    7310:	6c756f43 74276e64 65706f20 6576206e     Couldn't open ve
    7320:	6f697372 6966206e 6f20656c 4453206e     rsion file on SD
    7330:	000a0d2e 46204453 776d7269 3a657261     ....SD Firmware:
    7340:	0d642520 0000000a 204d564e 6d726946      %d.....NVM Firm
    7350:	65726177 6425203a 00000a0d 70613a30     ware: %d....0:ap
    7360:	69622e70 0000006e 6c696146 74206465     p.bin...Failed t
    7370:	706f206f 6e206e65 66207765 776d7269     o open new firmw
    7380:	20657261 656c6966 0d2e2e2e 0000000a     are file........
    7390:	20656854 75736572 6c20746c 6920676f     The result log i
    73a0:	64252073 000a0d2e 20656854 657a6973     s %d....The size
    73b0:	20666f20 20656874 6d726966 65726177      of the firmware
    73c0:	6c696620 73692065 20642520 65747962      file is %d byte
    73d0:	0a0d2e73 00000000 6f727245 69772072     s.......Error wi
    73e0:	72206874 6c757365 0a0d2e74 00000000     th result.......
    73f0:	20435243 203a4453 0a0d6425 00000000     CRC SD: %d......
    7400:	20435243 3a4d564e 0d642520 0000000a     CRC NVM: %d.....
    7410:	00006425 65763a30 6f697372 4d564e6e     %d..0:versionNVM
    7420:	7478742e 00000000 6c756f43 74276e64     .txt....Couldn't
    7430:	65706f20 6576206e 6f697372 564e206e      open version NV
    7440:	6966204d 6f20656c 4453206e 000a0d2e     M file on SD....
    7450:	75206557 74616470 74206465 66206568     We updated the f
    7460:	776d7269 21657261 00000a0d 6d726946     irmware!....Firm
    7470:	65726177 2d705520 442d6f74 21657461     ware Up-to-Date!
    7480:	6d754a20 676e6970 206f7420 6c707041      Jumping to Appl
    7490:	74616369 2e6e6f69 0a0d2e2e 00000000     ication.........
    74a0:	2d0d0a0c 5345202d 36313545 53202d20     ...-- ESE516 - S
    74b0:	74726174 20666f20 6a6f7270 21746365     tart of project!
    74c0:	00000a0d 64726143 736e6920 6c6c6174     ....Card install
    74d0:	49414620 000d0a4c 61656c50 75206573      FAIL...Please u
    74e0:	756c706e 6e612067 65722064 756c702d     nplug and re-plu
    74f0:	68742067 61632065 0a2e6472 0000000d     g the card......
    7500:	6e756f4d 69642074 28206b73 6f6d5f66     Mount disk (f_mo
    7510:	29746e75 0d2e2e2e 0000000a 4941465b     unt)........[FAI
    7520:	72205d4c 25207365 000a0d64 5d4b4f5b     L] res %d...[OK]
    7530:	00000a0d 6c663a30 742e6761 00007478     ....0:flag.txt..
    7540:	6c756f43 74276e64 65706f20 6c66206e     Couldn't open fl
    7550:	66206761 20656c69 53206e6f 0a0d2e44     ag file on SD...
    7560:	00000000 00000031 4f500043 00584953     ....1...C.POSIX.
    7570:	2d23002e 00202b30 004c6c68 45676665     ..#-0+ .hlL.efgE
    7580:	30004746 34333231 38373635 43424139     FG.0123456789ABC
    7590:	00464544 33323130 37363534 62613938     DEF.0123456789ab
    75a0:	66656463 20200000                                cdef.

000075a5 <_ctype_>:
    75a5:	20202000 20202020 28282020 20282828     .         ((((( 
    75b5:	20202020 20202020 20202020 20202020                     
    75c5:	10108820 10101010 10101010 10101010      ...............
    75d5:	04040410 04040404 10040404 10101010     ................
    75e5:	41411010 41414141 01010101 01010101     ..AAAAAA........
    75f5:	01010101 01010101 01010101 10101010     ................
    7605:	42421010 42424242 02020202 02020202     ..BBBBBB........
    7615:	02020202 02020202 02020202 10101010     ................
    7625:	00000020 00000000 00000000 00000000      ...............
	...

000076a8 <_init>:
    76a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76aa:	46c0      	nop			; (mov r8, r8)
    76ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    76ae:	bc08      	pop	{r3}
    76b0:	469e      	mov	lr, r3
    76b2:	4770      	bx	lr

000076b4 <__init_array_start>:
    76b4:	000000dd 	.word	0x000000dd

000076b8 <_fini>:
    76b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76ba:	46c0      	nop			; (mov r8, r8)
    76bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    76be:	bc08      	pop	{r3}
    76c0:	469e      	mov	lr, r3
    76c2:	4770      	bx	lr

000076c4 <__fini_array_start>:
    76c4:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <ss_pins>:
2000000c:	0111                                             .

2000000d <g_interrupt_enabled>:
2000000d:	0001 3000                                        ...

20000010 <versionNVM_file>:
20000010:	3a30 6576 7372 6f69 4e6e 4d56 742e 7478     0:versionNVM.txt
20000020:	0000 0000                                   ....

20000024 <version_file>:
20000024:	3a30 6576 7372 6f69 2e6e 7874 0074 0000     0:version.txt...

20000034 <_impure_ptr>:
20000034:	0038 2000                                   8.. 

20000038 <impure_data>:
	...

20000098 <__global_locale>:
20000098:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000b8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000d8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
200000f8:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000118:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000138:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000158:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20000178:	6ab9 0000 64b3 0000 0000 0000 75a5 0000     .j...d.......u..
20000188:	7570 0000 7577 0000 7577 0000 7577 0000     pu..wu..wu..wu..
20000198:	7577 0000 7577 0000 7577 0000 7577 0000     wu..wu..wu..wu..
200001a8:	7577 0000 7577 0000 ffff ffff ffff ffff     wu..wu..........
200001b8:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
200001e0:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
